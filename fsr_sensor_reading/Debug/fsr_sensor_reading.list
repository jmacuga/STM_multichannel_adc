
fsr_sensor_reading.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009308  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  080094d8  080094d8  000194d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080099ac  080099ac  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  080099ac  080099ac  000199ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080099b4  080099b4  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080099b4  080099b4  000199b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080099b8  080099b8  000199b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  080099bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  200001e0  08009b9c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08009b9c  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b3c2  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cf1  00000000  00000000  0002b5d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f8  00000000  00000000  0002d2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000840  00000000  00000000  0002dbc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000231ce  00000000  00000000  0002e400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bca8  00000000  00000000  000515ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6567  00000000  00000000  0005d276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001337dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003980  00000000  00000000  00133830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080094c0 	.word	0x080094c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	080094c0 	.word	0x080094c0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9aa 	b.w	8001034 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468e      	mov	lr, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d14d      	bne.n	8000e0e <__udivmoddi4+0xaa>
 8000d72:	428a      	cmp	r2, r1
 8000d74:	4694      	mov	ip, r2
 8000d76:	d969      	bls.n	8000e4c <__udivmoddi4+0xe8>
 8000d78:	fab2 f282 	clz	r2, r2
 8000d7c:	b152      	cbz	r2, 8000d94 <__udivmoddi4+0x30>
 8000d7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d82:	f1c2 0120 	rsb	r1, r2, #32
 8000d86:	fa20 f101 	lsr.w	r1, r0, r1
 8000d8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d92:	4094      	lsls	r4, r2
 8000d94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d98:	0c21      	lsrs	r1, r4, #16
 8000d9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d9e:	fa1f f78c 	uxth.w	r7, ip
 8000da2:	fb08 e316 	mls	r3, r8, r6, lr
 8000da6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000daa:	fb06 f107 	mul.w	r1, r6, r7
 8000dae:	4299      	cmp	r1, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x64>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dba:	f080 811f 	bcs.w	8000ffc <__udivmoddi4+0x298>
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	f240 811c 	bls.w	8000ffc <__udivmoddi4+0x298>
 8000dc4:	3e02      	subs	r6, #2
 8000dc6:	4463      	add	r3, ip
 8000dc8:	1a5b      	subs	r3, r3, r1
 8000dca:	b2a4      	uxth	r4, r4
 8000dcc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dd0:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd8:	fb00 f707 	mul.w	r7, r0, r7
 8000ddc:	42a7      	cmp	r7, r4
 8000dde:	d90a      	bls.n	8000df6 <__udivmoddi4+0x92>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de8:	f080 810a 	bcs.w	8001000 <__udivmoddi4+0x29c>
 8000dec:	42a7      	cmp	r7, r4
 8000dee:	f240 8107 	bls.w	8001000 <__udivmoddi4+0x29c>
 8000df2:	4464      	add	r4, ip
 8000df4:	3802      	subs	r0, #2
 8000df6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dfa:	1be4      	subs	r4, r4, r7
 8000dfc:	2600      	movs	r6, #0
 8000dfe:	b11d      	cbz	r5, 8000e08 <__udivmoddi4+0xa4>
 8000e00:	40d4      	lsrs	r4, r2
 8000e02:	2300      	movs	r3, #0
 8000e04:	e9c5 4300 	strd	r4, r3, [r5]
 8000e08:	4631      	mov	r1, r6
 8000e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0xc2>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	f000 80ef 	beq.w	8000ff6 <__udivmoddi4+0x292>
 8000e18:	2600      	movs	r6, #0
 8000e1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000e1e:	4630      	mov	r0, r6
 8000e20:	4631      	mov	r1, r6
 8000e22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e26:	fab3 f683 	clz	r6, r3
 8000e2a:	2e00      	cmp	r6, #0
 8000e2c:	d14a      	bne.n	8000ec4 <__udivmoddi4+0x160>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d302      	bcc.n	8000e38 <__udivmoddi4+0xd4>
 8000e32:	4282      	cmp	r2, r0
 8000e34:	f200 80f9 	bhi.w	800102a <__udivmoddi4+0x2c6>
 8000e38:	1a84      	subs	r4, r0, r2
 8000e3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e3e:	2001      	movs	r0, #1
 8000e40:	469e      	mov	lr, r3
 8000e42:	2d00      	cmp	r5, #0
 8000e44:	d0e0      	beq.n	8000e08 <__udivmoddi4+0xa4>
 8000e46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e4a:	e7dd      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000e4c:	b902      	cbnz	r2, 8000e50 <__udivmoddi4+0xec>
 8000e4e:	deff      	udf	#255	; 0xff
 8000e50:	fab2 f282 	clz	r2, r2
 8000e54:	2a00      	cmp	r2, #0
 8000e56:	f040 8092 	bne.w	8000f7e <__udivmoddi4+0x21a>
 8000e5a:	eba1 010c 	sub.w	r1, r1, ip
 8000e5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	2601      	movs	r6, #1
 8000e68:	0c20      	lsrs	r0, r4, #16
 8000e6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e76:	fb0e f003 	mul.w	r0, lr, r3
 8000e7a:	4288      	cmp	r0, r1
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x12c>
 8000e7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x12a>
 8000e88:	4288      	cmp	r0, r1
 8000e8a:	f200 80cb 	bhi.w	8001024 <__udivmoddi4+0x2c0>
 8000e8e:	4643      	mov	r3, r8
 8000e90:	1a09      	subs	r1, r1, r0
 8000e92:	b2a4      	uxth	r4, r4
 8000e94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e98:	fb07 1110 	mls	r1, r7, r0, r1
 8000e9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ea0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ea4:	45a6      	cmp	lr, r4
 8000ea6:	d908      	bls.n	8000eba <__udivmoddi4+0x156>
 8000ea8:	eb1c 0404 	adds.w	r4, ip, r4
 8000eac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eb0:	d202      	bcs.n	8000eb8 <__udivmoddi4+0x154>
 8000eb2:	45a6      	cmp	lr, r4
 8000eb4:	f200 80bb 	bhi.w	800102e <__udivmoddi4+0x2ca>
 8000eb8:	4608      	mov	r0, r1
 8000eba:	eba4 040e 	sub.w	r4, r4, lr
 8000ebe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ec2:	e79c      	b.n	8000dfe <__udivmoddi4+0x9a>
 8000ec4:	f1c6 0720 	rsb	r7, r6, #32
 8000ec8:	40b3      	lsls	r3, r6
 8000eca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ece:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ed2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ed6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eda:	431c      	orrs	r4, r3
 8000edc:	40f9      	lsrs	r1, r7
 8000ede:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eea:	0c20      	lsrs	r0, r4, #16
 8000eec:	fa1f fe8c 	uxth.w	lr, ip
 8000ef0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ef4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ef8:	fb08 f00e 	mul.w	r0, r8, lr
 8000efc:	4288      	cmp	r0, r1
 8000efe:	fa02 f206 	lsl.w	r2, r2, r6
 8000f02:	d90b      	bls.n	8000f1c <__udivmoddi4+0x1b8>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f0c:	f080 8088 	bcs.w	8001020 <__udivmoddi4+0x2bc>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f240 8085 	bls.w	8001020 <__udivmoddi4+0x2bc>
 8000f16:	f1a8 0802 	sub.w	r8, r8, #2
 8000f1a:	4461      	add	r1, ip
 8000f1c:	1a09      	subs	r1, r1, r0
 8000f1e:	b2a4      	uxth	r4, r4
 8000f20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f24:	fb09 1110 	mls	r1, r9, r0, r1
 8000f28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f30:	458e      	cmp	lr, r1
 8000f32:	d908      	bls.n	8000f46 <__udivmoddi4+0x1e2>
 8000f34:	eb1c 0101 	adds.w	r1, ip, r1
 8000f38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f3c:	d26c      	bcs.n	8001018 <__udivmoddi4+0x2b4>
 8000f3e:	458e      	cmp	lr, r1
 8000f40:	d96a      	bls.n	8001018 <__udivmoddi4+0x2b4>
 8000f42:	3802      	subs	r0, #2
 8000f44:	4461      	add	r1, ip
 8000f46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f4e:	eba1 010e 	sub.w	r1, r1, lr
 8000f52:	42a1      	cmp	r1, r4
 8000f54:	46c8      	mov	r8, r9
 8000f56:	46a6      	mov	lr, r4
 8000f58:	d356      	bcc.n	8001008 <__udivmoddi4+0x2a4>
 8000f5a:	d053      	beq.n	8001004 <__udivmoddi4+0x2a0>
 8000f5c:	b15d      	cbz	r5, 8000f76 <__udivmoddi4+0x212>
 8000f5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f62:	eb61 010e 	sbc.w	r1, r1, lr
 8000f66:	fa01 f707 	lsl.w	r7, r1, r7
 8000f6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f6e:	40f1      	lsrs	r1, r6
 8000f70:	431f      	orrs	r7, r3
 8000f72:	e9c5 7100 	strd	r7, r1, [r5]
 8000f76:	2600      	movs	r6, #0
 8000f78:	4631      	mov	r1, r6
 8000f7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7e:	f1c2 0320 	rsb	r3, r2, #32
 8000f82:	40d8      	lsrs	r0, r3
 8000f84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f88:	fa21 f303 	lsr.w	r3, r1, r3
 8000f8c:	4091      	lsls	r1, r2
 8000f8e:	4301      	orrs	r1, r0
 8000f90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f94:	fa1f fe8c 	uxth.w	lr, ip
 8000f98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000fa0:	0c0b      	lsrs	r3, r1, #16
 8000fa2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000fa6:	fb00 f60e 	mul.w	r6, r0, lr
 8000faa:	429e      	cmp	r6, r3
 8000fac:	fa04 f402 	lsl.w	r4, r4, r2
 8000fb0:	d908      	bls.n	8000fc4 <__udivmoddi4+0x260>
 8000fb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fba:	d22f      	bcs.n	800101c <__udivmoddi4+0x2b8>
 8000fbc:	429e      	cmp	r6, r3
 8000fbe:	d92d      	bls.n	800101c <__udivmoddi4+0x2b8>
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	4463      	add	r3, ip
 8000fc4:	1b9b      	subs	r3, r3, r6
 8000fc6:	b289      	uxth	r1, r1
 8000fc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fcc:	fb07 3316 	mls	r3, r7, r6, r3
 8000fd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fd8:	428b      	cmp	r3, r1
 8000fda:	d908      	bls.n	8000fee <__udivmoddi4+0x28a>
 8000fdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fe0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fe4:	d216      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d914      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fea:	3e02      	subs	r6, #2
 8000fec:	4461      	add	r1, ip
 8000fee:	1ac9      	subs	r1, r1, r3
 8000ff0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ff4:	e738      	b.n	8000e68 <__udivmoddi4+0x104>
 8000ff6:	462e      	mov	r6, r5
 8000ff8:	4628      	mov	r0, r5
 8000ffa:	e705      	b.n	8000e08 <__udivmoddi4+0xa4>
 8000ffc:	4606      	mov	r6, r0
 8000ffe:	e6e3      	b.n	8000dc8 <__udivmoddi4+0x64>
 8001000:	4618      	mov	r0, r3
 8001002:	e6f8      	b.n	8000df6 <__udivmoddi4+0x92>
 8001004:	454b      	cmp	r3, r9
 8001006:	d2a9      	bcs.n	8000f5c <__udivmoddi4+0x1f8>
 8001008:	ebb9 0802 	subs.w	r8, r9, r2
 800100c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001010:	3801      	subs	r0, #1
 8001012:	e7a3      	b.n	8000f5c <__udivmoddi4+0x1f8>
 8001014:	4646      	mov	r6, r8
 8001016:	e7ea      	b.n	8000fee <__udivmoddi4+0x28a>
 8001018:	4620      	mov	r0, r4
 800101a:	e794      	b.n	8000f46 <__udivmoddi4+0x1e2>
 800101c:	4640      	mov	r0, r8
 800101e:	e7d1      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001020:	46d0      	mov	r8, sl
 8001022:	e77b      	b.n	8000f1c <__udivmoddi4+0x1b8>
 8001024:	3b02      	subs	r3, #2
 8001026:	4461      	add	r1, ip
 8001028:	e732      	b.n	8000e90 <__udivmoddi4+0x12c>
 800102a:	4630      	mov	r0, r6
 800102c:	e709      	b.n	8000e42 <__udivmoddi4+0xde>
 800102e:	4464      	add	r4, ip
 8001030:	3802      	subs	r0, #2
 8001032:	e742      	b.n	8000eba <__udivmoddi4+0x156>

08001034 <__aeabi_idiv0>:
 8001034:	4770      	bx	lr
 8001036:	bf00      	nop

08001038 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001038:	b5b0      	push	{r4, r5, r7, lr}
 800103a:	b0a0      	sub	sp, #128	; 0x80
 800103c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800103e:	f000 fc3b 	bl	80018b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001042:	f000 f86f 	bl	8001124 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001046:	f000 f985 	bl	8001354 <MX_GPIO_Init>
  MX_DMA_Init();
 800104a:	f000 f963 	bl	8001314 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800104e:	f000 f937 	bl	80012c0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001052:	f000 f8d5 	bl	8001200 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)rawValues, 2);
 8001056:	f107 030c 	add.w	r3, r7, #12
 800105a:	2202      	movs	r2, #2
 800105c:	4619      	mov	r1, r3
 800105e:	482e      	ldr	r0, [pc, #184]	; (8001118 <main+0xe0>)
 8001060:	f000 fce0 	bl	8001a24 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  float voltages[2];
	  for (int i = 0; i < 2; i++)
 8001064:	2300      	movs	r3, #0
 8001066:	677b      	str	r3, [r7, #116]	; 0x74
 8001068:	e026      	b.n	80010b8 <main+0x80>
	  {
		  voltages[i] = rawValues[i] * 3.4/ 4095;
 800106a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	3378      	adds	r3, #120	; 0x78
 8001070:	443b      	add	r3, r7
 8001072:	f833 3c6c 	ldrh.w	r3, [r3, #-108]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff fa74 	bl	8000564 <__aeabi_i2d>
 800107c:	a322      	add	r3, pc, #136	; (adr r3, 8001108 <main+0xd0>)
 800107e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001082:	f7ff fad9 	bl	8000638 <__aeabi_dmul>
 8001086:	4602      	mov	r2, r0
 8001088:	460b      	mov	r3, r1
 800108a:	4610      	mov	r0, r2
 800108c:	4619      	mov	r1, r3
 800108e:	a320      	add	r3, pc, #128	; (adr r3, 8001110 <main+0xd8>)
 8001090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001094:	f7ff fbfa 	bl	800088c <__aeabi_ddiv>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	4610      	mov	r0, r2
 800109e:	4619      	mov	r1, r3
 80010a0:	f7ff fdc2 	bl	8000c28 <__aeabi_d2f>
 80010a4:	4602      	mov	r2, r0
 80010a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	3378      	adds	r3, #120	; 0x78
 80010ac:	443b      	add	r3, r7
 80010ae:	3b74      	subs	r3, #116	; 0x74
 80010b0:	601a      	str	r2, [r3, #0]
	  for (int i = 0; i < 2; i++)
 80010b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80010b4:	3301      	adds	r3, #1
 80010b6:	677b      	str	r3, [r7, #116]	; 0x74
 80010b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	ddd5      	ble.n	800106a <main+0x32>

	  }
	  sprintf(msg, "%.4f,%.4f\r\n", voltages[0], voltages[1]);
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fa61 	bl	8000588 <__aeabi_f2d>
 80010c6:	4604      	mov	r4, r0
 80010c8:	460d      	mov	r5, r1
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff fa5b 	bl	8000588 <__aeabi_f2d>
 80010d2:	4602      	mov	r2, r0
 80010d4:	460b      	mov	r3, r1
 80010d6:	f107 0010 	add.w	r0, r7, #16
 80010da:	e9cd 2300 	strd	r2, r3, [sp]
 80010de:	4622      	mov	r2, r4
 80010e0:	462b      	mov	r3, r5
 80010e2:	490e      	ldr	r1, [pc, #56]	; (800111c <main+0xe4>)
 80010e4:	f004 fbfc 	bl	80058e0 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80010e8:	f107 0310 	add.w	r3, r7, #16
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff f88f 	bl	8000210 <strlen>
 80010f2:	4603      	mov	r3, r0
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	f107 0110 	add.w	r1, r7, #16
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	4808      	ldr	r0, [pc, #32]	; (8001120 <main+0xe8>)
 8001100:	f002 fd75 	bl	8003bee <HAL_UART_Transmit>
  {
 8001104:	e7ae      	b.n	8001064 <main+0x2c>
 8001106:	bf00      	nop
 8001108:	33333333 	.word	0x33333333
 800110c:	400b3333 	.word	0x400b3333
 8001110:	00000000 	.word	0x00000000
 8001114:	40affe00 	.word	0x40affe00
 8001118:	200001fc 	.word	0x200001fc
 800111c:	080094d8 	.word	0x080094d8
 8001120:	200002a4 	.word	0x200002a4

08001124 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b094      	sub	sp, #80	; 0x50
 8001128:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800112a:	f107 031c 	add.w	r3, r7, #28
 800112e:	2234      	movs	r2, #52	; 0x34
 8001130:	2100      	movs	r1, #0
 8001132:	4618      	mov	r0, r3
 8001134:	f003 fd4c 	bl	8004bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001138:	f107 0308 	add.w	r3, r7, #8
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001148:	2300      	movs	r3, #0
 800114a:	607b      	str	r3, [r7, #4]
 800114c:	4b2a      	ldr	r3, [pc, #168]	; (80011f8 <SystemClock_Config+0xd4>)
 800114e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001150:	4a29      	ldr	r2, [pc, #164]	; (80011f8 <SystemClock_Config+0xd4>)
 8001152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001156:	6413      	str	r3, [r2, #64]	; 0x40
 8001158:	4b27      	ldr	r3, [pc, #156]	; (80011f8 <SystemClock_Config+0xd4>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001164:	2300      	movs	r3, #0
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	4b24      	ldr	r3, [pc, #144]	; (80011fc <SystemClock_Config+0xd8>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001170:	4a22      	ldr	r2, [pc, #136]	; (80011fc <SystemClock_Config+0xd8>)
 8001172:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001176:	6013      	str	r3, [r2, #0]
 8001178:	4b20      	ldr	r3, [pc, #128]	; (80011fc <SystemClock_Config+0xd8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001180:	603b      	str	r3, [r7, #0]
 8001182:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001184:	2302      	movs	r3, #2
 8001186:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001188:	2301      	movs	r3, #1
 800118a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800118c:	2310      	movs	r3, #16
 800118e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001190:	2302      	movs	r3, #2
 8001192:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001194:	2300      	movs	r3, #0
 8001196:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001198:	2310      	movs	r3, #16
 800119a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800119c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011a2:	2304      	movs	r3, #4
 80011a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011a6:	2302      	movs	r3, #2
 80011a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011aa:	2302      	movs	r3, #2
 80011ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ae:	f107 031c 	add.w	r3, r7, #28
 80011b2:	4618      	mov	r0, r3
 80011b4:	f002 fa30 	bl	8003618 <HAL_RCC_OscConfig>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80011be:	f000 f945 	bl	800144c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011c2:	230f      	movs	r3, #15
 80011c4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c6:	2302      	movs	r3, #2
 80011c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011d4:	2300      	movs	r3, #0
 80011d6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80011d8:	f107 0308 	add.w	r3, r7, #8
 80011dc:	2102      	movs	r1, #2
 80011de:	4618      	mov	r0, r3
 80011e0:	f001 fed0 	bl	8002f84 <HAL_RCC_ClockConfig>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <SystemClock_Config+0xca>
  {
    Error_Handler();
 80011ea:	f000 f92f 	bl	800144c <Error_Handler>
  }
}
 80011ee:	bf00      	nop
 80011f0:	3750      	adds	r7, #80	; 0x50
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40007000 	.word	0x40007000

08001200 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b084      	sub	sp, #16
 8001204:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001206:	463b      	mov	r3, r7
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001212:	4b28      	ldr	r3, [pc, #160]	; (80012b4 <MX_ADC1_Init+0xb4>)
 8001214:	4a28      	ldr	r2, [pc, #160]	; (80012b8 <MX_ADC1_Init+0xb8>)
 8001216:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001218:	4b26      	ldr	r3, [pc, #152]	; (80012b4 <MX_ADC1_Init+0xb4>)
 800121a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800121e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001220:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <MX_ADC1_Init+0xb4>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001226:	4b23      	ldr	r3, [pc, #140]	; (80012b4 <MX_ADC1_Init+0xb4>)
 8001228:	2201      	movs	r2, #1
 800122a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800122c:	4b21      	ldr	r3, [pc, #132]	; (80012b4 <MX_ADC1_Init+0xb4>)
 800122e:	2201      	movs	r2, #1
 8001230:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001232:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <MX_ADC1_Init+0xb4>)
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800123a:	4b1e      	ldr	r3, [pc, #120]	; (80012b4 <MX_ADC1_Init+0xb4>)
 800123c:	2200      	movs	r2, #0
 800123e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001240:	4b1c      	ldr	r3, [pc, #112]	; (80012b4 <MX_ADC1_Init+0xb4>)
 8001242:	4a1e      	ldr	r2, [pc, #120]	; (80012bc <MX_ADC1_Init+0xbc>)
 8001244:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001246:	4b1b      	ldr	r3, [pc, #108]	; (80012b4 <MX_ADC1_Init+0xb4>)
 8001248:	2200      	movs	r2, #0
 800124a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800124c:	4b19      	ldr	r3, [pc, #100]	; (80012b4 <MX_ADC1_Init+0xb4>)
 800124e:	2202      	movs	r2, #2
 8001250:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001252:	4b18      	ldr	r3, [pc, #96]	; (80012b4 <MX_ADC1_Init+0xb4>)
 8001254:	2201      	movs	r2, #1
 8001256:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800125a:	4b16      	ldr	r3, [pc, #88]	; (80012b4 <MX_ADC1_Init+0xb4>)
 800125c:	2201      	movs	r2, #1
 800125e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001260:	4814      	ldr	r0, [pc, #80]	; (80012b4 <MX_ADC1_Init+0xb4>)
 8001262:	f000 fb9b 	bl	800199c <HAL_ADC_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800126c:	f000 f8ee 	bl	800144c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001270:	230a      	movs	r3, #10
 8001272:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001274:	2301      	movs	r3, #1
 8001276:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001278:	2303      	movs	r3, #3
 800127a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800127c:	463b      	mov	r3, r7
 800127e:	4619      	mov	r1, r3
 8001280:	480c      	ldr	r0, [pc, #48]	; (80012b4 <MX_ADC1_Init+0xb4>)
 8001282:	f000 fcf3 	bl	8001c6c <HAL_ADC_ConfigChannel>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800128c:	f000 f8de 	bl	800144c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001290:	230b      	movs	r3, #11
 8001292:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001294:	2302      	movs	r3, #2
 8001296:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001298:	463b      	mov	r3, r7
 800129a:	4619      	mov	r1, r3
 800129c:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_ADC1_Init+0xb4>)
 800129e:	f000 fce5 	bl	8001c6c <HAL_ADC_ConfigChannel>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80012a8:	f000 f8d0 	bl	800144c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80012ac:	bf00      	nop
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200001fc 	.word	0x200001fc
 80012b8:	40012000 	.word	0x40012000
 80012bc:	0f000001 	.word	0x0f000001

080012c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <MX_USART2_UART_Init+0x4c>)
 80012c6:	4a12      	ldr	r2, [pc, #72]	; (8001310 <MX_USART2_UART_Init+0x50>)
 80012c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <MX_USART2_UART_Init+0x4c>)
 80012cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <MX_USART2_UART_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <MX_USART2_UART_Init+0x4c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <MX_USART2_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <MX_USART2_UART_Init+0x4c>)
 80012e6:	220c      	movs	r2, #12
 80012e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <MX_USART2_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <MX_USART2_UART_Init+0x4c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_USART2_UART_Init+0x4c>)
 80012f8:	f002 fc2c 	bl	8003b54 <HAL_UART_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001302:	f000 f8a3 	bl	800144c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	200002a4 	.word	0x200002a4
 8001310:	40004400 	.word	0x40004400

08001314 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
 800131e:	4b0c      	ldr	r3, [pc, #48]	; (8001350 <MX_DMA_Init+0x3c>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a0b      	ldr	r2, [pc, #44]	; (8001350 <MX_DMA_Init+0x3c>)
 8001324:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b09      	ldr	r3, [pc, #36]	; (8001350 <MX_DMA_Init+0x3c>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	2038      	movs	r0, #56	; 0x38
 800133c:	f001 f821 	bl	8002382 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001340:	2038      	movs	r0, #56	; 0x38
 8001342:	f001 f83a 	bl	80023ba <HAL_NVIC_EnableIRQ>

}
 8001346:	bf00      	nop
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40023800 	.word	0x40023800

08001354 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	; 0x28
 8001358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135a:	f107 0314 	add.w	r3, r7, #20
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
 8001368:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	4b2d      	ldr	r3, [pc, #180]	; (8001424 <MX_GPIO_Init+0xd0>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a2c      	ldr	r2, [pc, #176]	; (8001424 <MX_GPIO_Init+0xd0>)
 8001374:	f043 0304 	orr.w	r3, r3, #4
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b2a      	ldr	r3, [pc, #168]	; (8001424 <MX_GPIO_Init+0xd0>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0304 	and.w	r3, r3, #4
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
 800138a:	4b26      	ldr	r3, [pc, #152]	; (8001424 <MX_GPIO_Init+0xd0>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a25      	ldr	r2, [pc, #148]	; (8001424 <MX_GPIO_Init+0xd0>)
 8001390:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b23      	ldr	r3, [pc, #140]	; (8001424 <MX_GPIO_Init+0xd0>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <MX_GPIO_Init+0xd0>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a1e      	ldr	r2, [pc, #120]	; (8001424 <MX_GPIO_Init+0xd0>)
 80013ac:	f043 0301 	orr.w	r3, r3, #1
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <MX_GPIO_Init+0xd0>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0301 	and.w	r3, r3, #1
 80013ba:	60bb      	str	r3, [r7, #8]
 80013bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	607b      	str	r3, [r7, #4]
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <MX_GPIO_Init+0xd0>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a17      	ldr	r2, [pc, #92]	; (8001424 <MX_GPIO_Init+0xd0>)
 80013c8:	f043 0302 	orr.w	r3, r3, #2
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <MX_GPIO_Init+0xd0>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013da:	2200      	movs	r2, #0
 80013dc:	2120      	movs	r1, #32
 80013de:	4812      	ldr	r0, [pc, #72]	; (8001428 <MX_GPIO_Init+0xd4>)
 80013e0:	f001 fd9c 	bl	8002f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013ea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013f4:	f107 0314 	add.w	r3, r7, #20
 80013f8:	4619      	mov	r1, r3
 80013fa:	480c      	ldr	r0, [pc, #48]	; (800142c <MX_GPIO_Init+0xd8>)
 80013fc:	f001 fbfa 	bl	8002bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001400:	2320      	movs	r3, #32
 8001402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001404:	2301      	movs	r3, #1
 8001406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001408:	2300      	movs	r3, #0
 800140a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140c:	2300      	movs	r3, #0
 800140e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	4619      	mov	r1, r3
 8001416:	4804      	ldr	r0, [pc, #16]	; (8001428 <MX_GPIO_Init+0xd4>)
 8001418:	f001 fbec 	bl	8002bf4 <HAL_GPIO_Init>

}
 800141c:	bf00      	nop
 800141e:	3728      	adds	r7, #40	; 0x28
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40023800 	.word	0x40023800
 8001428:	40020000 	.word	0x40020000
 800142c:	40020800 	.word	0x40020800

08001430 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001438:	2120      	movs	r1, #32
 800143a:	4803      	ldr	r0, [pc, #12]	; (8001448 <HAL_ADC_ConvCpltCallback+0x18>)
 800143c:	f001 fd87 	bl	8002f4e <HAL_GPIO_TogglePin>
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40020000 	.word	0x40020000

0800144c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001450:	b672      	cpsid	i
}
 8001452:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001454:	e7fe      	b.n	8001454 <Error_Handler+0x8>
	...

08001458 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	607b      	str	r3, [r7, #4]
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <HAL_MspInit+0x4c>)
 8001464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001466:	4a0f      	ldr	r2, [pc, #60]	; (80014a4 <HAL_MspInit+0x4c>)
 8001468:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800146c:	6453      	str	r3, [r2, #68]	; 0x44
 800146e:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <HAL_MspInit+0x4c>)
 8001470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001476:	607b      	str	r3, [r7, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800147a:	2300      	movs	r3, #0
 800147c:	603b      	str	r3, [r7, #0]
 800147e:	4b09      	ldr	r3, [pc, #36]	; (80014a4 <HAL_MspInit+0x4c>)
 8001480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001482:	4a08      	ldr	r2, [pc, #32]	; (80014a4 <HAL_MspInit+0x4c>)
 8001484:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001488:	6413      	str	r3, [r2, #64]	; 0x40
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_MspInit+0x4c>)
 800148c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001492:	603b      	str	r3, [r7, #0]
 8001494:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001496:	2007      	movs	r0, #7
 8001498:	f000 ff68 	bl	800236c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149c:	bf00      	nop
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40023800 	.word	0x40023800

080014a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08a      	sub	sp, #40	; 0x28
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 0314 	add.w	r3, r7, #20
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a2f      	ldr	r2, [pc, #188]	; (8001584 <HAL_ADC_MspInit+0xdc>)
 80014c6:	4293      	cmp	r3, r2
 80014c8:	d157      	bne.n	800157a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	4b2e      	ldr	r3, [pc, #184]	; (8001588 <HAL_ADC_MspInit+0xe0>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	4a2d      	ldr	r2, [pc, #180]	; (8001588 <HAL_ADC_MspInit+0xe0>)
 80014d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014d8:	6453      	str	r3, [r2, #68]	; 0x44
 80014da:	4b2b      	ldr	r3, [pc, #172]	; (8001588 <HAL_ADC_MspInit+0xe0>)
 80014dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e2:	613b      	str	r3, [r7, #16]
 80014e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
 80014ea:	4b27      	ldr	r3, [pc, #156]	; (8001588 <HAL_ADC_MspInit+0xe0>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a26      	ldr	r2, [pc, #152]	; (8001588 <HAL_ADC_MspInit+0xe0>)
 80014f0:	f043 0304 	orr.w	r3, r3, #4
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b24      	ldr	r3, [pc, #144]	; (8001588 <HAL_ADC_MspInit+0xe0>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0304 	and.w	r3, r3, #4
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001502:	2303      	movs	r3, #3
 8001504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001506:	2303      	movs	r3, #3
 8001508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800150e:	f107 0314 	add.w	r3, r7, #20
 8001512:	4619      	mov	r1, r3
 8001514:	481d      	ldr	r0, [pc, #116]	; (800158c <HAL_ADC_MspInit+0xe4>)
 8001516:	f001 fb6d 	bl	8002bf4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800151a:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <HAL_ADC_MspInit+0xe8>)
 800151c:	4a1d      	ldr	r2, [pc, #116]	; (8001594 <HAL_ADC_MspInit+0xec>)
 800151e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001520:	4b1b      	ldr	r3, [pc, #108]	; (8001590 <HAL_ADC_MspInit+0xe8>)
 8001522:	2200      	movs	r2, #0
 8001524:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001526:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <HAL_ADC_MspInit+0xe8>)
 8001528:	2200      	movs	r2, #0
 800152a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800152c:	4b18      	ldr	r3, [pc, #96]	; (8001590 <HAL_ADC_MspInit+0xe8>)
 800152e:	2200      	movs	r2, #0
 8001530:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001532:	4b17      	ldr	r3, [pc, #92]	; (8001590 <HAL_ADC_MspInit+0xe8>)
 8001534:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001538:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <HAL_ADC_MspInit+0xe8>)
 800153c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001540:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001542:	4b13      	ldr	r3, [pc, #76]	; (8001590 <HAL_ADC_MspInit+0xe8>)
 8001544:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001548:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800154a:	4b11      	ldr	r3, [pc, #68]	; (8001590 <HAL_ADC_MspInit+0xe8>)
 800154c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001550:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001552:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <HAL_ADC_MspInit+0xe8>)
 8001554:	2200      	movs	r2, #0
 8001556:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001558:	4b0d      	ldr	r3, [pc, #52]	; (8001590 <HAL_ADC_MspInit+0xe8>)
 800155a:	2200      	movs	r2, #0
 800155c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800155e:	480c      	ldr	r0, [pc, #48]	; (8001590 <HAL_ADC_MspInit+0xe8>)
 8001560:	f000 ff46 	bl	80023f0 <HAL_DMA_Init>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800156a:	f7ff ff6f 	bl	800144c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a07      	ldr	r2, [pc, #28]	; (8001590 <HAL_ADC_MspInit+0xe8>)
 8001572:	639a      	str	r2, [r3, #56]	; 0x38
 8001574:	4a06      	ldr	r2, [pc, #24]	; (8001590 <HAL_ADC_MspInit+0xe8>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800157a:	bf00      	nop
 800157c:	3728      	adds	r7, #40	; 0x28
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40012000 	.word	0x40012000
 8001588:	40023800 	.word	0x40023800
 800158c:	40020800 	.word	0x40020800
 8001590:	20000244 	.word	0x20000244
 8001594:	40026410 	.word	0x40026410

08001598 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a1d      	ldr	r2, [pc, #116]	; (800162c <HAL_UART_MspInit+0x94>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d133      	bne.n	8001622 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	613b      	str	r3, [r7, #16]
 80015be:	4b1c      	ldr	r3, [pc, #112]	; (8001630 <HAL_UART_MspInit+0x98>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	4a1b      	ldr	r2, [pc, #108]	; (8001630 <HAL_UART_MspInit+0x98>)
 80015c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c8:	6413      	str	r3, [r2, #64]	; 0x40
 80015ca:	4b19      	ldr	r3, [pc, #100]	; (8001630 <HAL_UART_MspInit+0x98>)
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
 80015da:	4b15      	ldr	r3, [pc, #84]	; (8001630 <HAL_UART_MspInit+0x98>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a14      	ldr	r2, [pc, #80]	; (8001630 <HAL_UART_MspInit+0x98>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_UART_MspInit+0x98>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80015f2:	230c      	movs	r3, #12
 80015f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f6:	2302      	movs	r3, #2
 80015f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fa:	2300      	movs	r3, #0
 80015fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015fe:	2303      	movs	r3, #3
 8001600:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001602:	2307      	movs	r3, #7
 8001604:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001606:	f107 0314 	add.w	r3, r7, #20
 800160a:	4619      	mov	r1, r3
 800160c:	4809      	ldr	r0, [pc, #36]	; (8001634 <HAL_UART_MspInit+0x9c>)
 800160e:	f001 faf1 	bl	8002bf4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001612:	2200      	movs	r2, #0
 8001614:	2100      	movs	r1, #0
 8001616:	2026      	movs	r0, #38	; 0x26
 8001618:	f000 feb3 	bl	8002382 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800161c:	2026      	movs	r0, #38	; 0x26
 800161e:	f000 fecc 	bl	80023ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001622:	bf00      	nop
 8001624:	3728      	adds	r7, #40	; 0x28
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40004400 	.word	0x40004400
 8001630:	40023800 	.word	0x40023800
 8001634:	40020000 	.word	0x40020000

08001638 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800163c:	e7fe      	b.n	800163c <NMI_Handler+0x4>

0800163e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800163e:	b480      	push	{r7}
 8001640:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001642:	e7fe      	b.n	8001642 <HardFault_Handler+0x4>

08001644 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001648:	e7fe      	b.n	8001648 <MemManage_Handler+0x4>

0800164a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800164e:	e7fe      	b.n	800164e <BusFault_Handler+0x4>

08001650 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001654:	e7fe      	b.n	8001654 <UsageFault_Handler+0x4>

08001656 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001656:	b480      	push	{r7}
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001668:	bf00      	nop
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001672:	b480      	push	{r7}
 8001674:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001676:	bf00      	nop
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr

08001680 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001684:	f000 f96a 	bl	800195c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}

0800168c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001690:	4802      	ldr	r0, [pc, #8]	; (800169c <USART2_IRQHandler+0x10>)
 8001692:	f002 fb3f 	bl	8003d14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200002a4 	.word	0x200002a4

080016a0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <DMA2_Stream0_IRQHandler+0x10>)
 80016a6:	f001 f83b 	bl	8002720 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000244 	.word	0x20000244

080016b4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
	return 1;
 80016b8:	2301      	movs	r3, #1
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <_kill>:

int _kill(int pid, int sig)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016ce:	f003 fa55 	bl	8004b7c <__errno>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2216      	movs	r2, #22
 80016d6:	601a      	str	r2, [r3, #0]
	return -1;
 80016d8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3708      	adds	r7, #8
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <_exit>:

void _exit (int status)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016ec:	f04f 31ff 	mov.w	r1, #4294967295
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f7ff ffe7 	bl	80016c4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80016f6:	e7fe      	b.n	80016f6 <_exit+0x12>

080016f8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
 8001708:	e00a      	b.n	8001720 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800170a:	f3af 8000 	nop.w
 800170e:	4601      	mov	r1, r0
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	1c5a      	adds	r2, r3, #1
 8001714:	60ba      	str	r2, [r7, #8]
 8001716:	b2ca      	uxtb	r2, r1
 8001718:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	3301      	adds	r3, #1
 800171e:	617b      	str	r3, [r7, #20]
 8001720:	697a      	ldr	r2, [r7, #20]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	429a      	cmp	r2, r3
 8001726:	dbf0      	blt.n	800170a <_read+0x12>
	}

return len;
 8001728:	687b      	ldr	r3, [r7, #4]
}
 800172a:	4618      	mov	r0, r3
 800172c:	3718      	adds	r7, #24
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b086      	sub	sp, #24
 8001736:	af00      	add	r7, sp, #0
 8001738:	60f8      	str	r0, [r7, #12]
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
 8001742:	e009      	b.n	8001758 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001744:	68bb      	ldr	r3, [r7, #8]
 8001746:	1c5a      	adds	r2, r3, #1
 8001748:	60ba      	str	r2, [r7, #8]
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	3301      	adds	r3, #1
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	429a      	cmp	r2, r3
 800175e:	dbf1      	blt.n	8001744 <_write+0x12>
	}
	return len;
 8001760:	687b      	ldr	r3, [r7, #4]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <_close>:

int _close(int file)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
	return -1;
 8001772:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001776:	4618      	mov	r0, r3
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
 800178a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001792:	605a      	str	r2, [r3, #4]
	return 0;
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <_isatty>:

int _isatty(int file)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
	return 1;
 80017aa:	2301      	movs	r3, #1
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	370c      	adds	r7, #12
 80017b0:	46bd      	mov	sp, r7
 80017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b6:	4770      	bx	lr

080017b8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
	return 0;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3714      	adds	r7, #20
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017dc:	4a14      	ldr	r2, [pc, #80]	; (8001830 <_sbrk+0x5c>)
 80017de:	4b15      	ldr	r3, [pc, #84]	; (8001834 <_sbrk+0x60>)
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e8:	4b13      	ldr	r3, [pc, #76]	; (8001838 <_sbrk+0x64>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d102      	bne.n	80017f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <_sbrk+0x64>)
 80017f2:	4a12      	ldr	r2, [pc, #72]	; (800183c <_sbrk+0x68>)
 80017f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <_sbrk+0x64>)
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4413      	add	r3, r2
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	429a      	cmp	r2, r3
 8001802:	d207      	bcs.n	8001814 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001804:	f003 f9ba 	bl	8004b7c <__errno>
 8001808:	4603      	mov	r3, r0
 800180a:	220c      	movs	r2, #12
 800180c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800180e:	f04f 33ff 	mov.w	r3, #4294967295
 8001812:	e009      	b.n	8001828 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001814:	4b08      	ldr	r3, [pc, #32]	; (8001838 <_sbrk+0x64>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800181a:	4b07      	ldr	r3, [pc, #28]	; (8001838 <_sbrk+0x64>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4413      	add	r3, r2
 8001822:	4a05      	ldr	r2, [pc, #20]	; (8001838 <_sbrk+0x64>)
 8001824:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001826:	68fb      	ldr	r3, [r7, #12]
}
 8001828:	4618      	mov	r0, r3
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	20020000 	.word	0x20020000
 8001834:	00000400 	.word	0x00000400
 8001838:	200002e8 	.word	0x200002e8
 800183c:	20000300 	.word	0x20000300

08001840 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <SystemInit+0x20>)
 8001846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800184a:	4a05      	ldr	r2, [pc, #20]	; (8001860 <SystemInit+0x20>)
 800184c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001850:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001854:	bf00      	nop
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001864:	f8df d034 	ldr.w	sp, [pc, #52]	; 800189c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001868:	480d      	ldr	r0, [pc, #52]	; (80018a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800186a:	490e      	ldr	r1, [pc, #56]	; (80018a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800186c:	4a0e      	ldr	r2, [pc, #56]	; (80018a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800186e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001870:	e002      	b.n	8001878 <LoopCopyDataInit>

08001872 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001872:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001874:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001876:	3304      	adds	r3, #4

08001878 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001878:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800187a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800187c:	d3f9      	bcc.n	8001872 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800187e:	4a0b      	ldr	r2, [pc, #44]	; (80018ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001880:	4c0b      	ldr	r4, [pc, #44]	; (80018b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001882:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001884:	e001      	b.n	800188a <LoopFillZerobss>

08001886 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001886:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001888:	3204      	adds	r2, #4

0800188a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800188a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800188c:	d3fb      	bcc.n	8001886 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800188e:	f7ff ffd7 	bl	8001840 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001892:	f003 f979 	bl	8004b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001896:	f7ff fbcf 	bl	8001038 <main>
  bx  lr    
 800189a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800189c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018a4:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80018a8:	080099bc 	.word	0x080099bc
  ldr r2, =_sbss
 80018ac:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80018b0:	20000300 	.word	0x20000300

080018b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018b4:	e7fe      	b.n	80018b4 <ADC_IRQHandler>
	...

080018b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018bc:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <HAL_Init+0x40>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a0d      	ldr	r2, [pc, #52]	; (80018f8 <HAL_Init+0x40>)
 80018c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <HAL_Init+0x40>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a0a      	ldr	r2, [pc, #40]	; (80018f8 <HAL_Init+0x40>)
 80018ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018d4:	4b08      	ldr	r3, [pc, #32]	; (80018f8 <HAL_Init+0x40>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a07      	ldr	r2, [pc, #28]	; (80018f8 <HAL_Init+0x40>)
 80018da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e0:	2003      	movs	r0, #3
 80018e2:	f000 fd43 	bl	800236c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018e6:	2000      	movs	r0, #0
 80018e8:	f000 f808 	bl	80018fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018ec:	f7ff fdb4 	bl	8001458 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40023c00 	.word	0x40023c00

080018fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001904:	4b12      	ldr	r3, [pc, #72]	; (8001950 <HAL_InitTick+0x54>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_InitTick+0x58>)
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	4619      	mov	r1, r3
 800190e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001912:	fbb3 f3f1 	udiv	r3, r3, r1
 8001916:	fbb2 f3f3 	udiv	r3, r2, r3
 800191a:	4618      	mov	r0, r3
 800191c:	f000 fd5b 	bl	80023d6 <HAL_SYSTICK_Config>
 8001920:	4603      	mov	r3, r0
 8001922:	2b00      	cmp	r3, #0
 8001924:	d001      	beq.n	800192a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e00e      	b.n	8001948 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b0f      	cmp	r3, #15
 800192e:	d80a      	bhi.n	8001946 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001930:	2200      	movs	r2, #0
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	f04f 30ff 	mov.w	r0, #4294967295
 8001938:	f000 fd23 	bl	8002382 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800193c:	4a06      	ldr	r2, [pc, #24]	; (8001958 <HAL_InitTick+0x5c>)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001942:	2300      	movs	r3, #0
 8001944:	e000      	b.n	8001948 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001946:	2301      	movs	r3, #1
}
 8001948:	4618      	mov	r0, r3
 800194a:	3708      	adds	r7, #8
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	20000000 	.word	0x20000000
 8001954:	20000008 	.word	0x20000008
 8001958:	20000004 	.word	0x20000004

0800195c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001960:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_IncTick+0x20>)
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	461a      	mov	r2, r3
 8001966:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HAL_IncTick+0x24>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4413      	add	r3, r2
 800196c:	4a04      	ldr	r2, [pc, #16]	; (8001980 <HAL_IncTick+0x24>)
 800196e:	6013      	str	r3, [r2, #0]
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	20000008 	.word	0x20000008
 8001980:	200002ec 	.word	0x200002ec

08001984 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return uwTick;
 8001988:	4b03      	ldr	r3, [pc, #12]	; (8001998 <HAL_GetTick+0x14>)
 800198a:	681b      	ldr	r3, [r3, #0]
}
 800198c:	4618      	mov	r0, r3
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	200002ec 	.word	0x200002ec

0800199c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019a4:	2300      	movs	r3, #0
 80019a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e033      	b.n	8001a1a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d109      	bne.n	80019ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f7ff fd74 	bl	80014a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	f003 0310 	and.w	r3, r3, #16
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d118      	bne.n	8001a0c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80019e2:	f023 0302 	bic.w	r3, r3, #2
 80019e6:	f043 0202 	orr.w	r2, r3, #2
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 fa6e 	bl	8001ed0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2200      	movs	r2, #0
 80019f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	f023 0303 	bic.w	r3, r3, #3
 8001a02:	f043 0201 	orr.w	r2, r3, #1
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	641a      	str	r2, [r3, #64]	; 0x40
 8001a0a:	e001      	b.n	8001a10 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3710      	adds	r7, #16
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
	...

08001a24 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b086      	sub	sp, #24
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a30:	2300      	movs	r3, #0
 8001a32:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d101      	bne.n	8001a42 <HAL_ADC_Start_DMA+0x1e>
 8001a3e:	2302      	movs	r3, #2
 8001a40:	e0e9      	b.n	8001c16 <HAL_ADC_Start_DMA+0x1f2>
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	2201      	movs	r2, #1
 8001a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d018      	beq.n	8001a8a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f042 0201 	orr.w	r2, r2, #1
 8001a66:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a68:	4b6d      	ldr	r3, [pc, #436]	; (8001c20 <HAL_ADC_Start_DMA+0x1fc>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a6d      	ldr	r2, [pc, #436]	; (8001c24 <HAL_ADC_Start_DMA+0x200>)
 8001a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a72:	0c9a      	lsrs	r2, r3, #18
 8001a74:	4613      	mov	r3, r2
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	4413      	add	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001a7c:	e002      	b.n	8001a84 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	3b01      	subs	r3, #1
 8001a82:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f9      	bne.n	8001a7e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001a98:	d107      	bne.n	8001aaa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001aa8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	f040 80a1 	bne.w	8001bfc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001abe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ac2:	f023 0301 	bic.w	r3, r3, #1
 8001ac6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d007      	beq.n	8001aec <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001ae4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001af4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001af8:	d106      	bne.n	8001b08 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	f023 0206 	bic.w	r2, r3, #6
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	645a      	str	r2, [r3, #68]	; 0x44
 8001b06:	e002      	b.n	8001b0e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b16:	4b44      	ldr	r3, [pc, #272]	; (8001c28 <HAL_ADC_Start_DMA+0x204>)
 8001b18:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b1e:	4a43      	ldr	r2, [pc, #268]	; (8001c2c <HAL_ADC_Start_DMA+0x208>)
 8001b20:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b26:	4a42      	ldr	r2, [pc, #264]	; (8001c30 <HAL_ADC_Start_DMA+0x20c>)
 8001b28:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b2e:	4a41      	ldr	r2, [pc, #260]	; (8001c34 <HAL_ADC_Start_DMA+0x210>)
 8001b30:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b3a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	685a      	ldr	r2, [r3, #4]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001b4a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b5a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	334c      	adds	r3, #76	; 0x4c
 8001b66:	4619      	mov	r1, r3
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f000 fcee 	bl	800254c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 031f 	and.w	r3, r3, #31
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d12a      	bne.n	8001bd2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a2d      	ldr	r2, [pc, #180]	; (8001c38 <HAL_ADC_Start_DMA+0x214>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d015      	beq.n	8001bb2 <HAL_ADC_Start_DMA+0x18e>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a2c      	ldr	r2, [pc, #176]	; (8001c3c <HAL_ADC_Start_DMA+0x218>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d105      	bne.n	8001b9c <HAL_ADC_Start_DMA+0x178>
 8001b90:	4b25      	ldr	r3, [pc, #148]	; (8001c28 <HAL_ADC_Start_DMA+0x204>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f003 031f 	and.w	r3, r3, #31
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d00a      	beq.n	8001bb2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a27      	ldr	r2, [pc, #156]	; (8001c40 <HAL_ADC_Start_DMA+0x21c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d136      	bne.n	8001c14 <HAL_ADC_Start_DMA+0x1f0>
 8001ba6:	4b20      	ldr	r3, [pc, #128]	; (8001c28 <HAL_ADC_Start_DMA+0x204>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 0310 	and.w	r3, r3, #16
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d130      	bne.n	8001c14 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d129      	bne.n	8001c14 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	689a      	ldr	r2, [r3, #8]
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	e020      	b.n	8001c14 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a18      	ldr	r2, [pc, #96]	; (8001c38 <HAL_ADC_Start_DMA+0x214>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d11b      	bne.n	8001c14 <HAL_ADC_Start_DMA+0x1f0>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d114      	bne.n	8001c14 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bf8:	609a      	str	r2, [r3, #8]
 8001bfa:	e00b      	b.n	8001c14 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c00:	f043 0210 	orr.w	r2, r3, #16
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0c:	f043 0201 	orr.w	r2, r3, #1
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	20000000 	.word	0x20000000
 8001c24:	431bde83 	.word	0x431bde83
 8001c28:	40012300 	.word	0x40012300
 8001c2c:	080020c9 	.word	0x080020c9
 8001c30:	08002183 	.word	0x08002183
 8001c34:	0800219f 	.word	0x0800219f
 8001c38:	40012000 	.word	0x40012000
 8001c3c:	40012100 	.word	0x40012100
 8001c40:	40012200 	.word	0x40012200

08001c44 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr

08001c6c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001c76:	2300      	movs	r3, #0
 8001c78:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d101      	bne.n	8001c88 <HAL_ADC_ConfigChannel+0x1c>
 8001c84:	2302      	movs	r3, #2
 8001c86:	e113      	b.n	8001eb0 <HAL_ADC_ConfigChannel+0x244>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2201      	movs	r2, #1
 8001c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2b09      	cmp	r3, #9
 8001c96:	d925      	bls.n	8001ce4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	68d9      	ldr	r1, [r3, #12]
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	4413      	add	r3, r2
 8001cac:	3b1e      	subs	r3, #30
 8001cae:	2207      	movs	r2, #7
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	43da      	mvns	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	400a      	ands	r2, r1
 8001cbc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68d9      	ldr	r1, [r3, #12]
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	b29b      	uxth	r3, r3
 8001cce:	4618      	mov	r0, r3
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	4403      	add	r3, r0
 8001cd6:	3b1e      	subs	r3, #30
 8001cd8:	409a      	lsls	r2, r3
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	430a      	orrs	r2, r1
 8001ce0:	60da      	str	r2, [r3, #12]
 8001ce2:	e022      	b.n	8001d2a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6919      	ldr	r1, [r3, #16]
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	b29b      	uxth	r3, r3
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	2207      	movs	r2, #7
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43da      	mvns	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	400a      	ands	r2, r1
 8001d06:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	6919      	ldr	r1, [r3, #16]
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	b29b      	uxth	r3, r3
 8001d18:	4618      	mov	r0, r3
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	005b      	lsls	r3, r3, #1
 8001d1e:	4403      	add	r3, r0
 8001d20:	409a      	lsls	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	430a      	orrs	r2, r1
 8001d28:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	2b06      	cmp	r3, #6
 8001d30:	d824      	bhi.n	8001d7c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685a      	ldr	r2, [r3, #4]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	4413      	add	r3, r2
 8001d42:	3b05      	subs	r3, #5
 8001d44:	221f      	movs	r2, #31
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43da      	mvns	r2, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	400a      	ands	r2, r1
 8001d52:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	4618      	mov	r0, r3
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3b05      	subs	r3, #5
 8001d6e:	fa00 f203 	lsl.w	r2, r0, r3
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	635a      	str	r2, [r3, #52]	; 0x34
 8001d7a:	e04c      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	2b0c      	cmp	r3, #12
 8001d82:	d824      	bhi.n	8001dce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685a      	ldr	r2, [r3, #4]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	009b      	lsls	r3, r3, #2
 8001d92:	4413      	add	r3, r2
 8001d94:	3b23      	subs	r3, #35	; 0x23
 8001d96:	221f      	movs	r2, #31
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	43da      	mvns	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	400a      	ands	r2, r1
 8001da4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	4618      	mov	r0, r3
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	4613      	mov	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3b23      	subs	r3, #35	; 0x23
 8001dc0:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	631a      	str	r2, [r3, #48]	; 0x30
 8001dcc:	e023      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	4613      	mov	r3, r2
 8001dda:	009b      	lsls	r3, r3, #2
 8001ddc:	4413      	add	r3, r2
 8001dde:	3b41      	subs	r3, #65	; 0x41
 8001de0:	221f      	movs	r2, #31
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	43da      	mvns	r2, r3
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	400a      	ands	r2, r1
 8001dee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	b29b      	uxth	r3, r3
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	685a      	ldr	r2, [r3, #4]
 8001e02:	4613      	mov	r3, r2
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	4413      	add	r3, r2
 8001e08:	3b41      	subs	r3, #65	; 0x41
 8001e0a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e16:	4b29      	ldr	r3, [pc, #164]	; (8001ebc <HAL_ADC_ConfigChannel+0x250>)
 8001e18:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a28      	ldr	r2, [pc, #160]	; (8001ec0 <HAL_ADC_ConfigChannel+0x254>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d10f      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x1d8>
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2b12      	cmp	r3, #18
 8001e2a:	d10b      	bne.n	8001e44 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a1d      	ldr	r2, [pc, #116]	; (8001ec0 <HAL_ADC_ConfigChannel+0x254>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d12b      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x23a>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a1c      	ldr	r2, [pc, #112]	; (8001ec4 <HAL_ADC_ConfigChannel+0x258>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d003      	beq.n	8001e60 <HAL_ADC_ConfigChannel+0x1f4>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2b11      	cmp	r3, #17
 8001e5e:	d122      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	685b      	ldr	r3, [r3, #4]
 8001e64:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a11      	ldr	r2, [pc, #68]	; (8001ec4 <HAL_ADC_ConfigChannel+0x258>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d111      	bne.n	8001ea6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e82:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <HAL_ADC_ConfigChannel+0x25c>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a11      	ldr	r2, [pc, #68]	; (8001ecc <HAL_ADC_ConfigChannel+0x260>)
 8001e88:	fba2 2303 	umull	r2, r3, r2, r3
 8001e8c:	0c9a      	lsrs	r2, r3, #18
 8001e8e:	4613      	mov	r3, r2
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	4413      	add	r3, r2
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001e98:	e002      	b.n	8001ea0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f9      	bne.n	8001e9a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3714      	adds	r7, #20
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	40012300 	.word	0x40012300
 8001ec0:	40012000 	.word	0x40012000
 8001ec4:	10000012 	.word	0x10000012
 8001ec8:	20000000 	.word	0x20000000
 8001ecc:	431bde83 	.word	0x431bde83

08001ed0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ed8:	4b79      	ldr	r3, [pc, #484]	; (80020c0 <ADC_Init+0x1f0>)
 8001eda:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	685a      	ldr	r2, [r3, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	6859      	ldr	r1, [r3, #4]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	021a      	lsls	r2, r3, #8
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	430a      	orrs	r2, r1
 8001f18:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	6859      	ldr	r1, [r3, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	689a      	ldr	r2, [r3, #8]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	689a      	ldr	r2, [r3, #8]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6899      	ldr	r1, [r3, #8]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f62:	4a58      	ldr	r2, [pc, #352]	; (80020c4 <ADC_Init+0x1f4>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d022      	beq.n	8001fae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689a      	ldr	r2, [r3, #8]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6899      	ldr	r1, [r3, #8]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	430a      	orrs	r2, r1
 8001f88:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	689a      	ldr	r2, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001f98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6899      	ldr	r1, [r3, #8]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	e00f      	b.n	8001fce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	689a      	ldr	r2, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fcc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0202 	bic.w	r2, r2, #2
 8001fdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	6899      	ldr	r1, [r3, #8]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	7e1b      	ldrb	r3, [r3, #24]
 8001fe8:	005a      	lsls	r2, r3, #1
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	430a      	orrs	r2, r1
 8001ff0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d01b      	beq.n	8002034 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	685a      	ldr	r2, [r3, #4]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800200a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	685a      	ldr	r2, [r3, #4]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800201a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	6859      	ldr	r1, [r3, #4]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002026:	3b01      	subs	r3, #1
 8002028:	035a      	lsls	r2, r3, #13
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	e007      	b.n	8002044 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	685a      	ldr	r2, [r3, #4]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002042:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002052:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	69db      	ldr	r3, [r3, #28]
 800205e:	3b01      	subs	r3, #1
 8002060:	051a      	lsls	r2, r3, #20
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002078:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	6899      	ldr	r1, [r3, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002086:	025a      	lsls	r2, r3, #9
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	430a      	orrs	r2, r1
 800208e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689a      	ldr	r2, [r3, #8]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800209e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6899      	ldr	r1, [r3, #8]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	695b      	ldr	r3, [r3, #20]
 80020aa:	029a      	lsls	r2, r3, #10
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	609a      	str	r2, [r3, #8]
}
 80020b4:	bf00      	nop
 80020b6:	3714      	adds	r7, #20
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	40012300 	.word	0x40012300
 80020c4:	0f000001 	.word	0x0f000001

080020c8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020d4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d13c      	bne.n	800215c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d12b      	bne.n	8002154 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002100:	2b00      	cmp	r3, #0
 8002102:	d127      	bne.n	8002154 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800210e:	2b00      	cmp	r3, #0
 8002110:	d006      	beq.n	8002120 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800211c:	2b00      	cmp	r3, #0
 800211e:	d119      	bne.n	8002154 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	685a      	ldr	r2, [r3, #4]
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0220 	bic.w	r2, r2, #32
 800212e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d105      	bne.n	8002154 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	f043 0201 	orr.w	r2, r3, #1
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f7ff f96b 	bl	8001430 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800215a:	e00e      	b.n	800217a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	f003 0310 	and.w	r3, r3, #16
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f7ff fd75 	bl	8001c58 <HAL_ADC_ErrorCallback>
}
 800216e:	e004      	b.n	800217a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	4798      	blx	r3
}
 800217a:	bf00      	nop
 800217c:	3710      	adds	r7, #16
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}

08002182 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002182:	b580      	push	{r7, lr}
 8002184:	b084      	sub	sp, #16
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f7ff fd57 	bl	8001c44 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002196:	bf00      	nop
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b084      	sub	sp, #16
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021aa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2240      	movs	r2, #64	; 0x40
 80021b0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	f043 0204 	orr.w	r2, r3, #4
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80021be:	68f8      	ldr	r0, [r7, #12]
 80021c0:	f7ff fd4a 	bl	8001c58 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021c4:	bf00      	nop
 80021c6:	3710      	adds	r7, #16
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021dc:	4b0c      	ldr	r3, [pc, #48]	; (8002210 <__NVIC_SetPriorityGrouping+0x44>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021e2:	68ba      	ldr	r2, [r7, #8]
 80021e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021e8:	4013      	ands	r3, r2
 80021ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021fe:	4a04      	ldr	r2, [pc, #16]	; (8002210 <__NVIC_SetPriorityGrouping+0x44>)
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	60d3      	str	r3, [r2, #12]
}
 8002204:	bf00      	nop
 8002206:	3714      	adds	r7, #20
 8002208:	46bd      	mov	sp, r7
 800220a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220e:	4770      	bx	lr
 8002210:	e000ed00 	.word	0xe000ed00

08002214 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002214:	b480      	push	{r7}
 8002216:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002218:	4b04      	ldr	r3, [pc, #16]	; (800222c <__NVIC_GetPriorityGrouping+0x18>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	0a1b      	lsrs	r3, r3, #8
 800221e:	f003 0307 	and.w	r3, r3, #7
}
 8002222:	4618      	mov	r0, r3
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	e000ed00 	.word	0xe000ed00

08002230 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	4603      	mov	r3, r0
 8002238:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800223a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223e:	2b00      	cmp	r3, #0
 8002240:	db0b      	blt.n	800225a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	f003 021f 	and.w	r2, r3, #31
 8002248:	4907      	ldr	r1, [pc, #28]	; (8002268 <__NVIC_EnableIRQ+0x38>)
 800224a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800224e:	095b      	lsrs	r3, r3, #5
 8002250:	2001      	movs	r0, #1
 8002252:	fa00 f202 	lsl.w	r2, r0, r2
 8002256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800225a:	bf00      	nop
 800225c:	370c      	adds	r7, #12
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	e000e100 	.word	0xe000e100

0800226c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	6039      	str	r1, [r7, #0]
 8002276:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227c:	2b00      	cmp	r3, #0
 800227e:	db0a      	blt.n	8002296 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	b2da      	uxtb	r2, r3
 8002284:	490c      	ldr	r1, [pc, #48]	; (80022b8 <__NVIC_SetPriority+0x4c>)
 8002286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228a:	0112      	lsls	r2, r2, #4
 800228c:	b2d2      	uxtb	r2, r2
 800228e:	440b      	add	r3, r1
 8002290:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002294:	e00a      	b.n	80022ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	b2da      	uxtb	r2, r3
 800229a:	4908      	ldr	r1, [pc, #32]	; (80022bc <__NVIC_SetPriority+0x50>)
 800229c:	79fb      	ldrb	r3, [r7, #7]
 800229e:	f003 030f 	and.w	r3, r3, #15
 80022a2:	3b04      	subs	r3, #4
 80022a4:	0112      	lsls	r2, r2, #4
 80022a6:	b2d2      	uxtb	r2, r2
 80022a8:	440b      	add	r3, r1
 80022aa:	761a      	strb	r2, [r3, #24]
}
 80022ac:	bf00      	nop
 80022ae:	370c      	adds	r7, #12
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr
 80022b8:	e000e100 	.word	0xe000e100
 80022bc:	e000ed00 	.word	0xe000ed00

080022c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b089      	sub	sp, #36	; 0x24
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022d4:	69fb      	ldr	r3, [r7, #28]
 80022d6:	f1c3 0307 	rsb	r3, r3, #7
 80022da:	2b04      	cmp	r3, #4
 80022dc:	bf28      	it	cs
 80022de:	2304      	movcs	r3, #4
 80022e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3304      	adds	r3, #4
 80022e6:	2b06      	cmp	r3, #6
 80022e8:	d902      	bls.n	80022f0 <NVIC_EncodePriority+0x30>
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	3b03      	subs	r3, #3
 80022ee:	e000      	b.n	80022f2 <NVIC_EncodePriority+0x32>
 80022f0:	2300      	movs	r3, #0
 80022f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022f4:	f04f 32ff 	mov.w	r2, #4294967295
 80022f8:	69bb      	ldr	r3, [r7, #24]
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43da      	mvns	r2, r3
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	401a      	ands	r2, r3
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002308:	f04f 31ff 	mov.w	r1, #4294967295
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	fa01 f303 	lsl.w	r3, r1, r3
 8002312:	43d9      	mvns	r1, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002318:	4313      	orrs	r3, r2
         );
}
 800231a:	4618      	mov	r0, r3
 800231c:	3724      	adds	r7, #36	; 0x24
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	3b01      	subs	r3, #1
 8002334:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002338:	d301      	bcc.n	800233e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800233a:	2301      	movs	r3, #1
 800233c:	e00f      	b.n	800235e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800233e:	4a0a      	ldr	r2, [pc, #40]	; (8002368 <SysTick_Config+0x40>)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	3b01      	subs	r3, #1
 8002344:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002346:	210f      	movs	r1, #15
 8002348:	f04f 30ff 	mov.w	r0, #4294967295
 800234c:	f7ff ff8e 	bl	800226c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002350:	4b05      	ldr	r3, [pc, #20]	; (8002368 <SysTick_Config+0x40>)
 8002352:	2200      	movs	r2, #0
 8002354:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002356:	4b04      	ldr	r3, [pc, #16]	; (8002368 <SysTick_Config+0x40>)
 8002358:	2207      	movs	r2, #7
 800235a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3708      	adds	r7, #8
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	e000e010 	.word	0xe000e010

0800236c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff ff29 	bl	80021cc <__NVIC_SetPriorityGrouping>
}
 800237a:	bf00      	nop
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}

08002382 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002382:	b580      	push	{r7, lr}
 8002384:	b086      	sub	sp, #24
 8002386:	af00      	add	r7, sp, #0
 8002388:	4603      	mov	r3, r0
 800238a:	60b9      	str	r1, [r7, #8]
 800238c:	607a      	str	r2, [r7, #4]
 800238e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002390:	2300      	movs	r3, #0
 8002392:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002394:	f7ff ff3e 	bl	8002214 <__NVIC_GetPriorityGrouping>
 8002398:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	68b9      	ldr	r1, [r7, #8]
 800239e:	6978      	ldr	r0, [r7, #20]
 80023a0:	f7ff ff8e 	bl	80022c0 <NVIC_EncodePriority>
 80023a4:	4602      	mov	r2, r0
 80023a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023aa:	4611      	mov	r1, r2
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7ff ff5d 	bl	800226c <__NVIC_SetPriority>
}
 80023b2:	bf00      	nop
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}

080023ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023ba:	b580      	push	{r7, lr}
 80023bc:	b082      	sub	sp, #8
 80023be:	af00      	add	r7, sp, #0
 80023c0:	4603      	mov	r3, r0
 80023c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7ff ff31 	bl	8002230 <__NVIC_EnableIRQ>
}
 80023ce:	bf00      	nop
 80023d0:	3708      	adds	r7, #8
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}

080023d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023d6:	b580      	push	{r7, lr}
 80023d8:	b082      	sub	sp, #8
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023de:	6878      	ldr	r0, [r7, #4]
 80023e0:	f7ff ffa2 	bl	8002328 <SysTick_Config>
 80023e4:	4603      	mov	r3, r0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3708      	adds	r7, #8
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80023fc:	f7ff fac2 	bl	8001984 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d101      	bne.n	800240c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e099      	b.n	8002540 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2202      	movs	r2, #2
 8002410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0201 	bic.w	r2, r2, #1
 800242a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800242c:	e00f      	b.n	800244e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800242e:	f7ff faa9 	bl	8001984 <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b05      	cmp	r3, #5
 800243a:	d908      	bls.n	800244e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2220      	movs	r2, #32
 8002440:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2203      	movs	r2, #3
 8002446:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	e078      	b.n	8002540 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b00      	cmp	r3, #0
 800245a:	d1e8      	bne.n	800242e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	4b38      	ldr	r3, [pc, #224]	; (8002548 <HAL_DMA_Init+0x158>)
 8002468:	4013      	ands	r3, r2
 800246a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685a      	ldr	r2, [r3, #4]
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800247a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002486:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002492:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800249a:	697a      	ldr	r2, [r7, #20]
 800249c:	4313      	orrs	r3, r2
 800249e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a4:	2b04      	cmp	r3, #4
 80024a6:	d107      	bne.n	80024b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b0:	4313      	orrs	r3, r2
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	697a      	ldr	r2, [r7, #20]
 80024be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f023 0307 	bic.w	r3, r3, #7
 80024ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d4:	697a      	ldr	r2, [r7, #20]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	2b04      	cmp	r3, #4
 80024e0:	d117      	bne.n	8002512 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	4313      	orrs	r3, r2
 80024ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d00e      	beq.n	8002512 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 fb01 	bl	8002afc <DMA_CheckFifoParam>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2240      	movs	r2, #64	; 0x40
 8002504:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800250e:	2301      	movs	r3, #1
 8002510:	e016      	b.n	8002540 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	697a      	ldr	r2, [r7, #20]
 8002518:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 fab8 	bl	8002a90 <DMA_CalcBaseAndBitshift>
 8002520:	4603      	mov	r3, r0
 8002522:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002528:	223f      	movs	r2, #63	; 0x3f
 800252a:	409a      	lsls	r2, r3
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800253e:	2300      	movs	r3, #0
}
 8002540:	4618      	mov	r0, r3
 8002542:	3718      	adds	r7, #24
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}
 8002548:	f010803f 	.word	0xf010803f

0800254c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b086      	sub	sp, #24
 8002550:	af00      	add	r7, sp, #0
 8002552:	60f8      	str	r0, [r7, #12]
 8002554:	60b9      	str	r1, [r7, #8]
 8002556:	607a      	str	r2, [r7, #4]
 8002558:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800255a:	2300      	movs	r3, #0
 800255c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002562:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800256a:	2b01      	cmp	r3, #1
 800256c:	d101      	bne.n	8002572 <HAL_DMA_Start_IT+0x26>
 800256e:	2302      	movs	r3, #2
 8002570:	e040      	b.n	80025f4 <HAL_DMA_Start_IT+0xa8>
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2201      	movs	r2, #1
 8002576:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b01      	cmp	r3, #1
 8002584:	d12f      	bne.n	80025e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2202      	movs	r2, #2
 800258a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2200      	movs	r2, #0
 8002592:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	687a      	ldr	r2, [r7, #4]
 8002598:	68b9      	ldr	r1, [r7, #8]
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f000 fa4a 	bl	8002a34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a4:	223f      	movs	r2, #63	; 0x3f
 80025a6:	409a      	lsls	r2, r3
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f042 0216 	orr.w	r2, r2, #22
 80025ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d007      	beq.n	80025d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	681a      	ldr	r2, [r3, #0]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f042 0208 	orr.w	r2, r2, #8
 80025d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0201 	orr.w	r2, r2, #1
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	e005      	b.n	80025f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80025ee:	2302      	movs	r3, #2
 80025f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80025f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b084      	sub	sp, #16
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002608:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800260a:	f7ff f9bb 	bl	8001984 <HAL_GetTick>
 800260e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002616:	b2db      	uxtb	r3, r3
 8002618:	2b02      	cmp	r3, #2
 800261a:	d008      	beq.n	800262e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2280      	movs	r2, #128	; 0x80
 8002620:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e052      	b.n	80026d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f022 0216 	bic.w	r2, r2, #22
 800263c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	695a      	ldr	r2, [r3, #20]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800264c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	2b00      	cmp	r3, #0
 8002654:	d103      	bne.n	800265e <HAL_DMA_Abort+0x62>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800265a:	2b00      	cmp	r3, #0
 800265c:	d007      	beq.n	800266e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	681a      	ldr	r2, [r3, #0]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f022 0208 	bic.w	r2, r2, #8
 800266c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0201 	bic.w	r2, r2, #1
 800267c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800267e:	e013      	b.n	80026a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002680:	f7ff f980 	bl	8001984 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b05      	cmp	r3, #5
 800268c:	d90c      	bls.n	80026a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2220      	movs	r2, #32
 8002692:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2203      	movs	r2, #3
 8002698:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e015      	b.n	80026d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0301 	and.w	r3, r3, #1
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d1e4      	bne.n	8002680 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026ba:	223f      	movs	r2, #63	; 0x3f
 80026bc:	409a      	lsls	r2, r3
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2200      	movs	r2, #0
 80026ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}

080026dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d004      	beq.n	80026fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2280      	movs	r2, #128	; 0x80
 80026f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e00c      	b.n	8002714 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2205      	movs	r2, #5
 80026fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0201 	bic.w	r2, r2, #1
 8002710:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr

08002720 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b086      	sub	sp, #24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002728:	2300      	movs	r3, #0
 800272a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800272c:	4b8e      	ldr	r3, [pc, #568]	; (8002968 <HAL_DMA_IRQHandler+0x248>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a8e      	ldr	r2, [pc, #568]	; (800296c <HAL_DMA_IRQHandler+0x24c>)
 8002732:	fba2 2303 	umull	r2, r3, r2, r3
 8002736:	0a9b      	lsrs	r3, r3, #10
 8002738:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274a:	2208      	movs	r2, #8
 800274c:	409a      	lsls	r2, r3
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	4013      	ands	r3, r2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d01a      	beq.n	800278c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d013      	beq.n	800278c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0204 	bic.w	r2, r2, #4
 8002772:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002778:	2208      	movs	r2, #8
 800277a:	409a      	lsls	r2, r3
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002784:	f043 0201 	orr.w	r2, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002790:	2201      	movs	r2, #1
 8002792:	409a      	lsls	r2, r3
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	4013      	ands	r3, r2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d012      	beq.n	80027c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	695b      	ldr	r3, [r3, #20]
 80027a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00b      	beq.n	80027c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ae:	2201      	movs	r2, #1
 80027b0:	409a      	lsls	r2, r3
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ba:	f043 0202 	orr.w	r2, r3, #2
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c6:	2204      	movs	r2, #4
 80027c8:	409a      	lsls	r2, r3
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	4013      	ands	r3, r2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d012      	beq.n	80027f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d00b      	beq.n	80027f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e4:	2204      	movs	r2, #4
 80027e6:	409a      	lsls	r2, r3
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f0:	f043 0204 	orr.w	r2, r3, #4
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fc:	2210      	movs	r2, #16
 80027fe:	409a      	lsls	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	4013      	ands	r3, r2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d043      	beq.n	8002890 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f003 0308 	and.w	r3, r3, #8
 8002812:	2b00      	cmp	r3, #0
 8002814:	d03c      	beq.n	8002890 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281a:	2210      	movs	r2, #16
 800281c:	409a      	lsls	r2, r3
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d018      	beq.n	8002862 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d108      	bne.n	8002850 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002842:	2b00      	cmp	r3, #0
 8002844:	d024      	beq.n	8002890 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	4798      	blx	r3
 800284e:	e01f      	b.n	8002890 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002854:	2b00      	cmp	r3, #0
 8002856:	d01b      	beq.n	8002890 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800285c:	6878      	ldr	r0, [r7, #4]
 800285e:	4798      	blx	r3
 8002860:	e016      	b.n	8002890 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800286c:	2b00      	cmp	r3, #0
 800286e:	d107      	bne.n	8002880 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f022 0208 	bic.w	r2, r2, #8
 800287e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	2b00      	cmp	r3, #0
 8002886:	d003      	beq.n	8002890 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002894:	2220      	movs	r2, #32
 8002896:	409a      	lsls	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	4013      	ands	r3, r2
 800289c:	2b00      	cmp	r3, #0
 800289e:	f000 808f 	beq.w	80029c0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 0310 	and.w	r3, r3, #16
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	f000 8087 	beq.w	80029c0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028b6:	2220      	movs	r2, #32
 80028b8:	409a      	lsls	r2, r3
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	2b05      	cmp	r3, #5
 80028c8:	d136      	bne.n	8002938 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f022 0216 	bic.w	r2, r2, #22
 80028d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	695a      	ldr	r2, [r3, #20]
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d103      	bne.n	80028fa <HAL_DMA_IRQHandler+0x1da>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d007      	beq.n	800290a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 0208 	bic.w	r2, r2, #8
 8002908:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290e:	223f      	movs	r2, #63	; 0x3f
 8002910:	409a      	lsls	r2, r3
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2201      	movs	r2, #1
 800291a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800292a:	2b00      	cmp	r3, #0
 800292c:	d07e      	beq.n	8002a2c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	4798      	blx	r3
        }
        return;
 8002936:	e079      	b.n	8002a2c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d01d      	beq.n	8002982 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10d      	bne.n	8002970 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002958:	2b00      	cmp	r3, #0
 800295a:	d031      	beq.n	80029c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	4798      	blx	r3
 8002964:	e02c      	b.n	80029c0 <HAL_DMA_IRQHandler+0x2a0>
 8002966:	bf00      	nop
 8002968:	20000000 	.word	0x20000000
 800296c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002974:	2b00      	cmp	r3, #0
 8002976:	d023      	beq.n	80029c0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	4798      	blx	r3
 8002980:	e01e      	b.n	80029c0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10f      	bne.n	80029b0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f022 0210 	bic.w	r2, r2, #16
 800299e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d003      	beq.n	80029c0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d032      	beq.n	8002a2e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d022      	beq.n	8002a1a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2205      	movs	r2, #5
 80029d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f022 0201 	bic.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029ec:	68bb      	ldr	r3, [r7, #8]
 80029ee:	3301      	adds	r3, #1
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	697a      	ldr	r2, [r7, #20]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d307      	bcc.n	8002a08 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f2      	bne.n	80029ec <HAL_DMA_IRQHandler+0x2cc>
 8002a06:	e000      	b.n	8002a0a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a08:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d005      	beq.n	8002a2e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	4798      	blx	r3
 8002a2a:	e000      	b.n	8002a2e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a2c:	bf00      	nop
    }
  }
}
 8002a2e:	3718      	adds	r7, #24
 8002a30:	46bd      	mov	sp, r7
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
 8002a40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2b40      	cmp	r3, #64	; 0x40
 8002a60:	d108      	bne.n	8002a74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68ba      	ldr	r2, [r7, #8]
 8002a70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002a72:	e007      	b.n	8002a84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	60da      	str	r2, [r3, #12]
}
 8002a84:	bf00      	nop
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	3b10      	subs	r3, #16
 8002aa0:	4a14      	ldr	r2, [pc, #80]	; (8002af4 <DMA_CalcBaseAndBitshift+0x64>)
 8002aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa6:	091b      	lsrs	r3, r3, #4
 8002aa8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002aaa:	4a13      	ldr	r2, [pc, #76]	; (8002af8 <DMA_CalcBaseAndBitshift+0x68>)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4413      	add	r3, r2
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2b03      	cmp	r3, #3
 8002abc:	d909      	bls.n	8002ad2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ac6:	f023 0303 	bic.w	r3, r3, #3
 8002aca:	1d1a      	adds	r2, r3, #4
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	659a      	str	r2, [r3, #88]	; 0x58
 8002ad0:	e007      	b.n	8002ae2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ada:	f023 0303 	bic.w	r3, r3, #3
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3714      	adds	r7, #20
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
 8002af2:	bf00      	nop
 8002af4:	aaaaaaab 	.word	0xaaaaaaab
 8002af8:	080094fc 	.word	0x080094fc

08002afc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b04:	2300      	movs	r3, #0
 8002b06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d11f      	bne.n	8002b56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2b03      	cmp	r3, #3
 8002b1a:	d856      	bhi.n	8002bca <DMA_CheckFifoParam+0xce>
 8002b1c:	a201      	add	r2, pc, #4	; (adr r2, 8002b24 <DMA_CheckFifoParam+0x28>)
 8002b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b22:	bf00      	nop
 8002b24:	08002b35 	.word	0x08002b35
 8002b28:	08002b47 	.word	0x08002b47
 8002b2c:	08002b35 	.word	0x08002b35
 8002b30:	08002bcb 	.word	0x08002bcb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d046      	beq.n	8002bce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b44:	e043      	b.n	8002bce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b4e:	d140      	bne.n	8002bd2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b54:	e03d      	b.n	8002bd2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b5e:	d121      	bne.n	8002ba4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	2b03      	cmp	r3, #3
 8002b64:	d837      	bhi.n	8002bd6 <DMA_CheckFifoParam+0xda>
 8002b66:	a201      	add	r2, pc, #4	; (adr r2, 8002b6c <DMA_CheckFifoParam+0x70>)
 8002b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b6c:	08002b7d 	.word	0x08002b7d
 8002b70:	08002b83 	.word	0x08002b83
 8002b74:	08002b7d 	.word	0x08002b7d
 8002b78:	08002b95 	.word	0x08002b95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b7c:	2301      	movs	r3, #1
 8002b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002b80:	e030      	b.n	8002be4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d025      	beq.n	8002bda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b92:	e022      	b.n	8002bda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b9c:	d11f      	bne.n	8002bde <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002ba2:	e01c      	b.n	8002bde <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2b02      	cmp	r3, #2
 8002ba8:	d903      	bls.n	8002bb2 <DMA_CheckFifoParam+0xb6>
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	2b03      	cmp	r3, #3
 8002bae:	d003      	beq.n	8002bb8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002bb0:	e018      	b.n	8002be4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	73fb      	strb	r3, [r7, #15]
      break;
 8002bb6:	e015      	b.n	8002be4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d00e      	beq.n	8002be2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002bc8:	e00b      	b.n	8002be2 <DMA_CheckFifoParam+0xe6>
      break;
 8002bca:	bf00      	nop
 8002bcc:	e00a      	b.n	8002be4 <DMA_CheckFifoParam+0xe8>
      break;
 8002bce:	bf00      	nop
 8002bd0:	e008      	b.n	8002be4 <DMA_CheckFifoParam+0xe8>
      break;
 8002bd2:	bf00      	nop
 8002bd4:	e006      	b.n	8002be4 <DMA_CheckFifoParam+0xe8>
      break;
 8002bd6:	bf00      	nop
 8002bd8:	e004      	b.n	8002be4 <DMA_CheckFifoParam+0xe8>
      break;
 8002bda:	bf00      	nop
 8002bdc:	e002      	b.n	8002be4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002bde:	bf00      	nop
 8002be0:	e000      	b.n	8002be4 <DMA_CheckFifoParam+0xe8>
      break;
 8002be2:	bf00      	nop
    }
  } 
  
  return status; 
 8002be4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3714      	adds	r7, #20
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop

08002bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b089      	sub	sp, #36	; 0x24
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c06:	2300      	movs	r3, #0
 8002c08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	61fb      	str	r3, [r7, #28]
 8002c0e:	e165      	b.n	8002edc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c10:	2201      	movs	r2, #1
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	fa02 f303 	lsl.w	r3, r2, r3
 8002c18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	4013      	ands	r3, r2
 8002c22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	f040 8154 	bne.w	8002ed6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f003 0303 	and.w	r3, r3, #3
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d005      	beq.n	8002c46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d130      	bne.n	8002ca8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	2203      	movs	r2, #3
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	43db      	mvns	r3, r3
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	68da      	ldr	r2, [r3, #12]
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	005b      	lsls	r3, r3, #1
 8002c66:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	43db      	mvns	r3, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	091b      	lsrs	r3, r3, #4
 8002c92:	f003 0201 	and.w	r2, r3, #1
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f003 0303 	and.w	r3, r3, #3
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	d017      	beq.n	8002ce4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	005b      	lsls	r3, r3, #1
 8002cbe:	2203      	movs	r2, #3
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	689a      	ldr	r2, [r3, #8]
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 0303 	and.w	r3, r3, #3
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d123      	bne.n	8002d38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cf0:	69fb      	ldr	r3, [r7, #28]
 8002cf2:	08da      	lsrs	r2, r3, #3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	3208      	adds	r2, #8
 8002cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cfc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	f003 0307 	and.w	r3, r3, #7
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	220f      	movs	r2, #15
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4013      	ands	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	691a      	ldr	r2, [r3, #16]
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	08da      	lsrs	r2, r3, #3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	3208      	adds	r2, #8
 8002d32:	69b9      	ldr	r1, [r7, #24]
 8002d34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	005b      	lsls	r3, r3, #1
 8002d42:	2203      	movs	r2, #3
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 0203 	and.w	r2, r3, #3
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	69ba      	ldr	r2, [r7, #24]
 8002d6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 80ae 	beq.w	8002ed6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60fb      	str	r3, [r7, #12]
 8002d7e:	4b5d      	ldr	r3, [pc, #372]	; (8002ef4 <HAL_GPIO_Init+0x300>)
 8002d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d82:	4a5c      	ldr	r2, [pc, #368]	; (8002ef4 <HAL_GPIO_Init+0x300>)
 8002d84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d88:	6453      	str	r3, [r2, #68]	; 0x44
 8002d8a:	4b5a      	ldr	r3, [pc, #360]	; (8002ef4 <HAL_GPIO_Init+0x300>)
 8002d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d92:	60fb      	str	r3, [r7, #12]
 8002d94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d96:	4a58      	ldr	r2, [pc, #352]	; (8002ef8 <HAL_GPIO_Init+0x304>)
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	089b      	lsrs	r3, r3, #2
 8002d9c:	3302      	adds	r3, #2
 8002d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002da2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f003 0303 	and.w	r3, r3, #3
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	220f      	movs	r2, #15
 8002dae:	fa02 f303 	lsl.w	r3, r2, r3
 8002db2:	43db      	mvns	r3, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4013      	ands	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a4f      	ldr	r2, [pc, #316]	; (8002efc <HAL_GPIO_Init+0x308>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d025      	beq.n	8002e0e <HAL_GPIO_Init+0x21a>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a4e      	ldr	r2, [pc, #312]	; (8002f00 <HAL_GPIO_Init+0x30c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d01f      	beq.n	8002e0a <HAL_GPIO_Init+0x216>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	4a4d      	ldr	r2, [pc, #308]	; (8002f04 <HAL_GPIO_Init+0x310>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d019      	beq.n	8002e06 <HAL_GPIO_Init+0x212>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	4a4c      	ldr	r2, [pc, #304]	; (8002f08 <HAL_GPIO_Init+0x314>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d013      	beq.n	8002e02 <HAL_GPIO_Init+0x20e>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	4a4b      	ldr	r2, [pc, #300]	; (8002f0c <HAL_GPIO_Init+0x318>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d00d      	beq.n	8002dfe <HAL_GPIO_Init+0x20a>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	4a4a      	ldr	r2, [pc, #296]	; (8002f10 <HAL_GPIO_Init+0x31c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d007      	beq.n	8002dfa <HAL_GPIO_Init+0x206>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	4a49      	ldr	r2, [pc, #292]	; (8002f14 <HAL_GPIO_Init+0x320>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d101      	bne.n	8002df6 <HAL_GPIO_Init+0x202>
 8002df2:	2306      	movs	r3, #6
 8002df4:	e00c      	b.n	8002e10 <HAL_GPIO_Init+0x21c>
 8002df6:	2307      	movs	r3, #7
 8002df8:	e00a      	b.n	8002e10 <HAL_GPIO_Init+0x21c>
 8002dfa:	2305      	movs	r3, #5
 8002dfc:	e008      	b.n	8002e10 <HAL_GPIO_Init+0x21c>
 8002dfe:	2304      	movs	r3, #4
 8002e00:	e006      	b.n	8002e10 <HAL_GPIO_Init+0x21c>
 8002e02:	2303      	movs	r3, #3
 8002e04:	e004      	b.n	8002e10 <HAL_GPIO_Init+0x21c>
 8002e06:	2302      	movs	r3, #2
 8002e08:	e002      	b.n	8002e10 <HAL_GPIO_Init+0x21c>
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e000      	b.n	8002e10 <HAL_GPIO_Init+0x21c>
 8002e0e:	2300      	movs	r3, #0
 8002e10:	69fa      	ldr	r2, [r7, #28]
 8002e12:	f002 0203 	and.w	r2, r2, #3
 8002e16:	0092      	lsls	r2, r2, #2
 8002e18:	4093      	lsls	r3, r2
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e20:	4935      	ldr	r1, [pc, #212]	; (8002ef8 <HAL_GPIO_Init+0x304>)
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	089b      	lsrs	r3, r3, #2
 8002e26:	3302      	adds	r3, #2
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e2e:	4b3a      	ldr	r3, [pc, #232]	; (8002f18 <HAL_GPIO_Init+0x324>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	43db      	mvns	r3, r3
 8002e38:	69ba      	ldr	r2, [r7, #24]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e52:	4a31      	ldr	r2, [pc, #196]	; (8002f18 <HAL_GPIO_Init+0x324>)
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e58:	4b2f      	ldr	r3, [pc, #188]	; (8002f18 <HAL_GPIO_Init+0x324>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4013      	ands	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e7c:	4a26      	ldr	r2, [pc, #152]	; (8002f18 <HAL_GPIO_Init+0x324>)
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e82:	4b25      	ldr	r3, [pc, #148]	; (8002f18 <HAL_GPIO_Init+0x324>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4013      	ands	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ea6:	4a1c      	ldr	r2, [pc, #112]	; (8002f18 <HAL_GPIO_Init+0x324>)
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eac:	4b1a      	ldr	r3, [pc, #104]	; (8002f18 <HAL_GPIO_Init+0x324>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	43db      	mvns	r3, r3
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4013      	ands	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d003      	beq.n	8002ed0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ed0:	4a11      	ldr	r2, [pc, #68]	; (8002f18 <HAL_GPIO_Init+0x324>)
 8002ed2:	69bb      	ldr	r3, [r7, #24]
 8002ed4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	3301      	adds	r3, #1
 8002eda:	61fb      	str	r3, [r7, #28]
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	2b0f      	cmp	r3, #15
 8002ee0:	f67f ae96 	bls.w	8002c10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ee4:	bf00      	nop
 8002ee6:	bf00      	nop
 8002ee8:	3724      	adds	r7, #36	; 0x24
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	40023800 	.word	0x40023800
 8002ef8:	40013800 	.word	0x40013800
 8002efc:	40020000 	.word	0x40020000
 8002f00:	40020400 	.word	0x40020400
 8002f04:	40020800 	.word	0x40020800
 8002f08:	40020c00 	.word	0x40020c00
 8002f0c:	40021000 	.word	0x40021000
 8002f10:	40021400 	.word	0x40021400
 8002f14:	40021800 	.word	0x40021800
 8002f18:	40013c00 	.word	0x40013c00

08002f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	807b      	strh	r3, [r7, #2]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f2c:	787b      	ldrb	r3, [r7, #1]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f32:	887a      	ldrh	r2, [r7, #2]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f38:	e003      	b.n	8002f42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f3a:	887b      	ldrh	r3, [r7, #2]
 8002f3c:	041a      	lsls	r2, r3, #16
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	619a      	str	r2, [r3, #24]
}
 8002f42:	bf00      	nop
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr

08002f4e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b085      	sub	sp, #20
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
 8002f56:	460b      	mov	r3, r1
 8002f58:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	695b      	ldr	r3, [r3, #20]
 8002f5e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f60:	887a      	ldrh	r2, [r7, #2]
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	4013      	ands	r3, r2
 8002f66:	041a      	lsls	r2, r3, #16
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	43d9      	mvns	r1, r3
 8002f6c:	887b      	ldrh	r3, [r7, #2]
 8002f6e:	400b      	ands	r3, r1
 8002f70:	431a      	orrs	r2, r3
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	619a      	str	r2, [r3, #24]
}
 8002f76:	bf00      	nop
 8002f78:	3714      	adds	r7, #20
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
	...

08002f84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d101      	bne.n	8002f98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e0cc      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f98:	4b68      	ldr	r3, [pc, #416]	; (800313c <HAL_RCC_ClockConfig+0x1b8>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 030f 	and.w	r3, r3, #15
 8002fa0:	683a      	ldr	r2, [r7, #0]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d90c      	bls.n	8002fc0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fa6:	4b65      	ldr	r3, [pc, #404]	; (800313c <HAL_RCC_ClockConfig+0x1b8>)
 8002fa8:	683a      	ldr	r2, [r7, #0]
 8002faa:	b2d2      	uxtb	r2, r2
 8002fac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fae:	4b63      	ldr	r3, [pc, #396]	; (800313c <HAL_RCC_ClockConfig+0x1b8>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d001      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e0b8      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d020      	beq.n	800300e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0304 	and.w	r3, r3, #4
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002fd8:	4b59      	ldr	r3, [pc, #356]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8002fda:	689b      	ldr	r3, [r3, #8]
 8002fdc:	4a58      	ldr	r2, [pc, #352]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8002fde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002fe2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 0308 	and.w	r3, r3, #8
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d005      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ff0:	4b53      	ldr	r3, [pc, #332]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	4a52      	ldr	r2, [pc, #328]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8002ff6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ffa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ffc:	4b50      	ldr	r3, [pc, #320]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	494d      	ldr	r1, [pc, #308]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 800300a:	4313      	orrs	r3, r2
 800300c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d044      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	2b01      	cmp	r3, #1
 8003020:	d107      	bne.n	8003032 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003022:	4b47      	ldr	r3, [pc, #284]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d119      	bne.n	8003062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e07f      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	2b02      	cmp	r3, #2
 8003038:	d003      	beq.n	8003042 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800303e:	2b03      	cmp	r3, #3
 8003040:	d107      	bne.n	8003052 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003042:	4b3f      	ldr	r3, [pc, #252]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d109      	bne.n	8003062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e06f      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003052:	4b3b      	ldr	r3, [pc, #236]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e067      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003062:	4b37      	ldr	r3, [pc, #220]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	f023 0203 	bic.w	r2, r3, #3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	4934      	ldr	r1, [pc, #208]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003070:	4313      	orrs	r3, r2
 8003072:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003074:	f7fe fc86 	bl	8001984 <HAL_GetTick>
 8003078:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800307a:	e00a      	b.n	8003092 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800307c:	f7fe fc82 	bl	8001984 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	f241 3288 	movw	r2, #5000	; 0x1388
 800308a:	4293      	cmp	r3, r2
 800308c:	d901      	bls.n	8003092 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800308e:	2303      	movs	r3, #3
 8003090:	e04f      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003092:	4b2b      	ldr	r3, [pc, #172]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	f003 020c 	and.w	r2, r3, #12
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d1eb      	bne.n	800307c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030a4:	4b25      	ldr	r3, [pc, #148]	; (800313c <HAL_RCC_ClockConfig+0x1b8>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 030f 	and.w	r3, r3, #15
 80030ac:	683a      	ldr	r2, [r7, #0]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d20c      	bcs.n	80030cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030b2:	4b22      	ldr	r3, [pc, #136]	; (800313c <HAL_RCC_ClockConfig+0x1b8>)
 80030b4:	683a      	ldr	r2, [r7, #0]
 80030b6:	b2d2      	uxtb	r2, r2
 80030b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ba:	4b20      	ldr	r3, [pc, #128]	; (800313c <HAL_RCC_ClockConfig+0x1b8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 030f 	and.w	r3, r3, #15
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d001      	beq.n	80030cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e032      	b.n	8003132 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0304 	and.w	r3, r3, #4
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d008      	beq.n	80030ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030d8:	4b19      	ldr	r3, [pc, #100]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	4916      	ldr	r1, [pc, #88]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d009      	beq.n	800310a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030f6:	4b12      	ldr	r3, [pc, #72]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	691b      	ldr	r3, [r3, #16]
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	490e      	ldr	r1, [pc, #56]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003106:	4313      	orrs	r3, r2
 8003108:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800310a:	f000 f855 	bl	80031b8 <HAL_RCC_GetSysClockFreq>
 800310e:	4602      	mov	r2, r0
 8003110:	4b0b      	ldr	r3, [pc, #44]	; (8003140 <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	689b      	ldr	r3, [r3, #8]
 8003114:	091b      	lsrs	r3, r3, #4
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	490a      	ldr	r1, [pc, #40]	; (8003144 <HAL_RCC_ClockConfig+0x1c0>)
 800311c:	5ccb      	ldrb	r3, [r1, r3]
 800311e:	fa22 f303 	lsr.w	r3, r2, r3
 8003122:	4a09      	ldr	r2, [pc, #36]	; (8003148 <HAL_RCC_ClockConfig+0x1c4>)
 8003124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003126:	4b09      	ldr	r3, [pc, #36]	; (800314c <HAL_RCC_ClockConfig+0x1c8>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4618      	mov	r0, r3
 800312c:	f7fe fbe6 	bl	80018fc <HAL_InitTick>

  return HAL_OK;
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40023c00 	.word	0x40023c00
 8003140:	40023800 	.word	0x40023800
 8003144:	080094e4 	.word	0x080094e4
 8003148:	20000000 	.word	0x20000000
 800314c:	20000004 	.word	0x20000004

08003150 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003150:	b480      	push	{r7}
 8003152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003154:	4b03      	ldr	r3, [pc, #12]	; (8003164 <HAL_RCC_GetHCLKFreq+0x14>)
 8003156:	681b      	ldr	r3, [r3, #0]
}
 8003158:	4618      	mov	r0, r3
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	20000000 	.word	0x20000000

08003168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800316c:	f7ff fff0 	bl	8003150 <HAL_RCC_GetHCLKFreq>
 8003170:	4602      	mov	r2, r0
 8003172:	4b05      	ldr	r3, [pc, #20]	; (8003188 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	0a9b      	lsrs	r3, r3, #10
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	4903      	ldr	r1, [pc, #12]	; (800318c <HAL_RCC_GetPCLK1Freq+0x24>)
 800317e:	5ccb      	ldrb	r3, [r1, r3]
 8003180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003184:	4618      	mov	r0, r3
 8003186:	bd80      	pop	{r7, pc}
 8003188:	40023800 	.word	0x40023800
 800318c:	080094f4 	.word	0x080094f4

08003190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003194:	f7ff ffdc 	bl	8003150 <HAL_RCC_GetHCLKFreq>
 8003198:	4602      	mov	r2, r0
 800319a:	4b05      	ldr	r3, [pc, #20]	; (80031b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	0b5b      	lsrs	r3, r3, #13
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	4903      	ldr	r1, [pc, #12]	; (80031b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031a6:	5ccb      	ldrb	r3, [r1, r3]
 80031a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40023800 	.word	0x40023800
 80031b4:	080094f4 	.word	0x080094f4

080031b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031bc:	b0ae      	sub	sp, #184	; 0xb8
 80031be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80031cc:	2300      	movs	r3, #0
 80031ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80031d8:	2300      	movs	r3, #0
 80031da:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031de:	4bcb      	ldr	r3, [pc, #812]	; (800350c <HAL_RCC_GetSysClockFreq+0x354>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 030c 	and.w	r3, r3, #12
 80031e6:	2b0c      	cmp	r3, #12
 80031e8:	f200 8206 	bhi.w	80035f8 <HAL_RCC_GetSysClockFreq+0x440>
 80031ec:	a201      	add	r2, pc, #4	; (adr r2, 80031f4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80031ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f2:	bf00      	nop
 80031f4:	08003229 	.word	0x08003229
 80031f8:	080035f9 	.word	0x080035f9
 80031fc:	080035f9 	.word	0x080035f9
 8003200:	080035f9 	.word	0x080035f9
 8003204:	08003231 	.word	0x08003231
 8003208:	080035f9 	.word	0x080035f9
 800320c:	080035f9 	.word	0x080035f9
 8003210:	080035f9 	.word	0x080035f9
 8003214:	08003239 	.word	0x08003239
 8003218:	080035f9 	.word	0x080035f9
 800321c:	080035f9 	.word	0x080035f9
 8003220:	080035f9 	.word	0x080035f9
 8003224:	08003429 	.word	0x08003429
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003228:	4bb9      	ldr	r3, [pc, #740]	; (8003510 <HAL_RCC_GetSysClockFreq+0x358>)
 800322a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800322e:	e1e7      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003230:	4bb8      	ldr	r3, [pc, #736]	; (8003514 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003232:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003236:	e1e3      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003238:	4bb4      	ldr	r3, [pc, #720]	; (800350c <HAL_RCC_GetSysClockFreq+0x354>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003240:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003244:	4bb1      	ldr	r3, [pc, #708]	; (800350c <HAL_RCC_GetSysClockFreq+0x354>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d071      	beq.n	8003334 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003250:	4bae      	ldr	r3, [pc, #696]	; (800350c <HAL_RCC_GetSysClockFreq+0x354>)
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	099b      	lsrs	r3, r3, #6
 8003256:	2200      	movs	r2, #0
 8003258:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800325c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003260:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003264:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003268:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800326c:	2300      	movs	r3, #0
 800326e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003272:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003276:	4622      	mov	r2, r4
 8003278:	462b      	mov	r3, r5
 800327a:	f04f 0000 	mov.w	r0, #0
 800327e:	f04f 0100 	mov.w	r1, #0
 8003282:	0159      	lsls	r1, r3, #5
 8003284:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003288:	0150      	lsls	r0, r2, #5
 800328a:	4602      	mov	r2, r0
 800328c:	460b      	mov	r3, r1
 800328e:	4621      	mov	r1, r4
 8003290:	1a51      	subs	r1, r2, r1
 8003292:	6439      	str	r1, [r7, #64]	; 0x40
 8003294:	4629      	mov	r1, r5
 8003296:	eb63 0301 	sbc.w	r3, r3, r1
 800329a:	647b      	str	r3, [r7, #68]	; 0x44
 800329c:	f04f 0200 	mov.w	r2, #0
 80032a0:	f04f 0300 	mov.w	r3, #0
 80032a4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80032a8:	4649      	mov	r1, r9
 80032aa:	018b      	lsls	r3, r1, #6
 80032ac:	4641      	mov	r1, r8
 80032ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032b2:	4641      	mov	r1, r8
 80032b4:	018a      	lsls	r2, r1, #6
 80032b6:	4641      	mov	r1, r8
 80032b8:	1a51      	subs	r1, r2, r1
 80032ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80032bc:	4649      	mov	r1, r9
 80032be:	eb63 0301 	sbc.w	r3, r3, r1
 80032c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032c4:	f04f 0200 	mov.w	r2, #0
 80032c8:	f04f 0300 	mov.w	r3, #0
 80032cc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80032d0:	4649      	mov	r1, r9
 80032d2:	00cb      	lsls	r3, r1, #3
 80032d4:	4641      	mov	r1, r8
 80032d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80032da:	4641      	mov	r1, r8
 80032dc:	00ca      	lsls	r2, r1, #3
 80032de:	4610      	mov	r0, r2
 80032e0:	4619      	mov	r1, r3
 80032e2:	4603      	mov	r3, r0
 80032e4:	4622      	mov	r2, r4
 80032e6:	189b      	adds	r3, r3, r2
 80032e8:	633b      	str	r3, [r7, #48]	; 0x30
 80032ea:	462b      	mov	r3, r5
 80032ec:	460a      	mov	r2, r1
 80032ee:	eb42 0303 	adc.w	r3, r2, r3
 80032f2:	637b      	str	r3, [r7, #52]	; 0x34
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003300:	4629      	mov	r1, r5
 8003302:	024b      	lsls	r3, r1, #9
 8003304:	4621      	mov	r1, r4
 8003306:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800330a:	4621      	mov	r1, r4
 800330c:	024a      	lsls	r2, r1, #9
 800330e:	4610      	mov	r0, r2
 8003310:	4619      	mov	r1, r3
 8003312:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003316:	2200      	movs	r2, #0
 8003318:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800331c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003320:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003324:	f7fd fcd0 	bl	8000cc8 <__aeabi_uldivmod>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	4613      	mov	r3, r2
 800332e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003332:	e067      	b.n	8003404 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003334:	4b75      	ldr	r3, [pc, #468]	; (800350c <HAL_RCC_GetSysClockFreq+0x354>)
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	099b      	lsrs	r3, r3, #6
 800333a:	2200      	movs	r2, #0
 800333c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003340:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003344:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800334c:	67bb      	str	r3, [r7, #120]	; 0x78
 800334e:	2300      	movs	r3, #0
 8003350:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003352:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003356:	4622      	mov	r2, r4
 8003358:	462b      	mov	r3, r5
 800335a:	f04f 0000 	mov.w	r0, #0
 800335e:	f04f 0100 	mov.w	r1, #0
 8003362:	0159      	lsls	r1, r3, #5
 8003364:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003368:	0150      	lsls	r0, r2, #5
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	4621      	mov	r1, r4
 8003370:	1a51      	subs	r1, r2, r1
 8003372:	62b9      	str	r1, [r7, #40]	; 0x28
 8003374:	4629      	mov	r1, r5
 8003376:	eb63 0301 	sbc.w	r3, r3, r1
 800337a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800337c:	f04f 0200 	mov.w	r2, #0
 8003380:	f04f 0300 	mov.w	r3, #0
 8003384:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003388:	4649      	mov	r1, r9
 800338a:	018b      	lsls	r3, r1, #6
 800338c:	4641      	mov	r1, r8
 800338e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003392:	4641      	mov	r1, r8
 8003394:	018a      	lsls	r2, r1, #6
 8003396:	4641      	mov	r1, r8
 8003398:	ebb2 0a01 	subs.w	sl, r2, r1
 800339c:	4649      	mov	r1, r9
 800339e:	eb63 0b01 	sbc.w	fp, r3, r1
 80033a2:	f04f 0200 	mov.w	r2, #0
 80033a6:	f04f 0300 	mov.w	r3, #0
 80033aa:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033ae:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033b6:	4692      	mov	sl, r2
 80033b8:	469b      	mov	fp, r3
 80033ba:	4623      	mov	r3, r4
 80033bc:	eb1a 0303 	adds.w	r3, sl, r3
 80033c0:	623b      	str	r3, [r7, #32]
 80033c2:	462b      	mov	r3, r5
 80033c4:	eb4b 0303 	adc.w	r3, fp, r3
 80033c8:	627b      	str	r3, [r7, #36]	; 0x24
 80033ca:	f04f 0200 	mov.w	r2, #0
 80033ce:	f04f 0300 	mov.w	r3, #0
 80033d2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80033d6:	4629      	mov	r1, r5
 80033d8:	028b      	lsls	r3, r1, #10
 80033da:	4621      	mov	r1, r4
 80033dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033e0:	4621      	mov	r1, r4
 80033e2:	028a      	lsls	r2, r1, #10
 80033e4:	4610      	mov	r0, r2
 80033e6:	4619      	mov	r1, r3
 80033e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80033ec:	2200      	movs	r2, #0
 80033ee:	673b      	str	r3, [r7, #112]	; 0x70
 80033f0:	677a      	str	r2, [r7, #116]	; 0x74
 80033f2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80033f6:	f7fd fc67 	bl	8000cc8 <__aeabi_uldivmod>
 80033fa:	4602      	mov	r2, r0
 80033fc:	460b      	mov	r3, r1
 80033fe:	4613      	mov	r3, r2
 8003400:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003404:	4b41      	ldr	r3, [pc, #260]	; (800350c <HAL_RCC_GetSysClockFreq+0x354>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	0c1b      	lsrs	r3, r3, #16
 800340a:	f003 0303 	and.w	r3, r3, #3
 800340e:	3301      	adds	r3, #1
 8003410:	005b      	lsls	r3, r3, #1
 8003412:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003416:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800341a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800341e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003422:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003426:	e0eb      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003428:	4b38      	ldr	r3, [pc, #224]	; (800350c <HAL_RCC_GetSysClockFreq+0x354>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003430:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003434:	4b35      	ldr	r3, [pc, #212]	; (800350c <HAL_RCC_GetSysClockFreq+0x354>)
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800343c:	2b00      	cmp	r3, #0
 800343e:	d06b      	beq.n	8003518 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003440:	4b32      	ldr	r3, [pc, #200]	; (800350c <HAL_RCC_GetSysClockFreq+0x354>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	099b      	lsrs	r3, r3, #6
 8003446:	2200      	movs	r2, #0
 8003448:	66bb      	str	r3, [r7, #104]	; 0x68
 800344a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800344c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800344e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003452:	663b      	str	r3, [r7, #96]	; 0x60
 8003454:	2300      	movs	r3, #0
 8003456:	667b      	str	r3, [r7, #100]	; 0x64
 8003458:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800345c:	4622      	mov	r2, r4
 800345e:	462b      	mov	r3, r5
 8003460:	f04f 0000 	mov.w	r0, #0
 8003464:	f04f 0100 	mov.w	r1, #0
 8003468:	0159      	lsls	r1, r3, #5
 800346a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800346e:	0150      	lsls	r0, r2, #5
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4621      	mov	r1, r4
 8003476:	1a51      	subs	r1, r2, r1
 8003478:	61b9      	str	r1, [r7, #24]
 800347a:	4629      	mov	r1, r5
 800347c:	eb63 0301 	sbc.w	r3, r3, r1
 8003480:	61fb      	str	r3, [r7, #28]
 8003482:	f04f 0200 	mov.w	r2, #0
 8003486:	f04f 0300 	mov.w	r3, #0
 800348a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800348e:	4659      	mov	r1, fp
 8003490:	018b      	lsls	r3, r1, #6
 8003492:	4651      	mov	r1, sl
 8003494:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003498:	4651      	mov	r1, sl
 800349a:	018a      	lsls	r2, r1, #6
 800349c:	4651      	mov	r1, sl
 800349e:	ebb2 0801 	subs.w	r8, r2, r1
 80034a2:	4659      	mov	r1, fp
 80034a4:	eb63 0901 	sbc.w	r9, r3, r1
 80034a8:	f04f 0200 	mov.w	r2, #0
 80034ac:	f04f 0300 	mov.w	r3, #0
 80034b0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034b4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034b8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034bc:	4690      	mov	r8, r2
 80034be:	4699      	mov	r9, r3
 80034c0:	4623      	mov	r3, r4
 80034c2:	eb18 0303 	adds.w	r3, r8, r3
 80034c6:	613b      	str	r3, [r7, #16]
 80034c8:	462b      	mov	r3, r5
 80034ca:	eb49 0303 	adc.w	r3, r9, r3
 80034ce:	617b      	str	r3, [r7, #20]
 80034d0:	f04f 0200 	mov.w	r2, #0
 80034d4:	f04f 0300 	mov.w	r3, #0
 80034d8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80034dc:	4629      	mov	r1, r5
 80034de:	024b      	lsls	r3, r1, #9
 80034e0:	4621      	mov	r1, r4
 80034e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034e6:	4621      	mov	r1, r4
 80034e8:	024a      	lsls	r2, r1, #9
 80034ea:	4610      	mov	r0, r2
 80034ec:	4619      	mov	r1, r3
 80034ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034f2:	2200      	movs	r2, #0
 80034f4:	65bb      	str	r3, [r7, #88]	; 0x58
 80034f6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80034f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80034fc:	f7fd fbe4 	bl	8000cc8 <__aeabi_uldivmod>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	4613      	mov	r3, r2
 8003506:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800350a:	e065      	b.n	80035d8 <HAL_RCC_GetSysClockFreq+0x420>
 800350c:	40023800 	.word	0x40023800
 8003510:	00f42400 	.word	0x00f42400
 8003514:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003518:	4b3d      	ldr	r3, [pc, #244]	; (8003610 <HAL_RCC_GetSysClockFreq+0x458>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	099b      	lsrs	r3, r3, #6
 800351e:	2200      	movs	r2, #0
 8003520:	4618      	mov	r0, r3
 8003522:	4611      	mov	r1, r2
 8003524:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003528:	653b      	str	r3, [r7, #80]	; 0x50
 800352a:	2300      	movs	r3, #0
 800352c:	657b      	str	r3, [r7, #84]	; 0x54
 800352e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003532:	4642      	mov	r2, r8
 8003534:	464b      	mov	r3, r9
 8003536:	f04f 0000 	mov.w	r0, #0
 800353a:	f04f 0100 	mov.w	r1, #0
 800353e:	0159      	lsls	r1, r3, #5
 8003540:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003544:	0150      	lsls	r0, r2, #5
 8003546:	4602      	mov	r2, r0
 8003548:	460b      	mov	r3, r1
 800354a:	4641      	mov	r1, r8
 800354c:	1a51      	subs	r1, r2, r1
 800354e:	60b9      	str	r1, [r7, #8]
 8003550:	4649      	mov	r1, r9
 8003552:	eb63 0301 	sbc.w	r3, r3, r1
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	f04f 0300 	mov.w	r3, #0
 8003560:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003564:	4659      	mov	r1, fp
 8003566:	018b      	lsls	r3, r1, #6
 8003568:	4651      	mov	r1, sl
 800356a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800356e:	4651      	mov	r1, sl
 8003570:	018a      	lsls	r2, r1, #6
 8003572:	4651      	mov	r1, sl
 8003574:	1a54      	subs	r4, r2, r1
 8003576:	4659      	mov	r1, fp
 8003578:	eb63 0501 	sbc.w	r5, r3, r1
 800357c:	f04f 0200 	mov.w	r2, #0
 8003580:	f04f 0300 	mov.w	r3, #0
 8003584:	00eb      	lsls	r3, r5, #3
 8003586:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800358a:	00e2      	lsls	r2, r4, #3
 800358c:	4614      	mov	r4, r2
 800358e:	461d      	mov	r5, r3
 8003590:	4643      	mov	r3, r8
 8003592:	18e3      	adds	r3, r4, r3
 8003594:	603b      	str	r3, [r7, #0]
 8003596:	464b      	mov	r3, r9
 8003598:	eb45 0303 	adc.w	r3, r5, r3
 800359c:	607b      	str	r3, [r7, #4]
 800359e:	f04f 0200 	mov.w	r2, #0
 80035a2:	f04f 0300 	mov.w	r3, #0
 80035a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035aa:	4629      	mov	r1, r5
 80035ac:	028b      	lsls	r3, r1, #10
 80035ae:	4621      	mov	r1, r4
 80035b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035b4:	4621      	mov	r1, r4
 80035b6:	028a      	lsls	r2, r1, #10
 80035b8:	4610      	mov	r0, r2
 80035ba:	4619      	mov	r1, r3
 80035bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80035c0:	2200      	movs	r2, #0
 80035c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80035c4:	64fa      	str	r2, [r7, #76]	; 0x4c
 80035c6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80035ca:	f7fd fb7d 	bl	8000cc8 <__aeabi_uldivmod>
 80035ce:	4602      	mov	r2, r0
 80035d0:	460b      	mov	r3, r1
 80035d2:	4613      	mov	r3, r2
 80035d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80035d8:	4b0d      	ldr	r3, [pc, #52]	; (8003610 <HAL_RCC_GetSysClockFreq+0x458>)
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	0f1b      	lsrs	r3, r3, #28
 80035de:	f003 0307 	and.w	r3, r3, #7
 80035e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80035e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80035ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80035ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80035f6:	e003      	b.n	8003600 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035f8:	4b06      	ldr	r3, [pc, #24]	; (8003614 <HAL_RCC_GetSysClockFreq+0x45c>)
 80035fa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 80035fe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003600:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003604:	4618      	mov	r0, r3
 8003606:	37b8      	adds	r7, #184	; 0xb8
 8003608:	46bd      	mov	sp, r7
 800360a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800360e:	bf00      	nop
 8003610:	40023800 	.word	0x40023800
 8003614:	00f42400 	.word	0x00f42400

08003618 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d101      	bne.n	800362a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e28d      	b.n	8003b46 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	2b00      	cmp	r3, #0
 8003634:	f000 8083 	beq.w	800373e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003638:	4b94      	ldr	r3, [pc, #592]	; (800388c <HAL_RCC_OscConfig+0x274>)
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 030c 	and.w	r3, r3, #12
 8003640:	2b04      	cmp	r3, #4
 8003642:	d019      	beq.n	8003678 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003644:	4b91      	ldr	r3, [pc, #580]	; (800388c <HAL_RCC_OscConfig+0x274>)
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800364c:	2b08      	cmp	r3, #8
 800364e:	d106      	bne.n	800365e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003650:	4b8e      	ldr	r3, [pc, #568]	; (800388c <HAL_RCC_OscConfig+0x274>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003658:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800365c:	d00c      	beq.n	8003678 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800365e:	4b8b      	ldr	r3, [pc, #556]	; (800388c <HAL_RCC_OscConfig+0x274>)
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003666:	2b0c      	cmp	r3, #12
 8003668:	d112      	bne.n	8003690 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800366a:	4b88      	ldr	r3, [pc, #544]	; (800388c <HAL_RCC_OscConfig+0x274>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003672:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003676:	d10b      	bne.n	8003690 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003678:	4b84      	ldr	r3, [pc, #528]	; (800388c <HAL_RCC_OscConfig+0x274>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d05b      	beq.n	800373c <HAL_RCC_OscConfig+0x124>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d157      	bne.n	800373c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e25a      	b.n	8003b46 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003698:	d106      	bne.n	80036a8 <HAL_RCC_OscConfig+0x90>
 800369a:	4b7c      	ldr	r3, [pc, #496]	; (800388c <HAL_RCC_OscConfig+0x274>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a7b      	ldr	r2, [pc, #492]	; (800388c <HAL_RCC_OscConfig+0x274>)
 80036a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	e01d      	b.n	80036e4 <HAL_RCC_OscConfig+0xcc>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036b0:	d10c      	bne.n	80036cc <HAL_RCC_OscConfig+0xb4>
 80036b2:	4b76      	ldr	r3, [pc, #472]	; (800388c <HAL_RCC_OscConfig+0x274>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a75      	ldr	r2, [pc, #468]	; (800388c <HAL_RCC_OscConfig+0x274>)
 80036b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036bc:	6013      	str	r3, [r2, #0]
 80036be:	4b73      	ldr	r3, [pc, #460]	; (800388c <HAL_RCC_OscConfig+0x274>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a72      	ldr	r2, [pc, #456]	; (800388c <HAL_RCC_OscConfig+0x274>)
 80036c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	e00b      	b.n	80036e4 <HAL_RCC_OscConfig+0xcc>
 80036cc:	4b6f      	ldr	r3, [pc, #444]	; (800388c <HAL_RCC_OscConfig+0x274>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a6e      	ldr	r2, [pc, #440]	; (800388c <HAL_RCC_OscConfig+0x274>)
 80036d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036d6:	6013      	str	r3, [r2, #0]
 80036d8:	4b6c      	ldr	r3, [pc, #432]	; (800388c <HAL_RCC_OscConfig+0x274>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a6b      	ldr	r2, [pc, #428]	; (800388c <HAL_RCC_OscConfig+0x274>)
 80036de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d013      	beq.n	8003714 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036ec:	f7fe f94a 	bl	8001984 <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036f2:	e008      	b.n	8003706 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036f4:	f7fe f946 	bl	8001984 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	2b64      	cmp	r3, #100	; 0x64
 8003700:	d901      	bls.n	8003706 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e21f      	b.n	8003b46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003706:	4b61      	ldr	r3, [pc, #388]	; (800388c <HAL_RCC_OscConfig+0x274>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800370e:	2b00      	cmp	r3, #0
 8003710:	d0f0      	beq.n	80036f4 <HAL_RCC_OscConfig+0xdc>
 8003712:	e014      	b.n	800373e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003714:	f7fe f936 	bl	8001984 <HAL_GetTick>
 8003718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800371a:	e008      	b.n	800372e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800371c:	f7fe f932 	bl	8001984 <HAL_GetTick>
 8003720:	4602      	mov	r2, r0
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	1ad3      	subs	r3, r2, r3
 8003726:	2b64      	cmp	r3, #100	; 0x64
 8003728:	d901      	bls.n	800372e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800372a:	2303      	movs	r3, #3
 800372c:	e20b      	b.n	8003b46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800372e:	4b57      	ldr	r3, [pc, #348]	; (800388c <HAL_RCC_OscConfig+0x274>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1f0      	bne.n	800371c <HAL_RCC_OscConfig+0x104>
 800373a:	e000      	b.n	800373e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800373c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d06f      	beq.n	800382a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800374a:	4b50      	ldr	r3, [pc, #320]	; (800388c <HAL_RCC_OscConfig+0x274>)
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 030c 	and.w	r3, r3, #12
 8003752:	2b00      	cmp	r3, #0
 8003754:	d017      	beq.n	8003786 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003756:	4b4d      	ldr	r3, [pc, #308]	; (800388c <HAL_RCC_OscConfig+0x274>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800375e:	2b08      	cmp	r3, #8
 8003760:	d105      	bne.n	800376e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003762:	4b4a      	ldr	r3, [pc, #296]	; (800388c <HAL_RCC_OscConfig+0x274>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d00b      	beq.n	8003786 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800376e:	4b47      	ldr	r3, [pc, #284]	; (800388c <HAL_RCC_OscConfig+0x274>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003776:	2b0c      	cmp	r3, #12
 8003778:	d11c      	bne.n	80037b4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800377a:	4b44      	ldr	r3, [pc, #272]	; (800388c <HAL_RCC_OscConfig+0x274>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d116      	bne.n	80037b4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003786:	4b41      	ldr	r3, [pc, #260]	; (800388c <HAL_RCC_OscConfig+0x274>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d005      	beq.n	800379e <HAL_RCC_OscConfig+0x186>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d001      	beq.n	800379e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e1d3      	b.n	8003b46 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800379e:	4b3b      	ldr	r3, [pc, #236]	; (800388c <HAL_RCC_OscConfig+0x274>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	00db      	lsls	r3, r3, #3
 80037ac:	4937      	ldr	r1, [pc, #220]	; (800388c <HAL_RCC_OscConfig+0x274>)
 80037ae:	4313      	orrs	r3, r2
 80037b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037b2:	e03a      	b.n	800382a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d020      	beq.n	80037fe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037bc:	4b34      	ldr	r3, [pc, #208]	; (8003890 <HAL_RCC_OscConfig+0x278>)
 80037be:	2201      	movs	r2, #1
 80037c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037c2:	f7fe f8df 	bl	8001984 <HAL_GetTick>
 80037c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037c8:	e008      	b.n	80037dc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037ca:	f7fe f8db 	bl	8001984 <HAL_GetTick>
 80037ce:	4602      	mov	r2, r0
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	1ad3      	subs	r3, r2, r3
 80037d4:	2b02      	cmp	r3, #2
 80037d6:	d901      	bls.n	80037dc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80037d8:	2303      	movs	r3, #3
 80037da:	e1b4      	b.n	8003b46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037dc:	4b2b      	ldr	r3, [pc, #172]	; (800388c <HAL_RCC_OscConfig+0x274>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0f0      	beq.n	80037ca <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e8:	4b28      	ldr	r3, [pc, #160]	; (800388c <HAL_RCC_OscConfig+0x274>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	00db      	lsls	r3, r3, #3
 80037f6:	4925      	ldr	r1, [pc, #148]	; (800388c <HAL_RCC_OscConfig+0x274>)
 80037f8:	4313      	orrs	r3, r2
 80037fa:	600b      	str	r3, [r1, #0]
 80037fc:	e015      	b.n	800382a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80037fe:	4b24      	ldr	r3, [pc, #144]	; (8003890 <HAL_RCC_OscConfig+0x278>)
 8003800:	2200      	movs	r2, #0
 8003802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003804:	f7fe f8be 	bl	8001984 <HAL_GetTick>
 8003808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800380a:	e008      	b.n	800381e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800380c:	f7fe f8ba 	bl	8001984 <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b02      	cmp	r3, #2
 8003818:	d901      	bls.n	800381e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e193      	b.n	8003b46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800381e:	4b1b      	ldr	r3, [pc, #108]	; (800388c <HAL_RCC_OscConfig+0x274>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d1f0      	bne.n	800380c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f003 0308 	and.w	r3, r3, #8
 8003832:	2b00      	cmp	r3, #0
 8003834:	d036      	beq.n	80038a4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	695b      	ldr	r3, [r3, #20]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d016      	beq.n	800386c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800383e:	4b15      	ldr	r3, [pc, #84]	; (8003894 <HAL_RCC_OscConfig+0x27c>)
 8003840:	2201      	movs	r2, #1
 8003842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003844:	f7fe f89e 	bl	8001984 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800384c:	f7fe f89a 	bl	8001984 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e173      	b.n	8003b46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800385e:	4b0b      	ldr	r3, [pc, #44]	; (800388c <HAL_RCC_OscConfig+0x274>)
 8003860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d0f0      	beq.n	800384c <HAL_RCC_OscConfig+0x234>
 800386a:	e01b      	b.n	80038a4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800386c:	4b09      	ldr	r3, [pc, #36]	; (8003894 <HAL_RCC_OscConfig+0x27c>)
 800386e:	2200      	movs	r2, #0
 8003870:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003872:	f7fe f887 	bl	8001984 <HAL_GetTick>
 8003876:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003878:	e00e      	b.n	8003898 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800387a:	f7fe f883 	bl	8001984 <HAL_GetTick>
 800387e:	4602      	mov	r2, r0
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	1ad3      	subs	r3, r2, r3
 8003884:	2b02      	cmp	r3, #2
 8003886:	d907      	bls.n	8003898 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003888:	2303      	movs	r3, #3
 800388a:	e15c      	b.n	8003b46 <HAL_RCC_OscConfig+0x52e>
 800388c:	40023800 	.word	0x40023800
 8003890:	42470000 	.word	0x42470000
 8003894:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003898:	4b8a      	ldr	r3, [pc, #552]	; (8003ac4 <HAL_RCC_OscConfig+0x4ac>)
 800389a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d1ea      	bne.n	800387a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f003 0304 	and.w	r3, r3, #4
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f000 8097 	beq.w	80039e0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038b2:	2300      	movs	r3, #0
 80038b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038b6:	4b83      	ldr	r3, [pc, #524]	; (8003ac4 <HAL_RCC_OscConfig+0x4ac>)
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d10f      	bne.n	80038e2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038c2:	2300      	movs	r3, #0
 80038c4:	60bb      	str	r3, [r7, #8]
 80038c6:	4b7f      	ldr	r3, [pc, #508]	; (8003ac4 <HAL_RCC_OscConfig+0x4ac>)
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	4a7e      	ldr	r2, [pc, #504]	; (8003ac4 <HAL_RCC_OscConfig+0x4ac>)
 80038cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038d0:	6413      	str	r3, [r2, #64]	; 0x40
 80038d2:	4b7c      	ldr	r3, [pc, #496]	; (8003ac4 <HAL_RCC_OscConfig+0x4ac>)
 80038d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038da:	60bb      	str	r3, [r7, #8]
 80038dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80038de:	2301      	movs	r3, #1
 80038e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038e2:	4b79      	ldr	r3, [pc, #484]	; (8003ac8 <HAL_RCC_OscConfig+0x4b0>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d118      	bne.n	8003920 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038ee:	4b76      	ldr	r3, [pc, #472]	; (8003ac8 <HAL_RCC_OscConfig+0x4b0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	4a75      	ldr	r2, [pc, #468]	; (8003ac8 <HAL_RCC_OscConfig+0x4b0>)
 80038f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80038f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038fa:	f7fe f843 	bl	8001984 <HAL_GetTick>
 80038fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003900:	e008      	b.n	8003914 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003902:	f7fe f83f 	bl	8001984 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b02      	cmp	r3, #2
 800390e:	d901      	bls.n	8003914 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e118      	b.n	8003b46 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003914:	4b6c      	ldr	r3, [pc, #432]	; (8003ac8 <HAL_RCC_OscConfig+0x4b0>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0f0      	beq.n	8003902 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d106      	bne.n	8003936 <HAL_RCC_OscConfig+0x31e>
 8003928:	4b66      	ldr	r3, [pc, #408]	; (8003ac4 <HAL_RCC_OscConfig+0x4ac>)
 800392a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392c:	4a65      	ldr	r2, [pc, #404]	; (8003ac4 <HAL_RCC_OscConfig+0x4ac>)
 800392e:	f043 0301 	orr.w	r3, r3, #1
 8003932:	6713      	str	r3, [r2, #112]	; 0x70
 8003934:	e01c      	b.n	8003970 <HAL_RCC_OscConfig+0x358>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	2b05      	cmp	r3, #5
 800393c:	d10c      	bne.n	8003958 <HAL_RCC_OscConfig+0x340>
 800393e:	4b61      	ldr	r3, [pc, #388]	; (8003ac4 <HAL_RCC_OscConfig+0x4ac>)
 8003940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003942:	4a60      	ldr	r2, [pc, #384]	; (8003ac4 <HAL_RCC_OscConfig+0x4ac>)
 8003944:	f043 0304 	orr.w	r3, r3, #4
 8003948:	6713      	str	r3, [r2, #112]	; 0x70
 800394a:	4b5e      	ldr	r3, [pc, #376]	; (8003ac4 <HAL_RCC_OscConfig+0x4ac>)
 800394c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394e:	4a5d      	ldr	r2, [pc, #372]	; (8003ac4 <HAL_RCC_OscConfig+0x4ac>)
 8003950:	f043 0301 	orr.w	r3, r3, #1
 8003954:	6713      	str	r3, [r2, #112]	; 0x70
 8003956:	e00b      	b.n	8003970 <HAL_RCC_OscConfig+0x358>
 8003958:	4b5a      	ldr	r3, [pc, #360]	; (8003ac4 <HAL_RCC_OscConfig+0x4ac>)
 800395a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395c:	4a59      	ldr	r2, [pc, #356]	; (8003ac4 <HAL_RCC_OscConfig+0x4ac>)
 800395e:	f023 0301 	bic.w	r3, r3, #1
 8003962:	6713      	str	r3, [r2, #112]	; 0x70
 8003964:	4b57      	ldr	r3, [pc, #348]	; (8003ac4 <HAL_RCC_OscConfig+0x4ac>)
 8003966:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003968:	4a56      	ldr	r2, [pc, #344]	; (8003ac4 <HAL_RCC_OscConfig+0x4ac>)
 800396a:	f023 0304 	bic.w	r3, r3, #4
 800396e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d015      	beq.n	80039a4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003978:	f7fe f804 	bl	8001984 <HAL_GetTick>
 800397c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800397e:	e00a      	b.n	8003996 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003980:	f7fe f800 	bl	8001984 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	1ad3      	subs	r3, r2, r3
 800398a:	f241 3288 	movw	r2, #5000	; 0x1388
 800398e:	4293      	cmp	r3, r2
 8003990:	d901      	bls.n	8003996 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003992:	2303      	movs	r3, #3
 8003994:	e0d7      	b.n	8003b46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003996:	4b4b      	ldr	r3, [pc, #300]	; (8003ac4 <HAL_RCC_OscConfig+0x4ac>)
 8003998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d0ee      	beq.n	8003980 <HAL_RCC_OscConfig+0x368>
 80039a2:	e014      	b.n	80039ce <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039a4:	f7fd ffee 	bl	8001984 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039aa:	e00a      	b.n	80039c2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039ac:	f7fd ffea 	bl	8001984 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d901      	bls.n	80039c2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80039be:	2303      	movs	r3, #3
 80039c0:	e0c1      	b.n	8003b46 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039c2:	4b40      	ldr	r3, [pc, #256]	; (8003ac4 <HAL_RCC_OscConfig+0x4ac>)
 80039c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d1ee      	bne.n	80039ac <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80039ce:	7dfb      	ldrb	r3, [r7, #23]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d105      	bne.n	80039e0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039d4:	4b3b      	ldr	r3, [pc, #236]	; (8003ac4 <HAL_RCC_OscConfig+0x4ac>)
 80039d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d8:	4a3a      	ldr	r2, [pc, #232]	; (8003ac4 <HAL_RCC_OscConfig+0x4ac>)
 80039da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	699b      	ldr	r3, [r3, #24]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	f000 80ad 	beq.w	8003b44 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80039ea:	4b36      	ldr	r3, [pc, #216]	; (8003ac4 <HAL_RCC_OscConfig+0x4ac>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 030c 	and.w	r3, r3, #12
 80039f2:	2b08      	cmp	r3, #8
 80039f4:	d060      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	2b02      	cmp	r3, #2
 80039fc:	d145      	bne.n	8003a8a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039fe:	4b33      	ldr	r3, [pc, #204]	; (8003acc <HAL_RCC_OscConfig+0x4b4>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a04:	f7fd ffbe 	bl	8001984 <HAL_GetTick>
 8003a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a0a:	e008      	b.n	8003a1e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a0c:	f7fd ffba 	bl	8001984 <HAL_GetTick>
 8003a10:	4602      	mov	r2, r0
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	2b02      	cmp	r3, #2
 8003a18:	d901      	bls.n	8003a1e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e093      	b.n	8003b46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a1e:	4b29      	ldr	r3, [pc, #164]	; (8003ac4 <HAL_RCC_OscConfig+0x4ac>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d1f0      	bne.n	8003a0c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69da      	ldr	r2, [r3, #28]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a1b      	ldr	r3, [r3, #32]
 8003a32:	431a      	orrs	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	019b      	lsls	r3, r3, #6
 8003a3a:	431a      	orrs	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a40:	085b      	lsrs	r3, r3, #1
 8003a42:	3b01      	subs	r3, #1
 8003a44:	041b      	lsls	r3, r3, #16
 8003a46:	431a      	orrs	r2, r3
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	061b      	lsls	r3, r3, #24
 8003a4e:	431a      	orrs	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a54:	071b      	lsls	r3, r3, #28
 8003a56:	491b      	ldr	r1, [pc, #108]	; (8003ac4 <HAL_RCC_OscConfig+0x4ac>)
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a5c:	4b1b      	ldr	r3, [pc, #108]	; (8003acc <HAL_RCC_OscConfig+0x4b4>)
 8003a5e:	2201      	movs	r2, #1
 8003a60:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a62:	f7fd ff8f 	bl	8001984 <HAL_GetTick>
 8003a66:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a68:	e008      	b.n	8003a7c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a6a:	f7fd ff8b 	bl	8001984 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d901      	bls.n	8003a7c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003a78:	2303      	movs	r3, #3
 8003a7a:	e064      	b.n	8003b46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a7c:	4b11      	ldr	r3, [pc, #68]	; (8003ac4 <HAL_RCC_OscConfig+0x4ac>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d0f0      	beq.n	8003a6a <HAL_RCC_OscConfig+0x452>
 8003a88:	e05c      	b.n	8003b44 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a8a:	4b10      	ldr	r3, [pc, #64]	; (8003acc <HAL_RCC_OscConfig+0x4b4>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a90:	f7fd ff78 	bl	8001984 <HAL_GetTick>
 8003a94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a98:	f7fd ff74 	bl	8001984 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b02      	cmp	r3, #2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e04d      	b.n	8003b46 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aaa:	4b06      	ldr	r3, [pc, #24]	; (8003ac4 <HAL_RCC_OscConfig+0x4ac>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1f0      	bne.n	8003a98 <HAL_RCC_OscConfig+0x480>
 8003ab6:	e045      	b.n	8003b44 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	699b      	ldr	r3, [r3, #24]
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d107      	bne.n	8003ad0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	e040      	b.n	8003b46 <HAL_RCC_OscConfig+0x52e>
 8003ac4:	40023800 	.word	0x40023800
 8003ac8:	40007000 	.word	0x40007000
 8003acc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ad0:	4b1f      	ldr	r3, [pc, #124]	; (8003b50 <HAL_RCC_OscConfig+0x538>)
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d030      	beq.n	8003b40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d129      	bne.n	8003b40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d122      	bne.n	8003b40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b00:	4013      	ands	r3, r2
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b06:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d119      	bne.n	8003b40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b16:	085b      	lsrs	r3, r3, #1
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d10f      	bne.n	8003b40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d107      	bne.n	8003b40 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b3a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d001      	beq.n	8003b44 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003b40:	2301      	movs	r3, #1
 8003b42:	e000      	b.n	8003b46 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3718      	adds	r7, #24
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40023800 	.word	0x40023800

08003b54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e03f      	b.n	8003be6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d106      	bne.n	8003b80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2200      	movs	r2, #0
 8003b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f7fd fd0c 	bl	8001598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2224      	movs	r2, #36	; 0x24
 8003b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68da      	ldr	r2, [r3, #12]
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 fd7b 	bl	8004694 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	691a      	ldr	r2, [r3, #16]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	695a      	ldr	r2, [r3, #20]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bbc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68da      	ldr	r2, [r3, #12]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bcc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2220      	movs	r2, #32
 8003bd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2220      	movs	r2, #32
 8003be0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	3708      	adds	r7, #8
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003bee:	b580      	push	{r7, lr}
 8003bf0:	b08a      	sub	sp, #40	; 0x28
 8003bf2:	af02      	add	r7, sp, #8
 8003bf4:	60f8      	str	r0, [r7, #12]
 8003bf6:	60b9      	str	r1, [r7, #8]
 8003bf8:	603b      	str	r3, [r7, #0]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b20      	cmp	r3, #32
 8003c0c:	d17c      	bne.n	8003d08 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <HAL_UART_Transmit+0x2c>
 8003c14:	88fb      	ldrh	r3, [r7, #6]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e075      	b.n	8003d0a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d101      	bne.n	8003c2c <HAL_UART_Transmit+0x3e>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	e06e      	b.n	8003d0a <HAL_UART_Transmit+0x11c>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2201      	movs	r2, #1
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2221      	movs	r2, #33	; 0x21
 8003c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c42:	f7fd fe9f 	bl	8001984 <HAL_GetTick>
 8003c46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	88fa      	ldrh	r2, [r7, #6]
 8003c4c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	88fa      	ldrh	r2, [r7, #6]
 8003c52:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	689b      	ldr	r3, [r3, #8]
 8003c58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c5c:	d108      	bne.n	8003c70 <HAL_UART_Transmit+0x82>
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d104      	bne.n	8003c70 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003c66:	2300      	movs	r3, #0
 8003c68:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	61bb      	str	r3, [r7, #24]
 8003c6e:	e003      	b.n	8003c78 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c74:	2300      	movs	r3, #0
 8003c76:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003c80:	e02a      	b.n	8003cd8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	2200      	movs	r2, #0
 8003c8a:	2180      	movs	r1, #128	; 0x80
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 faf9 	bl	8004284 <UART_WaitOnFlagUntilTimeout>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e036      	b.n	8003d0a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d10b      	bne.n	8003cba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	881b      	ldrh	r3, [r3, #0]
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cb0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	3302      	adds	r3, #2
 8003cb6:	61bb      	str	r3, [r7, #24]
 8003cb8:	e007      	b.n	8003cca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	781a      	ldrb	r2, [r3, #0]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d1cf      	bne.n	8003c82 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	9300      	str	r3, [sp, #0]
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	2200      	movs	r2, #0
 8003cea:	2140      	movs	r1, #64	; 0x40
 8003cec:	68f8      	ldr	r0, [r7, #12]
 8003cee:	f000 fac9 	bl	8004284 <UART_WaitOnFlagUntilTimeout>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e006      	b.n	8003d0a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2220      	movs	r2, #32
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d04:	2300      	movs	r3, #0
 8003d06:	e000      	b.n	8003d0a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d08:	2302      	movs	r3, #2
  }
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3720      	adds	r7, #32
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
	...

08003d14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b0ba      	sub	sp, #232	; 0xe8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68db      	ldr	r3, [r3, #12]
 8003d2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	695b      	ldr	r3, [r3, #20]
 8003d36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003d40:	2300      	movs	r3, #0
 8003d42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d4a:	f003 030f 	and.w	r3, r3, #15
 8003d4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003d52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d10f      	bne.n	8003d7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d5e:	f003 0320 	and.w	r3, r3, #32
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d009      	beq.n	8003d7a <HAL_UART_IRQHandler+0x66>
 8003d66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d6a:	f003 0320 	and.w	r3, r3, #32
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 fbd3 	bl	800451e <UART_Receive_IT>
      return;
 8003d78:	e256      	b.n	8004228 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003d7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 80de 	beq.w	8003f40 <HAL_UART_IRQHandler+0x22c>
 8003d84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d106      	bne.n	8003d9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003d90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d94:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 80d1 	beq.w	8003f40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003d9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00b      	beq.n	8003dc2 <HAL_UART_IRQHandler+0xae>
 8003daa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d005      	beq.n	8003dc2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	f043 0201 	orr.w	r2, r3, #1
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003dc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dc6:	f003 0304 	and.w	r3, r3, #4
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d00b      	beq.n	8003de6 <HAL_UART_IRQHandler+0xd2>
 8003dce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d005      	beq.n	8003de6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dde:	f043 0202 	orr.w	r2, r3, #2
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00b      	beq.n	8003e0a <HAL_UART_IRQHandler+0xf6>
 8003df2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003df6:	f003 0301 	and.w	r3, r3, #1
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d005      	beq.n	8003e0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	f043 0204 	orr.w	r2, r3, #4
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e0e:	f003 0308 	and.w	r3, r3, #8
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d011      	beq.n	8003e3a <HAL_UART_IRQHandler+0x126>
 8003e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e1a:	f003 0320 	and.w	r3, r3, #32
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d105      	bne.n	8003e2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e26:	f003 0301 	and.w	r3, r3, #1
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d005      	beq.n	8003e3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	f043 0208 	orr.w	r2, r3, #8
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 81ed 	beq.w	800421e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e48:	f003 0320 	and.w	r3, r3, #32
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d008      	beq.n	8003e62 <HAL_UART_IRQHandler+0x14e>
 8003e50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e54:	f003 0320 	and.w	r3, r3, #32
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d002      	beq.n	8003e62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e5c:	6878      	ldr	r0, [r7, #4]
 8003e5e:	f000 fb5e 	bl	800451e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	695b      	ldr	r3, [r3, #20]
 8003e68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e6c:	2b40      	cmp	r3, #64	; 0x40
 8003e6e:	bf0c      	ite	eq
 8003e70:	2301      	moveq	r3, #1
 8003e72:	2300      	movne	r3, #0
 8003e74:	b2db      	uxtb	r3, r3
 8003e76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	f003 0308 	and.w	r3, r3, #8
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d103      	bne.n	8003e8e <HAL_UART_IRQHandler+0x17a>
 8003e86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d04f      	beq.n	8003f2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 fa66 	bl	8004360 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	695b      	ldr	r3, [r3, #20]
 8003e9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e9e:	2b40      	cmp	r3, #64	; 0x40
 8003ea0:	d141      	bne.n	8003f26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	3314      	adds	r3, #20
 8003ea8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003eb0:	e853 3f00 	ldrex	r3, [r3]
 8003eb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003eb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ebc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ec0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	3314      	adds	r3, #20
 8003eca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003ece:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003ed2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003eda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003ede:	e841 2300 	strex	r3, r2, [r1]
 8003ee2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003ee6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1d9      	bne.n	8003ea2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d013      	beq.n	8003f1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003efa:	4a7d      	ldr	r2, [pc, #500]	; (80040f0 <HAL_UART_IRQHandler+0x3dc>)
 8003efc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fe fbea 	bl	80026dc <HAL_DMA_Abort_IT>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d016      	beq.n	8003f3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f18:	4610      	mov	r0, r2
 8003f1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f1c:	e00e      	b.n	8003f3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f99a 	bl	8004258 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f24:	e00a      	b.n	8003f3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 f996 	bl	8004258 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f2c:	e006      	b.n	8003f3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f992 	bl	8004258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003f3a:	e170      	b.n	800421e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f3c:	bf00      	nop
    return;
 8003f3e:	e16e      	b.n	800421e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	f040 814a 	bne.w	80041de <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f4e:	f003 0310 	and.w	r3, r3, #16
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 8143 	beq.w	80041de <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f5c:	f003 0310 	and.w	r3, r3, #16
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 813c 	beq.w	80041de <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003f66:	2300      	movs	r3, #0
 8003f68:	60bb      	str	r3, [r7, #8]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	60bb      	str	r3, [r7, #8]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	60bb      	str	r3, [r7, #8]
 8003f7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f86:	2b40      	cmp	r3, #64	; 0x40
 8003f88:	f040 80b4 	bne.w	80040f4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	f000 8140 	beq.w	8004222 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fa6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003faa:	429a      	cmp	r2, r3
 8003fac:	f080 8139 	bcs.w	8004222 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fb6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fbc:	69db      	ldr	r3, [r3, #28]
 8003fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003fc2:	f000 8088 	beq.w	80040d6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	330c      	adds	r3, #12
 8003fcc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003fd4:	e853 3f00 	ldrex	r3, [r3]
 8003fd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003fdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003fe0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003fe4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	330c      	adds	r3, #12
 8003fee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003ff2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003ff6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003ffe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004002:	e841 2300 	strex	r3, r2, [r1]
 8004006:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800400a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1d9      	bne.n	8003fc6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	3314      	adds	r3, #20
 8004018:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800401a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800401c:	e853 3f00 	ldrex	r3, [r3]
 8004020:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004022:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004024:	f023 0301 	bic.w	r3, r3, #1
 8004028:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	3314      	adds	r3, #20
 8004032:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004036:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800403a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800403e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004042:	e841 2300 	strex	r3, r2, [r1]
 8004046:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004048:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1e1      	bne.n	8004012 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	3314      	adds	r3, #20
 8004054:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004056:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004058:	e853 3f00 	ldrex	r3, [r3]
 800405c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800405e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004060:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004064:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	3314      	adds	r3, #20
 800406e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004072:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004074:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004076:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004078:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800407a:	e841 2300 	strex	r3, r2, [r1]
 800407e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004080:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1e3      	bne.n	800404e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2220      	movs	r2, #32
 800408a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	330c      	adds	r3, #12
 800409a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800409e:	e853 3f00 	ldrex	r3, [r3]
 80040a2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80040a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040a6:	f023 0310 	bic.w	r3, r3, #16
 80040aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	330c      	adds	r3, #12
 80040b4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80040b8:	65ba      	str	r2, [r7, #88]	; 0x58
 80040ba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040bc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80040c0:	e841 2300 	strex	r3, r2, [r1]
 80040c4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80040c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d1e3      	bne.n	8004094 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d0:	4618      	mov	r0, r3
 80040d2:	f7fe fa93 	bl	80025fc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040de:	b29b      	uxth	r3, r3
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	4619      	mov	r1, r3
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 f8c0 	bl	800426c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040ec:	e099      	b.n	8004222 <HAL_UART_IRQHandler+0x50e>
 80040ee:	bf00      	nop
 80040f0:	08004427 	.word	0x08004427
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004108:	b29b      	uxth	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	f000 808b 	beq.w	8004226 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004110:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 8086 	beq.w	8004226 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	330c      	adds	r3, #12
 8004120:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004124:	e853 3f00 	ldrex	r3, [r3]
 8004128:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800412a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800412c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004130:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	330c      	adds	r3, #12
 800413a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800413e:	647a      	str	r2, [r7, #68]	; 0x44
 8004140:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004142:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004144:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004146:	e841 2300 	strex	r3, r2, [r1]
 800414a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800414c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1e3      	bne.n	800411a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	3314      	adds	r3, #20
 8004158:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415c:	e853 3f00 	ldrex	r3, [r3]
 8004160:	623b      	str	r3, [r7, #32]
   return(result);
 8004162:	6a3b      	ldr	r3, [r7, #32]
 8004164:	f023 0301 	bic.w	r3, r3, #1
 8004168:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3314      	adds	r3, #20
 8004172:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004176:	633a      	str	r2, [r7, #48]	; 0x30
 8004178:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800417c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800417e:	e841 2300 	strex	r3, r2, [r1]
 8004182:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1e3      	bne.n	8004152 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2220      	movs	r2, #32
 800418e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	330c      	adds	r3, #12
 800419e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	e853 3f00 	ldrex	r3, [r3]
 80041a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f023 0310 	bic.w	r3, r3, #16
 80041ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	330c      	adds	r3, #12
 80041b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80041bc:	61fa      	str	r2, [r7, #28]
 80041be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c0:	69b9      	ldr	r1, [r7, #24]
 80041c2:	69fa      	ldr	r2, [r7, #28]
 80041c4:	e841 2300 	strex	r3, r2, [r1]
 80041c8:	617b      	str	r3, [r7, #20]
   return(result);
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1e3      	bne.n	8004198 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80041d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80041d4:	4619      	mov	r1, r3
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f848 	bl	800426c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041dc:	e023      	b.n	8004226 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80041de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d009      	beq.n	80041fe <HAL_UART_IRQHandler+0x4ea>
 80041ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f929 	bl	800444e <UART_Transmit_IT>
    return;
 80041fc:	e014      	b.n	8004228 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80041fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004202:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004206:	2b00      	cmp	r3, #0
 8004208:	d00e      	beq.n	8004228 <HAL_UART_IRQHandler+0x514>
 800420a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800420e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004212:	2b00      	cmp	r3, #0
 8004214:	d008      	beq.n	8004228 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f969 	bl	80044ee <UART_EndTransmit_IT>
    return;
 800421c:	e004      	b.n	8004228 <HAL_UART_IRQHandler+0x514>
    return;
 800421e:	bf00      	nop
 8004220:	e002      	b.n	8004228 <HAL_UART_IRQHandler+0x514>
      return;
 8004222:	bf00      	nop
 8004224:	e000      	b.n	8004228 <HAL_UART_IRQHandler+0x514>
      return;
 8004226:	bf00      	nop
  }
}
 8004228:	37e8      	adds	r7, #232	; 0xe8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop

08004230 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	460b      	mov	r3, r1
 8004276:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b090      	sub	sp, #64	; 0x40
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	603b      	str	r3, [r7, #0]
 8004290:	4613      	mov	r3, r2
 8004292:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004294:	e050      	b.n	8004338 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429c:	d04c      	beq.n	8004338 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800429e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d007      	beq.n	80042b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80042a4:	f7fd fb6e 	bl	8001984 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d241      	bcs.n	8004338 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	330c      	adds	r3, #12
 80042ba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042be:	e853 3f00 	ldrex	r3, [r3]
 80042c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80042ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	330c      	adds	r3, #12
 80042d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80042d4:	637a      	str	r2, [r7, #52]	; 0x34
 80042d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80042da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042dc:	e841 2300 	strex	r3, r2, [r1]
 80042e0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80042e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1e5      	bne.n	80042b4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	3314      	adds	r3, #20
 80042ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	e853 3f00 	ldrex	r3, [r3]
 80042f6:	613b      	str	r3, [r7, #16]
   return(result);
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	f023 0301 	bic.w	r3, r3, #1
 80042fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	3314      	adds	r3, #20
 8004306:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004308:	623a      	str	r2, [r7, #32]
 800430a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800430c:	69f9      	ldr	r1, [r7, #28]
 800430e:	6a3a      	ldr	r2, [r7, #32]
 8004310:	e841 2300 	strex	r3, r2, [r1]
 8004314:	61bb      	str	r3, [r7, #24]
   return(result);
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d1e5      	bne.n	80042e8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2220      	movs	r2, #32
 8004320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2220      	movs	r2, #32
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2200      	movs	r2, #0
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004334:	2303      	movs	r3, #3
 8004336:	e00f      	b.n	8004358 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	4013      	ands	r3, r2
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	429a      	cmp	r2, r3
 8004346:	bf0c      	ite	eq
 8004348:	2301      	moveq	r3, #1
 800434a:	2300      	movne	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	461a      	mov	r2, r3
 8004350:	79fb      	ldrb	r3, [r7, #7]
 8004352:	429a      	cmp	r2, r3
 8004354:	d09f      	beq.n	8004296 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004356:	2300      	movs	r3, #0
}
 8004358:	4618      	mov	r0, r3
 800435a:	3740      	adds	r7, #64	; 0x40
 800435c:	46bd      	mov	sp, r7
 800435e:	bd80      	pop	{r7, pc}

08004360 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004360:	b480      	push	{r7}
 8004362:	b095      	sub	sp, #84	; 0x54
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	330c      	adds	r3, #12
 800436e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004372:	e853 3f00 	ldrex	r3, [r3]
 8004376:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800437e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	330c      	adds	r3, #12
 8004386:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004388:	643a      	str	r2, [r7, #64]	; 0x40
 800438a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800438e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004390:	e841 2300 	strex	r3, r2, [r1]
 8004394:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1e5      	bne.n	8004368 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3314      	adds	r3, #20
 80043a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	e853 3f00 	ldrex	r3, [r3]
 80043aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	f023 0301 	bic.w	r3, r3, #1
 80043b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	3314      	adds	r3, #20
 80043ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043c4:	e841 2300 	strex	r3, r2, [r1]
 80043c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1e5      	bne.n	800439c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d119      	bne.n	800440c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	330c      	adds	r3, #12
 80043de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	e853 3f00 	ldrex	r3, [r3]
 80043e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80043e8:	68bb      	ldr	r3, [r7, #8]
 80043ea:	f023 0310 	bic.w	r3, r3, #16
 80043ee:	647b      	str	r3, [r7, #68]	; 0x44
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	330c      	adds	r3, #12
 80043f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043f8:	61ba      	str	r2, [r7, #24]
 80043fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fc:	6979      	ldr	r1, [r7, #20]
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	e841 2300 	strex	r3, r2, [r1]
 8004404:	613b      	str	r3, [r7, #16]
   return(result);
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1e5      	bne.n	80043d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2220      	movs	r2, #32
 8004410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	631a      	str	r2, [r3, #48]	; 0x30
}
 800441a:	bf00      	nop
 800441c:	3754      	adds	r7, #84	; 0x54
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b084      	sub	sp, #16
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004432:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f7ff ff09 	bl	8004258 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004446:	bf00      	nop
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800444e:	b480      	push	{r7}
 8004450:	b085      	sub	sp, #20
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b21      	cmp	r3, #33	; 0x21
 8004460:	d13e      	bne.n	80044e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800446a:	d114      	bne.n	8004496 <UART_Transmit_IT+0x48>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	691b      	ldr	r3, [r3, #16]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d110      	bne.n	8004496 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6a1b      	ldr	r3, [r3, #32]
 8004478:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	881b      	ldrh	r3, [r3, #0]
 800447e:	461a      	mov	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004488:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	1c9a      	adds	r2, r3, #2
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	621a      	str	r2, [r3, #32]
 8004494:	e008      	b.n	80044a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	1c59      	adds	r1, r3, #1
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6211      	str	r1, [r2, #32]
 80044a0:	781a      	ldrb	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044ac:	b29b      	uxth	r3, r3
 80044ae:	3b01      	subs	r3, #1
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	4619      	mov	r1, r3
 80044b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d10f      	bne.n	80044dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68da      	ldr	r2, [r3, #12]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68da      	ldr	r2, [r3, #12]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80044da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80044dc:	2300      	movs	r3, #0
 80044de:	e000      	b.n	80044e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80044e0:	2302      	movs	r3, #2
  }
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3714      	adds	r7, #20
 80044e6:	46bd      	mov	sp, r7
 80044e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ec:	4770      	bx	lr

080044ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b082      	sub	sp, #8
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68da      	ldr	r2, [r3, #12]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004504:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2220      	movs	r2, #32
 800450a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f7ff fe8e 	bl	8004230 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b08c      	sub	sp, #48	; 0x30
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800452c:	b2db      	uxtb	r3, r3
 800452e:	2b22      	cmp	r3, #34	; 0x22
 8004530:	f040 80ab 	bne.w	800468a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	689b      	ldr	r3, [r3, #8]
 8004538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800453c:	d117      	bne.n	800456e <UART_Receive_IT+0x50>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	691b      	ldr	r3, [r3, #16]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d113      	bne.n	800456e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004546:	2300      	movs	r3, #0
 8004548:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800454e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	b29b      	uxth	r3, r3
 8004558:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800455c:	b29a      	uxth	r2, r3
 800455e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004560:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004566:	1c9a      	adds	r2, r3, #2
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	629a      	str	r2, [r3, #40]	; 0x28
 800456c:	e026      	b.n	80045bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004572:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004574:	2300      	movs	r3, #0
 8004576:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004580:	d007      	beq.n	8004592 <UART_Receive_IT+0x74>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	689b      	ldr	r3, [r3, #8]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10a      	bne.n	80045a0 <UART_Receive_IT+0x82>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	b2da      	uxtb	r2, r3
 800459a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459c:	701a      	strb	r2, [r3, #0]
 800459e:	e008      	b.n	80045b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045ac:	b2da      	uxtb	r2, r3
 80045ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b6:	1c5a      	adds	r2, r3, #1
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045c0:	b29b      	uxth	r3, r3
 80045c2:	3b01      	subs	r3, #1
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	4619      	mov	r1, r3
 80045ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d15a      	bne.n	8004686 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	68da      	ldr	r2, [r3, #12]
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f022 0220 	bic.w	r2, r2, #32
 80045de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68da      	ldr	r2, [r3, #12]
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	695a      	ldr	r2, [r3, #20]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0201 	bic.w	r2, r2, #1
 80045fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2220      	movs	r2, #32
 8004604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460c:	2b01      	cmp	r3, #1
 800460e:	d135      	bne.n	800467c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2200      	movs	r2, #0
 8004614:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	330c      	adds	r3, #12
 800461c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	e853 3f00 	ldrex	r3, [r3]
 8004624:	613b      	str	r3, [r7, #16]
   return(result);
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	f023 0310 	bic.w	r3, r3, #16
 800462c:	627b      	str	r3, [r7, #36]	; 0x24
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	330c      	adds	r3, #12
 8004634:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004636:	623a      	str	r2, [r7, #32]
 8004638:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800463a:	69f9      	ldr	r1, [r7, #28]
 800463c:	6a3a      	ldr	r2, [r7, #32]
 800463e:	e841 2300 	strex	r3, r2, [r1]
 8004642:	61bb      	str	r3, [r7, #24]
   return(result);
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d1e5      	bne.n	8004616 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0310 	and.w	r3, r3, #16
 8004654:	2b10      	cmp	r3, #16
 8004656:	d10a      	bne.n	800466e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004658:	2300      	movs	r3, #0
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	60fb      	str	r3, [r7, #12]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	60fb      	str	r3, [r7, #12]
 800466c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004672:	4619      	mov	r1, r3
 8004674:	6878      	ldr	r0, [r7, #4]
 8004676:	f7ff fdf9 	bl	800426c <HAL_UARTEx_RxEventCallback>
 800467a:	e002      	b.n	8004682 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f7ff fde1 	bl	8004244 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	e002      	b.n	800468c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8004686:	2300      	movs	r3, #0
 8004688:	e000      	b.n	800468c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800468a:	2302      	movs	r3, #2
  }
}
 800468c:	4618      	mov	r0, r3
 800468e:	3730      	adds	r7, #48	; 0x30
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004698:	b0c0      	sub	sp, #256	; 0x100
 800469a:	af00      	add	r7, sp, #0
 800469c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b0:	68d9      	ldr	r1, [r3, #12]
 80046b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b6:	681a      	ldr	r2, [r3, #0]
 80046b8:	ea40 0301 	orr.w	r3, r0, r1
 80046bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	431a      	orrs	r2, r3
 80046cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	431a      	orrs	r2, r3
 80046d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d8:	69db      	ldr	r3, [r3, #28]
 80046da:	4313      	orrs	r3, r2
 80046dc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80046e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	68db      	ldr	r3, [r3, #12]
 80046e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80046ec:	f021 010c 	bic.w	r1, r1, #12
 80046f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f4:	681a      	ldr	r2, [r3, #0]
 80046f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80046fa:	430b      	orrs	r3, r1
 80046fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800470a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800470e:	6999      	ldr	r1, [r3, #24]
 8004710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	ea40 0301 	orr.w	r3, r0, r1
 800471a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800471c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	4b8f      	ldr	r3, [pc, #572]	; (8004960 <UART_SetConfig+0x2cc>)
 8004724:	429a      	cmp	r2, r3
 8004726:	d005      	beq.n	8004734 <UART_SetConfig+0xa0>
 8004728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	4b8d      	ldr	r3, [pc, #564]	; (8004964 <UART_SetConfig+0x2d0>)
 8004730:	429a      	cmp	r2, r3
 8004732:	d104      	bne.n	800473e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004734:	f7fe fd2c 	bl	8003190 <HAL_RCC_GetPCLK2Freq>
 8004738:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800473c:	e003      	b.n	8004746 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800473e:	f7fe fd13 	bl	8003168 <HAL_RCC_GetPCLK1Freq>
 8004742:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800474a:	69db      	ldr	r3, [r3, #28]
 800474c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004750:	f040 810c 	bne.w	800496c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004754:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004758:	2200      	movs	r2, #0
 800475a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800475e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004762:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004766:	4622      	mov	r2, r4
 8004768:	462b      	mov	r3, r5
 800476a:	1891      	adds	r1, r2, r2
 800476c:	65b9      	str	r1, [r7, #88]	; 0x58
 800476e:	415b      	adcs	r3, r3
 8004770:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004772:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004776:	4621      	mov	r1, r4
 8004778:	eb12 0801 	adds.w	r8, r2, r1
 800477c:	4629      	mov	r1, r5
 800477e:	eb43 0901 	adc.w	r9, r3, r1
 8004782:	f04f 0200 	mov.w	r2, #0
 8004786:	f04f 0300 	mov.w	r3, #0
 800478a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800478e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004792:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004796:	4690      	mov	r8, r2
 8004798:	4699      	mov	r9, r3
 800479a:	4623      	mov	r3, r4
 800479c:	eb18 0303 	adds.w	r3, r8, r3
 80047a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047a4:	462b      	mov	r3, r5
 80047a6:	eb49 0303 	adc.w	r3, r9, r3
 80047aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80047ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047ba:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80047be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80047c2:	460b      	mov	r3, r1
 80047c4:	18db      	adds	r3, r3, r3
 80047c6:	653b      	str	r3, [r7, #80]	; 0x50
 80047c8:	4613      	mov	r3, r2
 80047ca:	eb42 0303 	adc.w	r3, r2, r3
 80047ce:	657b      	str	r3, [r7, #84]	; 0x54
 80047d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80047d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80047d8:	f7fc fa76 	bl	8000cc8 <__aeabi_uldivmod>
 80047dc:	4602      	mov	r2, r0
 80047de:	460b      	mov	r3, r1
 80047e0:	4b61      	ldr	r3, [pc, #388]	; (8004968 <UART_SetConfig+0x2d4>)
 80047e2:	fba3 2302 	umull	r2, r3, r3, r2
 80047e6:	095b      	lsrs	r3, r3, #5
 80047e8:	011c      	lsls	r4, r3, #4
 80047ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047ee:	2200      	movs	r2, #0
 80047f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047f4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80047f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80047fc:	4642      	mov	r2, r8
 80047fe:	464b      	mov	r3, r9
 8004800:	1891      	adds	r1, r2, r2
 8004802:	64b9      	str	r1, [r7, #72]	; 0x48
 8004804:	415b      	adcs	r3, r3
 8004806:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004808:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800480c:	4641      	mov	r1, r8
 800480e:	eb12 0a01 	adds.w	sl, r2, r1
 8004812:	4649      	mov	r1, r9
 8004814:	eb43 0b01 	adc.w	fp, r3, r1
 8004818:	f04f 0200 	mov.w	r2, #0
 800481c:	f04f 0300 	mov.w	r3, #0
 8004820:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004824:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004828:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800482c:	4692      	mov	sl, r2
 800482e:	469b      	mov	fp, r3
 8004830:	4643      	mov	r3, r8
 8004832:	eb1a 0303 	adds.w	r3, sl, r3
 8004836:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800483a:	464b      	mov	r3, r9
 800483c:	eb4b 0303 	adc.w	r3, fp, r3
 8004840:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004850:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004854:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004858:	460b      	mov	r3, r1
 800485a:	18db      	adds	r3, r3, r3
 800485c:	643b      	str	r3, [r7, #64]	; 0x40
 800485e:	4613      	mov	r3, r2
 8004860:	eb42 0303 	adc.w	r3, r2, r3
 8004864:	647b      	str	r3, [r7, #68]	; 0x44
 8004866:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800486a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800486e:	f7fc fa2b 	bl	8000cc8 <__aeabi_uldivmod>
 8004872:	4602      	mov	r2, r0
 8004874:	460b      	mov	r3, r1
 8004876:	4611      	mov	r1, r2
 8004878:	4b3b      	ldr	r3, [pc, #236]	; (8004968 <UART_SetConfig+0x2d4>)
 800487a:	fba3 2301 	umull	r2, r3, r3, r1
 800487e:	095b      	lsrs	r3, r3, #5
 8004880:	2264      	movs	r2, #100	; 0x64
 8004882:	fb02 f303 	mul.w	r3, r2, r3
 8004886:	1acb      	subs	r3, r1, r3
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800488e:	4b36      	ldr	r3, [pc, #216]	; (8004968 <UART_SetConfig+0x2d4>)
 8004890:	fba3 2302 	umull	r2, r3, r3, r2
 8004894:	095b      	lsrs	r3, r3, #5
 8004896:	005b      	lsls	r3, r3, #1
 8004898:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800489c:	441c      	add	r4, r3
 800489e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048a2:	2200      	movs	r2, #0
 80048a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048a8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80048ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80048b0:	4642      	mov	r2, r8
 80048b2:	464b      	mov	r3, r9
 80048b4:	1891      	adds	r1, r2, r2
 80048b6:	63b9      	str	r1, [r7, #56]	; 0x38
 80048b8:	415b      	adcs	r3, r3
 80048ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80048c0:	4641      	mov	r1, r8
 80048c2:	1851      	adds	r1, r2, r1
 80048c4:	6339      	str	r1, [r7, #48]	; 0x30
 80048c6:	4649      	mov	r1, r9
 80048c8:	414b      	adcs	r3, r1
 80048ca:	637b      	str	r3, [r7, #52]	; 0x34
 80048cc:	f04f 0200 	mov.w	r2, #0
 80048d0:	f04f 0300 	mov.w	r3, #0
 80048d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80048d8:	4659      	mov	r1, fp
 80048da:	00cb      	lsls	r3, r1, #3
 80048dc:	4651      	mov	r1, sl
 80048de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048e2:	4651      	mov	r1, sl
 80048e4:	00ca      	lsls	r2, r1, #3
 80048e6:	4610      	mov	r0, r2
 80048e8:	4619      	mov	r1, r3
 80048ea:	4603      	mov	r3, r0
 80048ec:	4642      	mov	r2, r8
 80048ee:	189b      	adds	r3, r3, r2
 80048f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048f4:	464b      	mov	r3, r9
 80048f6:	460a      	mov	r2, r1
 80048f8:	eb42 0303 	adc.w	r3, r2, r3
 80048fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004904:	685b      	ldr	r3, [r3, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800490c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004910:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004914:	460b      	mov	r3, r1
 8004916:	18db      	adds	r3, r3, r3
 8004918:	62bb      	str	r3, [r7, #40]	; 0x28
 800491a:	4613      	mov	r3, r2
 800491c:	eb42 0303 	adc.w	r3, r2, r3
 8004920:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004922:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004926:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800492a:	f7fc f9cd 	bl	8000cc8 <__aeabi_uldivmod>
 800492e:	4602      	mov	r2, r0
 8004930:	460b      	mov	r3, r1
 8004932:	4b0d      	ldr	r3, [pc, #52]	; (8004968 <UART_SetConfig+0x2d4>)
 8004934:	fba3 1302 	umull	r1, r3, r3, r2
 8004938:	095b      	lsrs	r3, r3, #5
 800493a:	2164      	movs	r1, #100	; 0x64
 800493c:	fb01 f303 	mul.w	r3, r1, r3
 8004940:	1ad3      	subs	r3, r2, r3
 8004942:	00db      	lsls	r3, r3, #3
 8004944:	3332      	adds	r3, #50	; 0x32
 8004946:	4a08      	ldr	r2, [pc, #32]	; (8004968 <UART_SetConfig+0x2d4>)
 8004948:	fba2 2303 	umull	r2, r3, r2, r3
 800494c:	095b      	lsrs	r3, r3, #5
 800494e:	f003 0207 	and.w	r2, r3, #7
 8004952:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4422      	add	r2, r4
 800495a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800495c:	e105      	b.n	8004b6a <UART_SetConfig+0x4d6>
 800495e:	bf00      	nop
 8004960:	40011000 	.word	0x40011000
 8004964:	40011400 	.word	0x40011400
 8004968:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800496c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004970:	2200      	movs	r2, #0
 8004972:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004976:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800497a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800497e:	4642      	mov	r2, r8
 8004980:	464b      	mov	r3, r9
 8004982:	1891      	adds	r1, r2, r2
 8004984:	6239      	str	r1, [r7, #32]
 8004986:	415b      	adcs	r3, r3
 8004988:	627b      	str	r3, [r7, #36]	; 0x24
 800498a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800498e:	4641      	mov	r1, r8
 8004990:	1854      	adds	r4, r2, r1
 8004992:	4649      	mov	r1, r9
 8004994:	eb43 0501 	adc.w	r5, r3, r1
 8004998:	f04f 0200 	mov.w	r2, #0
 800499c:	f04f 0300 	mov.w	r3, #0
 80049a0:	00eb      	lsls	r3, r5, #3
 80049a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049a6:	00e2      	lsls	r2, r4, #3
 80049a8:	4614      	mov	r4, r2
 80049aa:	461d      	mov	r5, r3
 80049ac:	4643      	mov	r3, r8
 80049ae:	18e3      	adds	r3, r4, r3
 80049b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049b4:	464b      	mov	r3, r9
 80049b6:	eb45 0303 	adc.w	r3, r5, r3
 80049ba:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80049be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80049ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80049ce:	f04f 0200 	mov.w	r2, #0
 80049d2:	f04f 0300 	mov.w	r3, #0
 80049d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80049da:	4629      	mov	r1, r5
 80049dc:	008b      	lsls	r3, r1, #2
 80049de:	4621      	mov	r1, r4
 80049e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049e4:	4621      	mov	r1, r4
 80049e6:	008a      	lsls	r2, r1, #2
 80049e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80049ec:	f7fc f96c 	bl	8000cc8 <__aeabi_uldivmod>
 80049f0:	4602      	mov	r2, r0
 80049f2:	460b      	mov	r3, r1
 80049f4:	4b60      	ldr	r3, [pc, #384]	; (8004b78 <UART_SetConfig+0x4e4>)
 80049f6:	fba3 2302 	umull	r2, r3, r3, r2
 80049fa:	095b      	lsrs	r3, r3, #5
 80049fc:	011c      	lsls	r4, r3, #4
 80049fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a02:	2200      	movs	r2, #0
 8004a04:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a08:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a10:	4642      	mov	r2, r8
 8004a12:	464b      	mov	r3, r9
 8004a14:	1891      	adds	r1, r2, r2
 8004a16:	61b9      	str	r1, [r7, #24]
 8004a18:	415b      	adcs	r3, r3
 8004a1a:	61fb      	str	r3, [r7, #28]
 8004a1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a20:	4641      	mov	r1, r8
 8004a22:	1851      	adds	r1, r2, r1
 8004a24:	6139      	str	r1, [r7, #16]
 8004a26:	4649      	mov	r1, r9
 8004a28:	414b      	adcs	r3, r1
 8004a2a:	617b      	str	r3, [r7, #20]
 8004a2c:	f04f 0200 	mov.w	r2, #0
 8004a30:	f04f 0300 	mov.w	r3, #0
 8004a34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a38:	4659      	mov	r1, fp
 8004a3a:	00cb      	lsls	r3, r1, #3
 8004a3c:	4651      	mov	r1, sl
 8004a3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a42:	4651      	mov	r1, sl
 8004a44:	00ca      	lsls	r2, r1, #3
 8004a46:	4610      	mov	r0, r2
 8004a48:	4619      	mov	r1, r3
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	4642      	mov	r2, r8
 8004a4e:	189b      	adds	r3, r3, r2
 8004a50:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a54:	464b      	mov	r3, r9
 8004a56:	460a      	mov	r2, r1
 8004a58:	eb42 0303 	adc.w	r3, r2, r3
 8004a5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a6a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a78:	4649      	mov	r1, r9
 8004a7a:	008b      	lsls	r3, r1, #2
 8004a7c:	4641      	mov	r1, r8
 8004a7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a82:	4641      	mov	r1, r8
 8004a84:	008a      	lsls	r2, r1, #2
 8004a86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a8a:	f7fc f91d 	bl	8000cc8 <__aeabi_uldivmod>
 8004a8e:	4602      	mov	r2, r0
 8004a90:	460b      	mov	r3, r1
 8004a92:	4b39      	ldr	r3, [pc, #228]	; (8004b78 <UART_SetConfig+0x4e4>)
 8004a94:	fba3 1302 	umull	r1, r3, r3, r2
 8004a98:	095b      	lsrs	r3, r3, #5
 8004a9a:	2164      	movs	r1, #100	; 0x64
 8004a9c:	fb01 f303 	mul.w	r3, r1, r3
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	011b      	lsls	r3, r3, #4
 8004aa4:	3332      	adds	r3, #50	; 0x32
 8004aa6:	4a34      	ldr	r2, [pc, #208]	; (8004b78 <UART_SetConfig+0x4e4>)
 8004aa8:	fba2 2303 	umull	r2, r3, r2, r3
 8004aac:	095b      	lsrs	r3, r3, #5
 8004aae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ab2:	441c      	add	r4, r3
 8004ab4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ab8:	2200      	movs	r2, #0
 8004aba:	673b      	str	r3, [r7, #112]	; 0x70
 8004abc:	677a      	str	r2, [r7, #116]	; 0x74
 8004abe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004ac2:	4642      	mov	r2, r8
 8004ac4:	464b      	mov	r3, r9
 8004ac6:	1891      	adds	r1, r2, r2
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	415b      	adcs	r3, r3
 8004acc:	60fb      	str	r3, [r7, #12]
 8004ace:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ad2:	4641      	mov	r1, r8
 8004ad4:	1851      	adds	r1, r2, r1
 8004ad6:	6039      	str	r1, [r7, #0]
 8004ad8:	4649      	mov	r1, r9
 8004ada:	414b      	adcs	r3, r1
 8004adc:	607b      	str	r3, [r7, #4]
 8004ade:	f04f 0200 	mov.w	r2, #0
 8004ae2:	f04f 0300 	mov.w	r3, #0
 8004ae6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004aea:	4659      	mov	r1, fp
 8004aec:	00cb      	lsls	r3, r1, #3
 8004aee:	4651      	mov	r1, sl
 8004af0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004af4:	4651      	mov	r1, sl
 8004af6:	00ca      	lsls	r2, r1, #3
 8004af8:	4610      	mov	r0, r2
 8004afa:	4619      	mov	r1, r3
 8004afc:	4603      	mov	r3, r0
 8004afe:	4642      	mov	r2, r8
 8004b00:	189b      	adds	r3, r3, r2
 8004b02:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b04:	464b      	mov	r3, r9
 8004b06:	460a      	mov	r2, r1
 8004b08:	eb42 0303 	adc.w	r3, r2, r3
 8004b0c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b12:	685b      	ldr	r3, [r3, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	663b      	str	r3, [r7, #96]	; 0x60
 8004b18:	667a      	str	r2, [r7, #100]	; 0x64
 8004b1a:	f04f 0200 	mov.w	r2, #0
 8004b1e:	f04f 0300 	mov.w	r3, #0
 8004b22:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b26:	4649      	mov	r1, r9
 8004b28:	008b      	lsls	r3, r1, #2
 8004b2a:	4641      	mov	r1, r8
 8004b2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b30:	4641      	mov	r1, r8
 8004b32:	008a      	lsls	r2, r1, #2
 8004b34:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b38:	f7fc f8c6 	bl	8000cc8 <__aeabi_uldivmod>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	460b      	mov	r3, r1
 8004b40:	4b0d      	ldr	r3, [pc, #52]	; (8004b78 <UART_SetConfig+0x4e4>)
 8004b42:	fba3 1302 	umull	r1, r3, r3, r2
 8004b46:	095b      	lsrs	r3, r3, #5
 8004b48:	2164      	movs	r1, #100	; 0x64
 8004b4a:	fb01 f303 	mul.w	r3, r1, r3
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	011b      	lsls	r3, r3, #4
 8004b52:	3332      	adds	r3, #50	; 0x32
 8004b54:	4a08      	ldr	r2, [pc, #32]	; (8004b78 <UART_SetConfig+0x4e4>)
 8004b56:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5a:	095b      	lsrs	r3, r3, #5
 8004b5c:	f003 020f 	and.w	r2, r3, #15
 8004b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4422      	add	r2, r4
 8004b68:	609a      	str	r2, [r3, #8]
}
 8004b6a:	bf00      	nop
 8004b6c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004b70:	46bd      	mov	sp, r7
 8004b72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b76:	bf00      	nop
 8004b78:	51eb851f 	.word	0x51eb851f

08004b7c <__errno>:
 8004b7c:	4b01      	ldr	r3, [pc, #4]	; (8004b84 <__errno+0x8>)
 8004b7e:	6818      	ldr	r0, [r3, #0]
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	2000000c 	.word	0x2000000c

08004b88 <__libc_init_array>:
 8004b88:	b570      	push	{r4, r5, r6, lr}
 8004b8a:	4d0d      	ldr	r5, [pc, #52]	; (8004bc0 <__libc_init_array+0x38>)
 8004b8c:	4c0d      	ldr	r4, [pc, #52]	; (8004bc4 <__libc_init_array+0x3c>)
 8004b8e:	1b64      	subs	r4, r4, r5
 8004b90:	10a4      	asrs	r4, r4, #2
 8004b92:	2600      	movs	r6, #0
 8004b94:	42a6      	cmp	r6, r4
 8004b96:	d109      	bne.n	8004bac <__libc_init_array+0x24>
 8004b98:	4d0b      	ldr	r5, [pc, #44]	; (8004bc8 <__libc_init_array+0x40>)
 8004b9a:	4c0c      	ldr	r4, [pc, #48]	; (8004bcc <__libc_init_array+0x44>)
 8004b9c:	f004 fc90 	bl	80094c0 <_init>
 8004ba0:	1b64      	subs	r4, r4, r5
 8004ba2:	10a4      	asrs	r4, r4, #2
 8004ba4:	2600      	movs	r6, #0
 8004ba6:	42a6      	cmp	r6, r4
 8004ba8:	d105      	bne.n	8004bb6 <__libc_init_array+0x2e>
 8004baa:	bd70      	pop	{r4, r5, r6, pc}
 8004bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bb0:	4798      	blx	r3
 8004bb2:	3601      	adds	r6, #1
 8004bb4:	e7ee      	b.n	8004b94 <__libc_init_array+0xc>
 8004bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bba:	4798      	blx	r3
 8004bbc:	3601      	adds	r6, #1
 8004bbe:	e7f2      	b.n	8004ba6 <__libc_init_array+0x1e>
 8004bc0:	080099b4 	.word	0x080099b4
 8004bc4:	080099b4 	.word	0x080099b4
 8004bc8:	080099b4 	.word	0x080099b4
 8004bcc:	080099b8 	.word	0x080099b8

08004bd0 <memset>:
 8004bd0:	4402      	add	r2, r0
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d100      	bne.n	8004bda <memset+0xa>
 8004bd8:	4770      	bx	lr
 8004bda:	f803 1b01 	strb.w	r1, [r3], #1
 8004bde:	e7f9      	b.n	8004bd4 <memset+0x4>

08004be0 <__cvt>:
 8004be0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004be4:	ec55 4b10 	vmov	r4, r5, d0
 8004be8:	2d00      	cmp	r5, #0
 8004bea:	460e      	mov	r6, r1
 8004bec:	4619      	mov	r1, r3
 8004bee:	462b      	mov	r3, r5
 8004bf0:	bfbb      	ittet	lt
 8004bf2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004bf6:	461d      	movlt	r5, r3
 8004bf8:	2300      	movge	r3, #0
 8004bfa:	232d      	movlt	r3, #45	; 0x2d
 8004bfc:	700b      	strb	r3, [r1, #0]
 8004bfe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c00:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004c04:	4691      	mov	r9, r2
 8004c06:	f023 0820 	bic.w	r8, r3, #32
 8004c0a:	bfbc      	itt	lt
 8004c0c:	4622      	movlt	r2, r4
 8004c0e:	4614      	movlt	r4, r2
 8004c10:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c14:	d005      	beq.n	8004c22 <__cvt+0x42>
 8004c16:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004c1a:	d100      	bne.n	8004c1e <__cvt+0x3e>
 8004c1c:	3601      	adds	r6, #1
 8004c1e:	2102      	movs	r1, #2
 8004c20:	e000      	b.n	8004c24 <__cvt+0x44>
 8004c22:	2103      	movs	r1, #3
 8004c24:	ab03      	add	r3, sp, #12
 8004c26:	9301      	str	r3, [sp, #4]
 8004c28:	ab02      	add	r3, sp, #8
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	ec45 4b10 	vmov	d0, r4, r5
 8004c30:	4653      	mov	r3, sl
 8004c32:	4632      	mov	r2, r6
 8004c34:	f001 fdac 	bl	8006790 <_dtoa_r>
 8004c38:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004c3c:	4607      	mov	r7, r0
 8004c3e:	d102      	bne.n	8004c46 <__cvt+0x66>
 8004c40:	f019 0f01 	tst.w	r9, #1
 8004c44:	d022      	beq.n	8004c8c <__cvt+0xac>
 8004c46:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c4a:	eb07 0906 	add.w	r9, r7, r6
 8004c4e:	d110      	bne.n	8004c72 <__cvt+0x92>
 8004c50:	783b      	ldrb	r3, [r7, #0]
 8004c52:	2b30      	cmp	r3, #48	; 0x30
 8004c54:	d10a      	bne.n	8004c6c <__cvt+0x8c>
 8004c56:	2200      	movs	r2, #0
 8004c58:	2300      	movs	r3, #0
 8004c5a:	4620      	mov	r0, r4
 8004c5c:	4629      	mov	r1, r5
 8004c5e:	f7fb ff53 	bl	8000b08 <__aeabi_dcmpeq>
 8004c62:	b918      	cbnz	r0, 8004c6c <__cvt+0x8c>
 8004c64:	f1c6 0601 	rsb	r6, r6, #1
 8004c68:	f8ca 6000 	str.w	r6, [sl]
 8004c6c:	f8da 3000 	ldr.w	r3, [sl]
 8004c70:	4499      	add	r9, r3
 8004c72:	2200      	movs	r2, #0
 8004c74:	2300      	movs	r3, #0
 8004c76:	4620      	mov	r0, r4
 8004c78:	4629      	mov	r1, r5
 8004c7a:	f7fb ff45 	bl	8000b08 <__aeabi_dcmpeq>
 8004c7e:	b108      	cbz	r0, 8004c84 <__cvt+0xa4>
 8004c80:	f8cd 900c 	str.w	r9, [sp, #12]
 8004c84:	2230      	movs	r2, #48	; 0x30
 8004c86:	9b03      	ldr	r3, [sp, #12]
 8004c88:	454b      	cmp	r3, r9
 8004c8a:	d307      	bcc.n	8004c9c <__cvt+0xbc>
 8004c8c:	9b03      	ldr	r3, [sp, #12]
 8004c8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004c90:	1bdb      	subs	r3, r3, r7
 8004c92:	4638      	mov	r0, r7
 8004c94:	6013      	str	r3, [r2, #0]
 8004c96:	b004      	add	sp, #16
 8004c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c9c:	1c59      	adds	r1, r3, #1
 8004c9e:	9103      	str	r1, [sp, #12]
 8004ca0:	701a      	strb	r2, [r3, #0]
 8004ca2:	e7f0      	b.n	8004c86 <__cvt+0xa6>

08004ca4 <__exponent>:
 8004ca4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2900      	cmp	r1, #0
 8004caa:	bfb8      	it	lt
 8004cac:	4249      	neglt	r1, r1
 8004cae:	f803 2b02 	strb.w	r2, [r3], #2
 8004cb2:	bfb4      	ite	lt
 8004cb4:	222d      	movlt	r2, #45	; 0x2d
 8004cb6:	222b      	movge	r2, #43	; 0x2b
 8004cb8:	2909      	cmp	r1, #9
 8004cba:	7042      	strb	r2, [r0, #1]
 8004cbc:	dd2a      	ble.n	8004d14 <__exponent+0x70>
 8004cbe:	f10d 0407 	add.w	r4, sp, #7
 8004cc2:	46a4      	mov	ip, r4
 8004cc4:	270a      	movs	r7, #10
 8004cc6:	46a6      	mov	lr, r4
 8004cc8:	460a      	mov	r2, r1
 8004cca:	fb91 f6f7 	sdiv	r6, r1, r7
 8004cce:	fb07 1516 	mls	r5, r7, r6, r1
 8004cd2:	3530      	adds	r5, #48	; 0x30
 8004cd4:	2a63      	cmp	r2, #99	; 0x63
 8004cd6:	f104 34ff 	add.w	r4, r4, #4294967295
 8004cda:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004cde:	4631      	mov	r1, r6
 8004ce0:	dcf1      	bgt.n	8004cc6 <__exponent+0x22>
 8004ce2:	3130      	adds	r1, #48	; 0x30
 8004ce4:	f1ae 0502 	sub.w	r5, lr, #2
 8004ce8:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004cec:	1c44      	adds	r4, r0, #1
 8004cee:	4629      	mov	r1, r5
 8004cf0:	4561      	cmp	r1, ip
 8004cf2:	d30a      	bcc.n	8004d0a <__exponent+0x66>
 8004cf4:	f10d 0209 	add.w	r2, sp, #9
 8004cf8:	eba2 020e 	sub.w	r2, r2, lr
 8004cfc:	4565      	cmp	r5, ip
 8004cfe:	bf88      	it	hi
 8004d00:	2200      	movhi	r2, #0
 8004d02:	4413      	add	r3, r2
 8004d04:	1a18      	subs	r0, r3, r0
 8004d06:	b003      	add	sp, #12
 8004d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d0e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004d12:	e7ed      	b.n	8004cf0 <__exponent+0x4c>
 8004d14:	2330      	movs	r3, #48	; 0x30
 8004d16:	3130      	adds	r1, #48	; 0x30
 8004d18:	7083      	strb	r3, [r0, #2]
 8004d1a:	70c1      	strb	r1, [r0, #3]
 8004d1c:	1d03      	adds	r3, r0, #4
 8004d1e:	e7f1      	b.n	8004d04 <__exponent+0x60>

08004d20 <_printf_float>:
 8004d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d24:	ed2d 8b02 	vpush	{d8}
 8004d28:	b08d      	sub	sp, #52	; 0x34
 8004d2a:	460c      	mov	r4, r1
 8004d2c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004d30:	4616      	mov	r6, r2
 8004d32:	461f      	mov	r7, r3
 8004d34:	4605      	mov	r5, r0
 8004d36:	f002 fe89 	bl	8007a4c <_localeconv_r>
 8004d3a:	f8d0 a000 	ldr.w	sl, [r0]
 8004d3e:	4650      	mov	r0, sl
 8004d40:	f7fb fa66 	bl	8000210 <strlen>
 8004d44:	2300      	movs	r3, #0
 8004d46:	930a      	str	r3, [sp, #40]	; 0x28
 8004d48:	6823      	ldr	r3, [r4, #0]
 8004d4a:	9305      	str	r3, [sp, #20]
 8004d4c:	f8d8 3000 	ldr.w	r3, [r8]
 8004d50:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004d54:	3307      	adds	r3, #7
 8004d56:	f023 0307 	bic.w	r3, r3, #7
 8004d5a:	f103 0208 	add.w	r2, r3, #8
 8004d5e:	f8c8 2000 	str.w	r2, [r8]
 8004d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d66:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004d6a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004d6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004d72:	9307      	str	r3, [sp, #28]
 8004d74:	f8cd 8018 	str.w	r8, [sp, #24]
 8004d78:	ee08 0a10 	vmov	s16, r0
 8004d7c:	4b9f      	ldr	r3, [pc, #636]	; (8004ffc <_printf_float+0x2dc>)
 8004d7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d82:	f04f 32ff 	mov.w	r2, #4294967295
 8004d86:	f7fb fef1 	bl	8000b6c <__aeabi_dcmpun>
 8004d8a:	bb88      	cbnz	r0, 8004df0 <_printf_float+0xd0>
 8004d8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d90:	4b9a      	ldr	r3, [pc, #616]	; (8004ffc <_printf_float+0x2dc>)
 8004d92:	f04f 32ff 	mov.w	r2, #4294967295
 8004d96:	f7fb fecb 	bl	8000b30 <__aeabi_dcmple>
 8004d9a:	bb48      	cbnz	r0, 8004df0 <_printf_float+0xd0>
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	2300      	movs	r3, #0
 8004da0:	4640      	mov	r0, r8
 8004da2:	4649      	mov	r1, r9
 8004da4:	f7fb feba 	bl	8000b1c <__aeabi_dcmplt>
 8004da8:	b110      	cbz	r0, 8004db0 <_printf_float+0x90>
 8004daa:	232d      	movs	r3, #45	; 0x2d
 8004dac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004db0:	4b93      	ldr	r3, [pc, #588]	; (8005000 <_printf_float+0x2e0>)
 8004db2:	4894      	ldr	r0, [pc, #592]	; (8005004 <_printf_float+0x2e4>)
 8004db4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004db8:	bf94      	ite	ls
 8004dba:	4698      	movls	r8, r3
 8004dbc:	4680      	movhi	r8, r0
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	6123      	str	r3, [r4, #16]
 8004dc2:	9b05      	ldr	r3, [sp, #20]
 8004dc4:	f023 0204 	bic.w	r2, r3, #4
 8004dc8:	6022      	str	r2, [r4, #0]
 8004dca:	f04f 0900 	mov.w	r9, #0
 8004dce:	9700      	str	r7, [sp, #0]
 8004dd0:	4633      	mov	r3, r6
 8004dd2:	aa0b      	add	r2, sp, #44	; 0x2c
 8004dd4:	4621      	mov	r1, r4
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	f000 f9d8 	bl	800518c <_printf_common>
 8004ddc:	3001      	adds	r0, #1
 8004dde:	f040 8090 	bne.w	8004f02 <_printf_float+0x1e2>
 8004de2:	f04f 30ff 	mov.w	r0, #4294967295
 8004de6:	b00d      	add	sp, #52	; 0x34
 8004de8:	ecbd 8b02 	vpop	{d8}
 8004dec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004df0:	4642      	mov	r2, r8
 8004df2:	464b      	mov	r3, r9
 8004df4:	4640      	mov	r0, r8
 8004df6:	4649      	mov	r1, r9
 8004df8:	f7fb feb8 	bl	8000b6c <__aeabi_dcmpun>
 8004dfc:	b140      	cbz	r0, 8004e10 <_printf_float+0xf0>
 8004dfe:	464b      	mov	r3, r9
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	bfbc      	itt	lt
 8004e04:	232d      	movlt	r3, #45	; 0x2d
 8004e06:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004e0a:	487f      	ldr	r0, [pc, #508]	; (8005008 <_printf_float+0x2e8>)
 8004e0c:	4b7f      	ldr	r3, [pc, #508]	; (800500c <_printf_float+0x2ec>)
 8004e0e:	e7d1      	b.n	8004db4 <_printf_float+0x94>
 8004e10:	6863      	ldr	r3, [r4, #4]
 8004e12:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004e16:	9206      	str	r2, [sp, #24]
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	d13f      	bne.n	8004e9c <_printf_float+0x17c>
 8004e1c:	2306      	movs	r3, #6
 8004e1e:	6063      	str	r3, [r4, #4]
 8004e20:	9b05      	ldr	r3, [sp, #20]
 8004e22:	6861      	ldr	r1, [r4, #4]
 8004e24:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004e28:	2300      	movs	r3, #0
 8004e2a:	9303      	str	r3, [sp, #12]
 8004e2c:	ab0a      	add	r3, sp, #40	; 0x28
 8004e2e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004e32:	ab09      	add	r3, sp, #36	; 0x24
 8004e34:	ec49 8b10 	vmov	d0, r8, r9
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	6022      	str	r2, [r4, #0]
 8004e3c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004e40:	4628      	mov	r0, r5
 8004e42:	f7ff fecd 	bl	8004be0 <__cvt>
 8004e46:	9b06      	ldr	r3, [sp, #24]
 8004e48:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e4a:	2b47      	cmp	r3, #71	; 0x47
 8004e4c:	4680      	mov	r8, r0
 8004e4e:	d108      	bne.n	8004e62 <_printf_float+0x142>
 8004e50:	1cc8      	adds	r0, r1, #3
 8004e52:	db02      	blt.n	8004e5a <_printf_float+0x13a>
 8004e54:	6863      	ldr	r3, [r4, #4]
 8004e56:	4299      	cmp	r1, r3
 8004e58:	dd41      	ble.n	8004ede <_printf_float+0x1be>
 8004e5a:	f1ab 0b02 	sub.w	fp, fp, #2
 8004e5e:	fa5f fb8b 	uxtb.w	fp, fp
 8004e62:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004e66:	d820      	bhi.n	8004eaa <_printf_float+0x18a>
 8004e68:	3901      	subs	r1, #1
 8004e6a:	465a      	mov	r2, fp
 8004e6c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004e70:	9109      	str	r1, [sp, #36]	; 0x24
 8004e72:	f7ff ff17 	bl	8004ca4 <__exponent>
 8004e76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004e78:	1813      	adds	r3, r2, r0
 8004e7a:	2a01      	cmp	r2, #1
 8004e7c:	4681      	mov	r9, r0
 8004e7e:	6123      	str	r3, [r4, #16]
 8004e80:	dc02      	bgt.n	8004e88 <_printf_float+0x168>
 8004e82:	6822      	ldr	r2, [r4, #0]
 8004e84:	07d2      	lsls	r2, r2, #31
 8004e86:	d501      	bpl.n	8004e8c <_printf_float+0x16c>
 8004e88:	3301      	adds	r3, #1
 8004e8a:	6123      	str	r3, [r4, #16]
 8004e8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d09c      	beq.n	8004dce <_printf_float+0xae>
 8004e94:	232d      	movs	r3, #45	; 0x2d
 8004e96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e9a:	e798      	b.n	8004dce <_printf_float+0xae>
 8004e9c:	9a06      	ldr	r2, [sp, #24]
 8004e9e:	2a47      	cmp	r2, #71	; 0x47
 8004ea0:	d1be      	bne.n	8004e20 <_printf_float+0x100>
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1bc      	bne.n	8004e20 <_printf_float+0x100>
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e7b9      	b.n	8004e1e <_printf_float+0xfe>
 8004eaa:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004eae:	d118      	bne.n	8004ee2 <_printf_float+0x1c2>
 8004eb0:	2900      	cmp	r1, #0
 8004eb2:	6863      	ldr	r3, [r4, #4]
 8004eb4:	dd0b      	ble.n	8004ece <_printf_float+0x1ae>
 8004eb6:	6121      	str	r1, [r4, #16]
 8004eb8:	b913      	cbnz	r3, 8004ec0 <_printf_float+0x1a0>
 8004eba:	6822      	ldr	r2, [r4, #0]
 8004ebc:	07d0      	lsls	r0, r2, #31
 8004ebe:	d502      	bpl.n	8004ec6 <_printf_float+0x1a6>
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	440b      	add	r3, r1
 8004ec4:	6123      	str	r3, [r4, #16]
 8004ec6:	65a1      	str	r1, [r4, #88]	; 0x58
 8004ec8:	f04f 0900 	mov.w	r9, #0
 8004ecc:	e7de      	b.n	8004e8c <_printf_float+0x16c>
 8004ece:	b913      	cbnz	r3, 8004ed6 <_printf_float+0x1b6>
 8004ed0:	6822      	ldr	r2, [r4, #0]
 8004ed2:	07d2      	lsls	r2, r2, #31
 8004ed4:	d501      	bpl.n	8004eda <_printf_float+0x1ba>
 8004ed6:	3302      	adds	r3, #2
 8004ed8:	e7f4      	b.n	8004ec4 <_printf_float+0x1a4>
 8004eda:	2301      	movs	r3, #1
 8004edc:	e7f2      	b.n	8004ec4 <_printf_float+0x1a4>
 8004ede:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004ee2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ee4:	4299      	cmp	r1, r3
 8004ee6:	db05      	blt.n	8004ef4 <_printf_float+0x1d4>
 8004ee8:	6823      	ldr	r3, [r4, #0]
 8004eea:	6121      	str	r1, [r4, #16]
 8004eec:	07d8      	lsls	r0, r3, #31
 8004eee:	d5ea      	bpl.n	8004ec6 <_printf_float+0x1a6>
 8004ef0:	1c4b      	adds	r3, r1, #1
 8004ef2:	e7e7      	b.n	8004ec4 <_printf_float+0x1a4>
 8004ef4:	2900      	cmp	r1, #0
 8004ef6:	bfd4      	ite	le
 8004ef8:	f1c1 0202 	rsble	r2, r1, #2
 8004efc:	2201      	movgt	r2, #1
 8004efe:	4413      	add	r3, r2
 8004f00:	e7e0      	b.n	8004ec4 <_printf_float+0x1a4>
 8004f02:	6823      	ldr	r3, [r4, #0]
 8004f04:	055a      	lsls	r2, r3, #21
 8004f06:	d407      	bmi.n	8004f18 <_printf_float+0x1f8>
 8004f08:	6923      	ldr	r3, [r4, #16]
 8004f0a:	4642      	mov	r2, r8
 8004f0c:	4631      	mov	r1, r6
 8004f0e:	4628      	mov	r0, r5
 8004f10:	47b8      	blx	r7
 8004f12:	3001      	adds	r0, #1
 8004f14:	d12c      	bne.n	8004f70 <_printf_float+0x250>
 8004f16:	e764      	b.n	8004de2 <_printf_float+0xc2>
 8004f18:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004f1c:	f240 80e0 	bls.w	80050e0 <_printf_float+0x3c0>
 8004f20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f24:	2200      	movs	r2, #0
 8004f26:	2300      	movs	r3, #0
 8004f28:	f7fb fdee 	bl	8000b08 <__aeabi_dcmpeq>
 8004f2c:	2800      	cmp	r0, #0
 8004f2e:	d034      	beq.n	8004f9a <_printf_float+0x27a>
 8004f30:	4a37      	ldr	r2, [pc, #220]	; (8005010 <_printf_float+0x2f0>)
 8004f32:	2301      	movs	r3, #1
 8004f34:	4631      	mov	r1, r6
 8004f36:	4628      	mov	r0, r5
 8004f38:	47b8      	blx	r7
 8004f3a:	3001      	adds	r0, #1
 8004f3c:	f43f af51 	beq.w	8004de2 <_printf_float+0xc2>
 8004f40:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f44:	429a      	cmp	r2, r3
 8004f46:	db02      	blt.n	8004f4e <_printf_float+0x22e>
 8004f48:	6823      	ldr	r3, [r4, #0]
 8004f4a:	07d8      	lsls	r0, r3, #31
 8004f4c:	d510      	bpl.n	8004f70 <_printf_float+0x250>
 8004f4e:	ee18 3a10 	vmov	r3, s16
 8004f52:	4652      	mov	r2, sl
 8004f54:	4631      	mov	r1, r6
 8004f56:	4628      	mov	r0, r5
 8004f58:	47b8      	blx	r7
 8004f5a:	3001      	adds	r0, #1
 8004f5c:	f43f af41 	beq.w	8004de2 <_printf_float+0xc2>
 8004f60:	f04f 0800 	mov.w	r8, #0
 8004f64:	f104 091a 	add.w	r9, r4, #26
 8004f68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	4543      	cmp	r3, r8
 8004f6e:	dc09      	bgt.n	8004f84 <_printf_float+0x264>
 8004f70:	6823      	ldr	r3, [r4, #0]
 8004f72:	079b      	lsls	r3, r3, #30
 8004f74:	f100 8105 	bmi.w	8005182 <_printf_float+0x462>
 8004f78:	68e0      	ldr	r0, [r4, #12]
 8004f7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004f7c:	4298      	cmp	r0, r3
 8004f7e:	bfb8      	it	lt
 8004f80:	4618      	movlt	r0, r3
 8004f82:	e730      	b.n	8004de6 <_printf_float+0xc6>
 8004f84:	2301      	movs	r3, #1
 8004f86:	464a      	mov	r2, r9
 8004f88:	4631      	mov	r1, r6
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	47b8      	blx	r7
 8004f8e:	3001      	adds	r0, #1
 8004f90:	f43f af27 	beq.w	8004de2 <_printf_float+0xc2>
 8004f94:	f108 0801 	add.w	r8, r8, #1
 8004f98:	e7e6      	b.n	8004f68 <_printf_float+0x248>
 8004f9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	dc39      	bgt.n	8005014 <_printf_float+0x2f4>
 8004fa0:	4a1b      	ldr	r2, [pc, #108]	; (8005010 <_printf_float+0x2f0>)
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	4631      	mov	r1, r6
 8004fa6:	4628      	mov	r0, r5
 8004fa8:	47b8      	blx	r7
 8004faa:	3001      	adds	r0, #1
 8004fac:	f43f af19 	beq.w	8004de2 <_printf_float+0xc2>
 8004fb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	d102      	bne.n	8004fbe <_printf_float+0x29e>
 8004fb8:	6823      	ldr	r3, [r4, #0]
 8004fba:	07d9      	lsls	r1, r3, #31
 8004fbc:	d5d8      	bpl.n	8004f70 <_printf_float+0x250>
 8004fbe:	ee18 3a10 	vmov	r3, s16
 8004fc2:	4652      	mov	r2, sl
 8004fc4:	4631      	mov	r1, r6
 8004fc6:	4628      	mov	r0, r5
 8004fc8:	47b8      	blx	r7
 8004fca:	3001      	adds	r0, #1
 8004fcc:	f43f af09 	beq.w	8004de2 <_printf_float+0xc2>
 8004fd0:	f04f 0900 	mov.w	r9, #0
 8004fd4:	f104 0a1a 	add.w	sl, r4, #26
 8004fd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fda:	425b      	negs	r3, r3
 8004fdc:	454b      	cmp	r3, r9
 8004fde:	dc01      	bgt.n	8004fe4 <_printf_float+0x2c4>
 8004fe0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004fe2:	e792      	b.n	8004f0a <_printf_float+0x1ea>
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	4652      	mov	r2, sl
 8004fe8:	4631      	mov	r1, r6
 8004fea:	4628      	mov	r0, r5
 8004fec:	47b8      	blx	r7
 8004fee:	3001      	adds	r0, #1
 8004ff0:	f43f aef7 	beq.w	8004de2 <_printf_float+0xc2>
 8004ff4:	f109 0901 	add.w	r9, r9, #1
 8004ff8:	e7ee      	b.n	8004fd8 <_printf_float+0x2b8>
 8004ffa:	bf00      	nop
 8004ffc:	7fefffff 	.word	0x7fefffff
 8005000:	08009508 	.word	0x08009508
 8005004:	0800950c 	.word	0x0800950c
 8005008:	08009514 	.word	0x08009514
 800500c:	08009510 	.word	0x08009510
 8005010:	08009518 	.word	0x08009518
 8005014:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005016:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005018:	429a      	cmp	r2, r3
 800501a:	bfa8      	it	ge
 800501c:	461a      	movge	r2, r3
 800501e:	2a00      	cmp	r2, #0
 8005020:	4691      	mov	r9, r2
 8005022:	dc37      	bgt.n	8005094 <_printf_float+0x374>
 8005024:	f04f 0b00 	mov.w	fp, #0
 8005028:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800502c:	f104 021a 	add.w	r2, r4, #26
 8005030:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005032:	9305      	str	r3, [sp, #20]
 8005034:	eba3 0309 	sub.w	r3, r3, r9
 8005038:	455b      	cmp	r3, fp
 800503a:	dc33      	bgt.n	80050a4 <_printf_float+0x384>
 800503c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005040:	429a      	cmp	r2, r3
 8005042:	db3b      	blt.n	80050bc <_printf_float+0x39c>
 8005044:	6823      	ldr	r3, [r4, #0]
 8005046:	07da      	lsls	r2, r3, #31
 8005048:	d438      	bmi.n	80050bc <_printf_float+0x39c>
 800504a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800504c:	9a05      	ldr	r2, [sp, #20]
 800504e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005050:	1a9a      	subs	r2, r3, r2
 8005052:	eba3 0901 	sub.w	r9, r3, r1
 8005056:	4591      	cmp	r9, r2
 8005058:	bfa8      	it	ge
 800505a:	4691      	movge	r9, r2
 800505c:	f1b9 0f00 	cmp.w	r9, #0
 8005060:	dc35      	bgt.n	80050ce <_printf_float+0x3ae>
 8005062:	f04f 0800 	mov.w	r8, #0
 8005066:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800506a:	f104 0a1a 	add.w	sl, r4, #26
 800506e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005072:	1a9b      	subs	r3, r3, r2
 8005074:	eba3 0309 	sub.w	r3, r3, r9
 8005078:	4543      	cmp	r3, r8
 800507a:	f77f af79 	ble.w	8004f70 <_printf_float+0x250>
 800507e:	2301      	movs	r3, #1
 8005080:	4652      	mov	r2, sl
 8005082:	4631      	mov	r1, r6
 8005084:	4628      	mov	r0, r5
 8005086:	47b8      	blx	r7
 8005088:	3001      	adds	r0, #1
 800508a:	f43f aeaa 	beq.w	8004de2 <_printf_float+0xc2>
 800508e:	f108 0801 	add.w	r8, r8, #1
 8005092:	e7ec      	b.n	800506e <_printf_float+0x34e>
 8005094:	4613      	mov	r3, r2
 8005096:	4631      	mov	r1, r6
 8005098:	4642      	mov	r2, r8
 800509a:	4628      	mov	r0, r5
 800509c:	47b8      	blx	r7
 800509e:	3001      	adds	r0, #1
 80050a0:	d1c0      	bne.n	8005024 <_printf_float+0x304>
 80050a2:	e69e      	b.n	8004de2 <_printf_float+0xc2>
 80050a4:	2301      	movs	r3, #1
 80050a6:	4631      	mov	r1, r6
 80050a8:	4628      	mov	r0, r5
 80050aa:	9205      	str	r2, [sp, #20]
 80050ac:	47b8      	blx	r7
 80050ae:	3001      	adds	r0, #1
 80050b0:	f43f ae97 	beq.w	8004de2 <_printf_float+0xc2>
 80050b4:	9a05      	ldr	r2, [sp, #20]
 80050b6:	f10b 0b01 	add.w	fp, fp, #1
 80050ba:	e7b9      	b.n	8005030 <_printf_float+0x310>
 80050bc:	ee18 3a10 	vmov	r3, s16
 80050c0:	4652      	mov	r2, sl
 80050c2:	4631      	mov	r1, r6
 80050c4:	4628      	mov	r0, r5
 80050c6:	47b8      	blx	r7
 80050c8:	3001      	adds	r0, #1
 80050ca:	d1be      	bne.n	800504a <_printf_float+0x32a>
 80050cc:	e689      	b.n	8004de2 <_printf_float+0xc2>
 80050ce:	9a05      	ldr	r2, [sp, #20]
 80050d0:	464b      	mov	r3, r9
 80050d2:	4442      	add	r2, r8
 80050d4:	4631      	mov	r1, r6
 80050d6:	4628      	mov	r0, r5
 80050d8:	47b8      	blx	r7
 80050da:	3001      	adds	r0, #1
 80050dc:	d1c1      	bne.n	8005062 <_printf_float+0x342>
 80050de:	e680      	b.n	8004de2 <_printf_float+0xc2>
 80050e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80050e2:	2a01      	cmp	r2, #1
 80050e4:	dc01      	bgt.n	80050ea <_printf_float+0x3ca>
 80050e6:	07db      	lsls	r3, r3, #31
 80050e8:	d538      	bpl.n	800515c <_printf_float+0x43c>
 80050ea:	2301      	movs	r3, #1
 80050ec:	4642      	mov	r2, r8
 80050ee:	4631      	mov	r1, r6
 80050f0:	4628      	mov	r0, r5
 80050f2:	47b8      	blx	r7
 80050f4:	3001      	adds	r0, #1
 80050f6:	f43f ae74 	beq.w	8004de2 <_printf_float+0xc2>
 80050fa:	ee18 3a10 	vmov	r3, s16
 80050fe:	4652      	mov	r2, sl
 8005100:	4631      	mov	r1, r6
 8005102:	4628      	mov	r0, r5
 8005104:	47b8      	blx	r7
 8005106:	3001      	adds	r0, #1
 8005108:	f43f ae6b 	beq.w	8004de2 <_printf_float+0xc2>
 800510c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005110:	2200      	movs	r2, #0
 8005112:	2300      	movs	r3, #0
 8005114:	f7fb fcf8 	bl	8000b08 <__aeabi_dcmpeq>
 8005118:	b9d8      	cbnz	r0, 8005152 <_printf_float+0x432>
 800511a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800511c:	f108 0201 	add.w	r2, r8, #1
 8005120:	3b01      	subs	r3, #1
 8005122:	4631      	mov	r1, r6
 8005124:	4628      	mov	r0, r5
 8005126:	47b8      	blx	r7
 8005128:	3001      	adds	r0, #1
 800512a:	d10e      	bne.n	800514a <_printf_float+0x42a>
 800512c:	e659      	b.n	8004de2 <_printf_float+0xc2>
 800512e:	2301      	movs	r3, #1
 8005130:	4652      	mov	r2, sl
 8005132:	4631      	mov	r1, r6
 8005134:	4628      	mov	r0, r5
 8005136:	47b8      	blx	r7
 8005138:	3001      	adds	r0, #1
 800513a:	f43f ae52 	beq.w	8004de2 <_printf_float+0xc2>
 800513e:	f108 0801 	add.w	r8, r8, #1
 8005142:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005144:	3b01      	subs	r3, #1
 8005146:	4543      	cmp	r3, r8
 8005148:	dcf1      	bgt.n	800512e <_printf_float+0x40e>
 800514a:	464b      	mov	r3, r9
 800514c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005150:	e6dc      	b.n	8004f0c <_printf_float+0x1ec>
 8005152:	f04f 0800 	mov.w	r8, #0
 8005156:	f104 0a1a 	add.w	sl, r4, #26
 800515a:	e7f2      	b.n	8005142 <_printf_float+0x422>
 800515c:	2301      	movs	r3, #1
 800515e:	4642      	mov	r2, r8
 8005160:	e7df      	b.n	8005122 <_printf_float+0x402>
 8005162:	2301      	movs	r3, #1
 8005164:	464a      	mov	r2, r9
 8005166:	4631      	mov	r1, r6
 8005168:	4628      	mov	r0, r5
 800516a:	47b8      	blx	r7
 800516c:	3001      	adds	r0, #1
 800516e:	f43f ae38 	beq.w	8004de2 <_printf_float+0xc2>
 8005172:	f108 0801 	add.w	r8, r8, #1
 8005176:	68e3      	ldr	r3, [r4, #12]
 8005178:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800517a:	1a5b      	subs	r3, r3, r1
 800517c:	4543      	cmp	r3, r8
 800517e:	dcf0      	bgt.n	8005162 <_printf_float+0x442>
 8005180:	e6fa      	b.n	8004f78 <_printf_float+0x258>
 8005182:	f04f 0800 	mov.w	r8, #0
 8005186:	f104 0919 	add.w	r9, r4, #25
 800518a:	e7f4      	b.n	8005176 <_printf_float+0x456>

0800518c <_printf_common>:
 800518c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005190:	4616      	mov	r6, r2
 8005192:	4699      	mov	r9, r3
 8005194:	688a      	ldr	r2, [r1, #8]
 8005196:	690b      	ldr	r3, [r1, #16]
 8005198:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800519c:	4293      	cmp	r3, r2
 800519e:	bfb8      	it	lt
 80051a0:	4613      	movlt	r3, r2
 80051a2:	6033      	str	r3, [r6, #0]
 80051a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051a8:	4607      	mov	r7, r0
 80051aa:	460c      	mov	r4, r1
 80051ac:	b10a      	cbz	r2, 80051b2 <_printf_common+0x26>
 80051ae:	3301      	adds	r3, #1
 80051b0:	6033      	str	r3, [r6, #0]
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	0699      	lsls	r1, r3, #26
 80051b6:	bf42      	ittt	mi
 80051b8:	6833      	ldrmi	r3, [r6, #0]
 80051ba:	3302      	addmi	r3, #2
 80051bc:	6033      	strmi	r3, [r6, #0]
 80051be:	6825      	ldr	r5, [r4, #0]
 80051c0:	f015 0506 	ands.w	r5, r5, #6
 80051c4:	d106      	bne.n	80051d4 <_printf_common+0x48>
 80051c6:	f104 0a19 	add.w	sl, r4, #25
 80051ca:	68e3      	ldr	r3, [r4, #12]
 80051cc:	6832      	ldr	r2, [r6, #0]
 80051ce:	1a9b      	subs	r3, r3, r2
 80051d0:	42ab      	cmp	r3, r5
 80051d2:	dc26      	bgt.n	8005222 <_printf_common+0x96>
 80051d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80051d8:	1e13      	subs	r3, r2, #0
 80051da:	6822      	ldr	r2, [r4, #0]
 80051dc:	bf18      	it	ne
 80051de:	2301      	movne	r3, #1
 80051e0:	0692      	lsls	r2, r2, #26
 80051e2:	d42b      	bmi.n	800523c <_printf_common+0xb0>
 80051e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80051e8:	4649      	mov	r1, r9
 80051ea:	4638      	mov	r0, r7
 80051ec:	47c0      	blx	r8
 80051ee:	3001      	adds	r0, #1
 80051f0:	d01e      	beq.n	8005230 <_printf_common+0xa4>
 80051f2:	6823      	ldr	r3, [r4, #0]
 80051f4:	68e5      	ldr	r5, [r4, #12]
 80051f6:	6832      	ldr	r2, [r6, #0]
 80051f8:	f003 0306 	and.w	r3, r3, #6
 80051fc:	2b04      	cmp	r3, #4
 80051fe:	bf08      	it	eq
 8005200:	1aad      	subeq	r5, r5, r2
 8005202:	68a3      	ldr	r3, [r4, #8]
 8005204:	6922      	ldr	r2, [r4, #16]
 8005206:	bf0c      	ite	eq
 8005208:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800520c:	2500      	movne	r5, #0
 800520e:	4293      	cmp	r3, r2
 8005210:	bfc4      	itt	gt
 8005212:	1a9b      	subgt	r3, r3, r2
 8005214:	18ed      	addgt	r5, r5, r3
 8005216:	2600      	movs	r6, #0
 8005218:	341a      	adds	r4, #26
 800521a:	42b5      	cmp	r5, r6
 800521c:	d11a      	bne.n	8005254 <_printf_common+0xc8>
 800521e:	2000      	movs	r0, #0
 8005220:	e008      	b.n	8005234 <_printf_common+0xa8>
 8005222:	2301      	movs	r3, #1
 8005224:	4652      	mov	r2, sl
 8005226:	4649      	mov	r1, r9
 8005228:	4638      	mov	r0, r7
 800522a:	47c0      	blx	r8
 800522c:	3001      	adds	r0, #1
 800522e:	d103      	bne.n	8005238 <_printf_common+0xac>
 8005230:	f04f 30ff 	mov.w	r0, #4294967295
 8005234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005238:	3501      	adds	r5, #1
 800523a:	e7c6      	b.n	80051ca <_printf_common+0x3e>
 800523c:	18e1      	adds	r1, r4, r3
 800523e:	1c5a      	adds	r2, r3, #1
 8005240:	2030      	movs	r0, #48	; 0x30
 8005242:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005246:	4422      	add	r2, r4
 8005248:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800524c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005250:	3302      	adds	r3, #2
 8005252:	e7c7      	b.n	80051e4 <_printf_common+0x58>
 8005254:	2301      	movs	r3, #1
 8005256:	4622      	mov	r2, r4
 8005258:	4649      	mov	r1, r9
 800525a:	4638      	mov	r0, r7
 800525c:	47c0      	blx	r8
 800525e:	3001      	adds	r0, #1
 8005260:	d0e6      	beq.n	8005230 <_printf_common+0xa4>
 8005262:	3601      	adds	r6, #1
 8005264:	e7d9      	b.n	800521a <_printf_common+0x8e>
	...

08005268 <_printf_i>:
 8005268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800526c:	7e0f      	ldrb	r7, [r1, #24]
 800526e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005270:	2f78      	cmp	r7, #120	; 0x78
 8005272:	4691      	mov	r9, r2
 8005274:	4680      	mov	r8, r0
 8005276:	460c      	mov	r4, r1
 8005278:	469a      	mov	sl, r3
 800527a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800527e:	d807      	bhi.n	8005290 <_printf_i+0x28>
 8005280:	2f62      	cmp	r7, #98	; 0x62
 8005282:	d80a      	bhi.n	800529a <_printf_i+0x32>
 8005284:	2f00      	cmp	r7, #0
 8005286:	f000 80d8 	beq.w	800543a <_printf_i+0x1d2>
 800528a:	2f58      	cmp	r7, #88	; 0x58
 800528c:	f000 80a3 	beq.w	80053d6 <_printf_i+0x16e>
 8005290:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005294:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005298:	e03a      	b.n	8005310 <_printf_i+0xa8>
 800529a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800529e:	2b15      	cmp	r3, #21
 80052a0:	d8f6      	bhi.n	8005290 <_printf_i+0x28>
 80052a2:	a101      	add	r1, pc, #4	; (adr r1, 80052a8 <_printf_i+0x40>)
 80052a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052a8:	08005301 	.word	0x08005301
 80052ac:	08005315 	.word	0x08005315
 80052b0:	08005291 	.word	0x08005291
 80052b4:	08005291 	.word	0x08005291
 80052b8:	08005291 	.word	0x08005291
 80052bc:	08005291 	.word	0x08005291
 80052c0:	08005315 	.word	0x08005315
 80052c4:	08005291 	.word	0x08005291
 80052c8:	08005291 	.word	0x08005291
 80052cc:	08005291 	.word	0x08005291
 80052d0:	08005291 	.word	0x08005291
 80052d4:	08005421 	.word	0x08005421
 80052d8:	08005345 	.word	0x08005345
 80052dc:	08005403 	.word	0x08005403
 80052e0:	08005291 	.word	0x08005291
 80052e4:	08005291 	.word	0x08005291
 80052e8:	08005443 	.word	0x08005443
 80052ec:	08005291 	.word	0x08005291
 80052f0:	08005345 	.word	0x08005345
 80052f4:	08005291 	.word	0x08005291
 80052f8:	08005291 	.word	0x08005291
 80052fc:	0800540b 	.word	0x0800540b
 8005300:	682b      	ldr	r3, [r5, #0]
 8005302:	1d1a      	adds	r2, r3, #4
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	602a      	str	r2, [r5, #0]
 8005308:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800530c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005310:	2301      	movs	r3, #1
 8005312:	e0a3      	b.n	800545c <_printf_i+0x1f4>
 8005314:	6820      	ldr	r0, [r4, #0]
 8005316:	6829      	ldr	r1, [r5, #0]
 8005318:	0606      	lsls	r6, r0, #24
 800531a:	f101 0304 	add.w	r3, r1, #4
 800531e:	d50a      	bpl.n	8005336 <_printf_i+0xce>
 8005320:	680e      	ldr	r6, [r1, #0]
 8005322:	602b      	str	r3, [r5, #0]
 8005324:	2e00      	cmp	r6, #0
 8005326:	da03      	bge.n	8005330 <_printf_i+0xc8>
 8005328:	232d      	movs	r3, #45	; 0x2d
 800532a:	4276      	negs	r6, r6
 800532c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005330:	485e      	ldr	r0, [pc, #376]	; (80054ac <_printf_i+0x244>)
 8005332:	230a      	movs	r3, #10
 8005334:	e019      	b.n	800536a <_printf_i+0x102>
 8005336:	680e      	ldr	r6, [r1, #0]
 8005338:	602b      	str	r3, [r5, #0]
 800533a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800533e:	bf18      	it	ne
 8005340:	b236      	sxthne	r6, r6
 8005342:	e7ef      	b.n	8005324 <_printf_i+0xbc>
 8005344:	682b      	ldr	r3, [r5, #0]
 8005346:	6820      	ldr	r0, [r4, #0]
 8005348:	1d19      	adds	r1, r3, #4
 800534a:	6029      	str	r1, [r5, #0]
 800534c:	0601      	lsls	r1, r0, #24
 800534e:	d501      	bpl.n	8005354 <_printf_i+0xec>
 8005350:	681e      	ldr	r6, [r3, #0]
 8005352:	e002      	b.n	800535a <_printf_i+0xf2>
 8005354:	0646      	lsls	r6, r0, #25
 8005356:	d5fb      	bpl.n	8005350 <_printf_i+0xe8>
 8005358:	881e      	ldrh	r6, [r3, #0]
 800535a:	4854      	ldr	r0, [pc, #336]	; (80054ac <_printf_i+0x244>)
 800535c:	2f6f      	cmp	r7, #111	; 0x6f
 800535e:	bf0c      	ite	eq
 8005360:	2308      	moveq	r3, #8
 8005362:	230a      	movne	r3, #10
 8005364:	2100      	movs	r1, #0
 8005366:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800536a:	6865      	ldr	r5, [r4, #4]
 800536c:	60a5      	str	r5, [r4, #8]
 800536e:	2d00      	cmp	r5, #0
 8005370:	bfa2      	ittt	ge
 8005372:	6821      	ldrge	r1, [r4, #0]
 8005374:	f021 0104 	bicge.w	r1, r1, #4
 8005378:	6021      	strge	r1, [r4, #0]
 800537a:	b90e      	cbnz	r6, 8005380 <_printf_i+0x118>
 800537c:	2d00      	cmp	r5, #0
 800537e:	d04d      	beq.n	800541c <_printf_i+0x1b4>
 8005380:	4615      	mov	r5, r2
 8005382:	fbb6 f1f3 	udiv	r1, r6, r3
 8005386:	fb03 6711 	mls	r7, r3, r1, r6
 800538a:	5dc7      	ldrb	r7, [r0, r7]
 800538c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005390:	4637      	mov	r7, r6
 8005392:	42bb      	cmp	r3, r7
 8005394:	460e      	mov	r6, r1
 8005396:	d9f4      	bls.n	8005382 <_printf_i+0x11a>
 8005398:	2b08      	cmp	r3, #8
 800539a:	d10b      	bne.n	80053b4 <_printf_i+0x14c>
 800539c:	6823      	ldr	r3, [r4, #0]
 800539e:	07de      	lsls	r6, r3, #31
 80053a0:	d508      	bpl.n	80053b4 <_printf_i+0x14c>
 80053a2:	6923      	ldr	r3, [r4, #16]
 80053a4:	6861      	ldr	r1, [r4, #4]
 80053a6:	4299      	cmp	r1, r3
 80053a8:	bfde      	ittt	le
 80053aa:	2330      	movle	r3, #48	; 0x30
 80053ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80053b4:	1b52      	subs	r2, r2, r5
 80053b6:	6122      	str	r2, [r4, #16]
 80053b8:	f8cd a000 	str.w	sl, [sp]
 80053bc:	464b      	mov	r3, r9
 80053be:	aa03      	add	r2, sp, #12
 80053c0:	4621      	mov	r1, r4
 80053c2:	4640      	mov	r0, r8
 80053c4:	f7ff fee2 	bl	800518c <_printf_common>
 80053c8:	3001      	adds	r0, #1
 80053ca:	d14c      	bne.n	8005466 <_printf_i+0x1fe>
 80053cc:	f04f 30ff 	mov.w	r0, #4294967295
 80053d0:	b004      	add	sp, #16
 80053d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053d6:	4835      	ldr	r0, [pc, #212]	; (80054ac <_printf_i+0x244>)
 80053d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80053dc:	6829      	ldr	r1, [r5, #0]
 80053de:	6823      	ldr	r3, [r4, #0]
 80053e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80053e4:	6029      	str	r1, [r5, #0]
 80053e6:	061d      	lsls	r5, r3, #24
 80053e8:	d514      	bpl.n	8005414 <_printf_i+0x1ac>
 80053ea:	07df      	lsls	r7, r3, #31
 80053ec:	bf44      	itt	mi
 80053ee:	f043 0320 	orrmi.w	r3, r3, #32
 80053f2:	6023      	strmi	r3, [r4, #0]
 80053f4:	b91e      	cbnz	r6, 80053fe <_printf_i+0x196>
 80053f6:	6823      	ldr	r3, [r4, #0]
 80053f8:	f023 0320 	bic.w	r3, r3, #32
 80053fc:	6023      	str	r3, [r4, #0]
 80053fe:	2310      	movs	r3, #16
 8005400:	e7b0      	b.n	8005364 <_printf_i+0xfc>
 8005402:	6823      	ldr	r3, [r4, #0]
 8005404:	f043 0320 	orr.w	r3, r3, #32
 8005408:	6023      	str	r3, [r4, #0]
 800540a:	2378      	movs	r3, #120	; 0x78
 800540c:	4828      	ldr	r0, [pc, #160]	; (80054b0 <_printf_i+0x248>)
 800540e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005412:	e7e3      	b.n	80053dc <_printf_i+0x174>
 8005414:	0659      	lsls	r1, r3, #25
 8005416:	bf48      	it	mi
 8005418:	b2b6      	uxthmi	r6, r6
 800541a:	e7e6      	b.n	80053ea <_printf_i+0x182>
 800541c:	4615      	mov	r5, r2
 800541e:	e7bb      	b.n	8005398 <_printf_i+0x130>
 8005420:	682b      	ldr	r3, [r5, #0]
 8005422:	6826      	ldr	r6, [r4, #0]
 8005424:	6961      	ldr	r1, [r4, #20]
 8005426:	1d18      	adds	r0, r3, #4
 8005428:	6028      	str	r0, [r5, #0]
 800542a:	0635      	lsls	r5, r6, #24
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	d501      	bpl.n	8005434 <_printf_i+0x1cc>
 8005430:	6019      	str	r1, [r3, #0]
 8005432:	e002      	b.n	800543a <_printf_i+0x1d2>
 8005434:	0670      	lsls	r0, r6, #25
 8005436:	d5fb      	bpl.n	8005430 <_printf_i+0x1c8>
 8005438:	8019      	strh	r1, [r3, #0]
 800543a:	2300      	movs	r3, #0
 800543c:	6123      	str	r3, [r4, #16]
 800543e:	4615      	mov	r5, r2
 8005440:	e7ba      	b.n	80053b8 <_printf_i+0x150>
 8005442:	682b      	ldr	r3, [r5, #0]
 8005444:	1d1a      	adds	r2, r3, #4
 8005446:	602a      	str	r2, [r5, #0]
 8005448:	681d      	ldr	r5, [r3, #0]
 800544a:	6862      	ldr	r2, [r4, #4]
 800544c:	2100      	movs	r1, #0
 800544e:	4628      	mov	r0, r5
 8005450:	f7fa fee6 	bl	8000220 <memchr>
 8005454:	b108      	cbz	r0, 800545a <_printf_i+0x1f2>
 8005456:	1b40      	subs	r0, r0, r5
 8005458:	6060      	str	r0, [r4, #4]
 800545a:	6863      	ldr	r3, [r4, #4]
 800545c:	6123      	str	r3, [r4, #16]
 800545e:	2300      	movs	r3, #0
 8005460:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005464:	e7a8      	b.n	80053b8 <_printf_i+0x150>
 8005466:	6923      	ldr	r3, [r4, #16]
 8005468:	462a      	mov	r2, r5
 800546a:	4649      	mov	r1, r9
 800546c:	4640      	mov	r0, r8
 800546e:	47d0      	blx	sl
 8005470:	3001      	adds	r0, #1
 8005472:	d0ab      	beq.n	80053cc <_printf_i+0x164>
 8005474:	6823      	ldr	r3, [r4, #0]
 8005476:	079b      	lsls	r3, r3, #30
 8005478:	d413      	bmi.n	80054a2 <_printf_i+0x23a>
 800547a:	68e0      	ldr	r0, [r4, #12]
 800547c:	9b03      	ldr	r3, [sp, #12]
 800547e:	4298      	cmp	r0, r3
 8005480:	bfb8      	it	lt
 8005482:	4618      	movlt	r0, r3
 8005484:	e7a4      	b.n	80053d0 <_printf_i+0x168>
 8005486:	2301      	movs	r3, #1
 8005488:	4632      	mov	r2, r6
 800548a:	4649      	mov	r1, r9
 800548c:	4640      	mov	r0, r8
 800548e:	47d0      	blx	sl
 8005490:	3001      	adds	r0, #1
 8005492:	d09b      	beq.n	80053cc <_printf_i+0x164>
 8005494:	3501      	adds	r5, #1
 8005496:	68e3      	ldr	r3, [r4, #12]
 8005498:	9903      	ldr	r1, [sp, #12]
 800549a:	1a5b      	subs	r3, r3, r1
 800549c:	42ab      	cmp	r3, r5
 800549e:	dcf2      	bgt.n	8005486 <_printf_i+0x21e>
 80054a0:	e7eb      	b.n	800547a <_printf_i+0x212>
 80054a2:	2500      	movs	r5, #0
 80054a4:	f104 0619 	add.w	r6, r4, #25
 80054a8:	e7f5      	b.n	8005496 <_printf_i+0x22e>
 80054aa:	bf00      	nop
 80054ac:	0800951a 	.word	0x0800951a
 80054b0:	0800952b 	.word	0x0800952b

080054b4 <_scanf_float>:
 80054b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054b8:	b087      	sub	sp, #28
 80054ba:	4617      	mov	r7, r2
 80054bc:	9303      	str	r3, [sp, #12]
 80054be:	688b      	ldr	r3, [r1, #8]
 80054c0:	1e5a      	subs	r2, r3, #1
 80054c2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80054c6:	bf83      	ittte	hi
 80054c8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80054cc:	195b      	addhi	r3, r3, r5
 80054ce:	9302      	strhi	r3, [sp, #8]
 80054d0:	2300      	movls	r3, #0
 80054d2:	bf86      	itte	hi
 80054d4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80054d8:	608b      	strhi	r3, [r1, #8]
 80054da:	9302      	strls	r3, [sp, #8]
 80054dc:	680b      	ldr	r3, [r1, #0]
 80054de:	468b      	mov	fp, r1
 80054e0:	2500      	movs	r5, #0
 80054e2:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80054e6:	f84b 3b1c 	str.w	r3, [fp], #28
 80054ea:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80054ee:	4680      	mov	r8, r0
 80054f0:	460c      	mov	r4, r1
 80054f2:	465e      	mov	r6, fp
 80054f4:	46aa      	mov	sl, r5
 80054f6:	46a9      	mov	r9, r5
 80054f8:	9501      	str	r5, [sp, #4]
 80054fa:	68a2      	ldr	r2, [r4, #8]
 80054fc:	b152      	cbz	r2, 8005514 <_scanf_float+0x60>
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	2b4e      	cmp	r3, #78	; 0x4e
 8005504:	d864      	bhi.n	80055d0 <_scanf_float+0x11c>
 8005506:	2b40      	cmp	r3, #64	; 0x40
 8005508:	d83c      	bhi.n	8005584 <_scanf_float+0xd0>
 800550a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800550e:	b2c8      	uxtb	r0, r1
 8005510:	280e      	cmp	r0, #14
 8005512:	d93a      	bls.n	800558a <_scanf_float+0xd6>
 8005514:	f1b9 0f00 	cmp.w	r9, #0
 8005518:	d003      	beq.n	8005522 <_scanf_float+0x6e>
 800551a:	6823      	ldr	r3, [r4, #0]
 800551c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005520:	6023      	str	r3, [r4, #0]
 8005522:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005526:	f1ba 0f01 	cmp.w	sl, #1
 800552a:	f200 8113 	bhi.w	8005754 <_scanf_float+0x2a0>
 800552e:	455e      	cmp	r6, fp
 8005530:	f200 8105 	bhi.w	800573e <_scanf_float+0x28a>
 8005534:	2501      	movs	r5, #1
 8005536:	4628      	mov	r0, r5
 8005538:	b007      	add	sp, #28
 800553a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800553e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005542:	2a0d      	cmp	r2, #13
 8005544:	d8e6      	bhi.n	8005514 <_scanf_float+0x60>
 8005546:	a101      	add	r1, pc, #4	; (adr r1, 800554c <_scanf_float+0x98>)
 8005548:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800554c:	0800568b 	.word	0x0800568b
 8005550:	08005515 	.word	0x08005515
 8005554:	08005515 	.word	0x08005515
 8005558:	08005515 	.word	0x08005515
 800555c:	080056eb 	.word	0x080056eb
 8005560:	080056c3 	.word	0x080056c3
 8005564:	08005515 	.word	0x08005515
 8005568:	08005515 	.word	0x08005515
 800556c:	08005699 	.word	0x08005699
 8005570:	08005515 	.word	0x08005515
 8005574:	08005515 	.word	0x08005515
 8005578:	08005515 	.word	0x08005515
 800557c:	08005515 	.word	0x08005515
 8005580:	08005651 	.word	0x08005651
 8005584:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005588:	e7db      	b.n	8005542 <_scanf_float+0x8e>
 800558a:	290e      	cmp	r1, #14
 800558c:	d8c2      	bhi.n	8005514 <_scanf_float+0x60>
 800558e:	a001      	add	r0, pc, #4	; (adr r0, 8005594 <_scanf_float+0xe0>)
 8005590:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005594:	08005643 	.word	0x08005643
 8005598:	08005515 	.word	0x08005515
 800559c:	08005643 	.word	0x08005643
 80055a0:	080056d7 	.word	0x080056d7
 80055a4:	08005515 	.word	0x08005515
 80055a8:	080055f1 	.word	0x080055f1
 80055ac:	0800562d 	.word	0x0800562d
 80055b0:	0800562d 	.word	0x0800562d
 80055b4:	0800562d 	.word	0x0800562d
 80055b8:	0800562d 	.word	0x0800562d
 80055bc:	0800562d 	.word	0x0800562d
 80055c0:	0800562d 	.word	0x0800562d
 80055c4:	0800562d 	.word	0x0800562d
 80055c8:	0800562d 	.word	0x0800562d
 80055cc:	0800562d 	.word	0x0800562d
 80055d0:	2b6e      	cmp	r3, #110	; 0x6e
 80055d2:	d809      	bhi.n	80055e8 <_scanf_float+0x134>
 80055d4:	2b60      	cmp	r3, #96	; 0x60
 80055d6:	d8b2      	bhi.n	800553e <_scanf_float+0x8a>
 80055d8:	2b54      	cmp	r3, #84	; 0x54
 80055da:	d077      	beq.n	80056cc <_scanf_float+0x218>
 80055dc:	2b59      	cmp	r3, #89	; 0x59
 80055de:	d199      	bne.n	8005514 <_scanf_float+0x60>
 80055e0:	2d07      	cmp	r5, #7
 80055e2:	d197      	bne.n	8005514 <_scanf_float+0x60>
 80055e4:	2508      	movs	r5, #8
 80055e6:	e029      	b.n	800563c <_scanf_float+0x188>
 80055e8:	2b74      	cmp	r3, #116	; 0x74
 80055ea:	d06f      	beq.n	80056cc <_scanf_float+0x218>
 80055ec:	2b79      	cmp	r3, #121	; 0x79
 80055ee:	e7f6      	b.n	80055de <_scanf_float+0x12a>
 80055f0:	6821      	ldr	r1, [r4, #0]
 80055f2:	05c8      	lsls	r0, r1, #23
 80055f4:	d51a      	bpl.n	800562c <_scanf_float+0x178>
 80055f6:	9b02      	ldr	r3, [sp, #8]
 80055f8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80055fc:	6021      	str	r1, [r4, #0]
 80055fe:	f109 0901 	add.w	r9, r9, #1
 8005602:	b11b      	cbz	r3, 800560c <_scanf_float+0x158>
 8005604:	3b01      	subs	r3, #1
 8005606:	3201      	adds	r2, #1
 8005608:	9302      	str	r3, [sp, #8]
 800560a:	60a2      	str	r2, [r4, #8]
 800560c:	68a3      	ldr	r3, [r4, #8]
 800560e:	3b01      	subs	r3, #1
 8005610:	60a3      	str	r3, [r4, #8]
 8005612:	6923      	ldr	r3, [r4, #16]
 8005614:	3301      	adds	r3, #1
 8005616:	6123      	str	r3, [r4, #16]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	3b01      	subs	r3, #1
 800561c:	2b00      	cmp	r3, #0
 800561e:	607b      	str	r3, [r7, #4]
 8005620:	f340 8084 	ble.w	800572c <_scanf_float+0x278>
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	3301      	adds	r3, #1
 8005628:	603b      	str	r3, [r7, #0]
 800562a:	e766      	b.n	80054fa <_scanf_float+0x46>
 800562c:	eb1a 0f05 	cmn.w	sl, r5
 8005630:	f47f af70 	bne.w	8005514 <_scanf_float+0x60>
 8005634:	6822      	ldr	r2, [r4, #0]
 8005636:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800563a:	6022      	str	r2, [r4, #0]
 800563c:	f806 3b01 	strb.w	r3, [r6], #1
 8005640:	e7e4      	b.n	800560c <_scanf_float+0x158>
 8005642:	6822      	ldr	r2, [r4, #0]
 8005644:	0610      	lsls	r0, r2, #24
 8005646:	f57f af65 	bpl.w	8005514 <_scanf_float+0x60>
 800564a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800564e:	e7f4      	b.n	800563a <_scanf_float+0x186>
 8005650:	f1ba 0f00 	cmp.w	sl, #0
 8005654:	d10e      	bne.n	8005674 <_scanf_float+0x1c0>
 8005656:	f1b9 0f00 	cmp.w	r9, #0
 800565a:	d10e      	bne.n	800567a <_scanf_float+0x1c6>
 800565c:	6822      	ldr	r2, [r4, #0]
 800565e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005662:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005666:	d108      	bne.n	800567a <_scanf_float+0x1c6>
 8005668:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800566c:	6022      	str	r2, [r4, #0]
 800566e:	f04f 0a01 	mov.w	sl, #1
 8005672:	e7e3      	b.n	800563c <_scanf_float+0x188>
 8005674:	f1ba 0f02 	cmp.w	sl, #2
 8005678:	d055      	beq.n	8005726 <_scanf_float+0x272>
 800567a:	2d01      	cmp	r5, #1
 800567c:	d002      	beq.n	8005684 <_scanf_float+0x1d0>
 800567e:	2d04      	cmp	r5, #4
 8005680:	f47f af48 	bne.w	8005514 <_scanf_float+0x60>
 8005684:	3501      	adds	r5, #1
 8005686:	b2ed      	uxtb	r5, r5
 8005688:	e7d8      	b.n	800563c <_scanf_float+0x188>
 800568a:	f1ba 0f01 	cmp.w	sl, #1
 800568e:	f47f af41 	bne.w	8005514 <_scanf_float+0x60>
 8005692:	f04f 0a02 	mov.w	sl, #2
 8005696:	e7d1      	b.n	800563c <_scanf_float+0x188>
 8005698:	b97d      	cbnz	r5, 80056ba <_scanf_float+0x206>
 800569a:	f1b9 0f00 	cmp.w	r9, #0
 800569e:	f47f af3c 	bne.w	800551a <_scanf_float+0x66>
 80056a2:	6822      	ldr	r2, [r4, #0]
 80056a4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80056a8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80056ac:	f47f af39 	bne.w	8005522 <_scanf_float+0x6e>
 80056b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80056b4:	6022      	str	r2, [r4, #0]
 80056b6:	2501      	movs	r5, #1
 80056b8:	e7c0      	b.n	800563c <_scanf_float+0x188>
 80056ba:	2d03      	cmp	r5, #3
 80056bc:	d0e2      	beq.n	8005684 <_scanf_float+0x1d0>
 80056be:	2d05      	cmp	r5, #5
 80056c0:	e7de      	b.n	8005680 <_scanf_float+0x1cc>
 80056c2:	2d02      	cmp	r5, #2
 80056c4:	f47f af26 	bne.w	8005514 <_scanf_float+0x60>
 80056c8:	2503      	movs	r5, #3
 80056ca:	e7b7      	b.n	800563c <_scanf_float+0x188>
 80056cc:	2d06      	cmp	r5, #6
 80056ce:	f47f af21 	bne.w	8005514 <_scanf_float+0x60>
 80056d2:	2507      	movs	r5, #7
 80056d4:	e7b2      	b.n	800563c <_scanf_float+0x188>
 80056d6:	6822      	ldr	r2, [r4, #0]
 80056d8:	0591      	lsls	r1, r2, #22
 80056da:	f57f af1b 	bpl.w	8005514 <_scanf_float+0x60>
 80056de:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80056e2:	6022      	str	r2, [r4, #0]
 80056e4:	f8cd 9004 	str.w	r9, [sp, #4]
 80056e8:	e7a8      	b.n	800563c <_scanf_float+0x188>
 80056ea:	6822      	ldr	r2, [r4, #0]
 80056ec:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80056f0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80056f4:	d006      	beq.n	8005704 <_scanf_float+0x250>
 80056f6:	0550      	lsls	r0, r2, #21
 80056f8:	f57f af0c 	bpl.w	8005514 <_scanf_float+0x60>
 80056fc:	f1b9 0f00 	cmp.w	r9, #0
 8005700:	f43f af0f 	beq.w	8005522 <_scanf_float+0x6e>
 8005704:	0591      	lsls	r1, r2, #22
 8005706:	bf58      	it	pl
 8005708:	9901      	ldrpl	r1, [sp, #4]
 800570a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800570e:	bf58      	it	pl
 8005710:	eba9 0101 	subpl.w	r1, r9, r1
 8005714:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005718:	bf58      	it	pl
 800571a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800571e:	6022      	str	r2, [r4, #0]
 8005720:	f04f 0900 	mov.w	r9, #0
 8005724:	e78a      	b.n	800563c <_scanf_float+0x188>
 8005726:	f04f 0a03 	mov.w	sl, #3
 800572a:	e787      	b.n	800563c <_scanf_float+0x188>
 800572c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005730:	4639      	mov	r1, r7
 8005732:	4640      	mov	r0, r8
 8005734:	4798      	blx	r3
 8005736:	2800      	cmp	r0, #0
 8005738:	f43f aedf 	beq.w	80054fa <_scanf_float+0x46>
 800573c:	e6ea      	b.n	8005514 <_scanf_float+0x60>
 800573e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005742:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005746:	463a      	mov	r2, r7
 8005748:	4640      	mov	r0, r8
 800574a:	4798      	blx	r3
 800574c:	6923      	ldr	r3, [r4, #16]
 800574e:	3b01      	subs	r3, #1
 8005750:	6123      	str	r3, [r4, #16]
 8005752:	e6ec      	b.n	800552e <_scanf_float+0x7a>
 8005754:	1e6b      	subs	r3, r5, #1
 8005756:	2b06      	cmp	r3, #6
 8005758:	d825      	bhi.n	80057a6 <_scanf_float+0x2f2>
 800575a:	2d02      	cmp	r5, #2
 800575c:	d836      	bhi.n	80057cc <_scanf_float+0x318>
 800575e:	455e      	cmp	r6, fp
 8005760:	f67f aee8 	bls.w	8005534 <_scanf_float+0x80>
 8005764:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005768:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800576c:	463a      	mov	r2, r7
 800576e:	4640      	mov	r0, r8
 8005770:	4798      	blx	r3
 8005772:	6923      	ldr	r3, [r4, #16]
 8005774:	3b01      	subs	r3, #1
 8005776:	6123      	str	r3, [r4, #16]
 8005778:	e7f1      	b.n	800575e <_scanf_float+0x2aa>
 800577a:	9802      	ldr	r0, [sp, #8]
 800577c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005780:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005784:	9002      	str	r0, [sp, #8]
 8005786:	463a      	mov	r2, r7
 8005788:	4640      	mov	r0, r8
 800578a:	4798      	blx	r3
 800578c:	6923      	ldr	r3, [r4, #16]
 800578e:	3b01      	subs	r3, #1
 8005790:	6123      	str	r3, [r4, #16]
 8005792:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005796:	fa5f fa8a 	uxtb.w	sl, sl
 800579a:	f1ba 0f02 	cmp.w	sl, #2
 800579e:	d1ec      	bne.n	800577a <_scanf_float+0x2c6>
 80057a0:	3d03      	subs	r5, #3
 80057a2:	b2ed      	uxtb	r5, r5
 80057a4:	1b76      	subs	r6, r6, r5
 80057a6:	6823      	ldr	r3, [r4, #0]
 80057a8:	05da      	lsls	r2, r3, #23
 80057aa:	d52f      	bpl.n	800580c <_scanf_float+0x358>
 80057ac:	055b      	lsls	r3, r3, #21
 80057ae:	d510      	bpl.n	80057d2 <_scanf_float+0x31e>
 80057b0:	455e      	cmp	r6, fp
 80057b2:	f67f aebf 	bls.w	8005534 <_scanf_float+0x80>
 80057b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80057ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80057be:	463a      	mov	r2, r7
 80057c0:	4640      	mov	r0, r8
 80057c2:	4798      	blx	r3
 80057c4:	6923      	ldr	r3, [r4, #16]
 80057c6:	3b01      	subs	r3, #1
 80057c8:	6123      	str	r3, [r4, #16]
 80057ca:	e7f1      	b.n	80057b0 <_scanf_float+0x2fc>
 80057cc:	46aa      	mov	sl, r5
 80057ce:	9602      	str	r6, [sp, #8]
 80057d0:	e7df      	b.n	8005792 <_scanf_float+0x2de>
 80057d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80057d6:	6923      	ldr	r3, [r4, #16]
 80057d8:	2965      	cmp	r1, #101	; 0x65
 80057da:	f103 33ff 	add.w	r3, r3, #4294967295
 80057de:	f106 35ff 	add.w	r5, r6, #4294967295
 80057e2:	6123      	str	r3, [r4, #16]
 80057e4:	d00c      	beq.n	8005800 <_scanf_float+0x34c>
 80057e6:	2945      	cmp	r1, #69	; 0x45
 80057e8:	d00a      	beq.n	8005800 <_scanf_float+0x34c>
 80057ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80057ee:	463a      	mov	r2, r7
 80057f0:	4640      	mov	r0, r8
 80057f2:	4798      	blx	r3
 80057f4:	6923      	ldr	r3, [r4, #16]
 80057f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80057fa:	3b01      	subs	r3, #1
 80057fc:	1eb5      	subs	r5, r6, #2
 80057fe:	6123      	str	r3, [r4, #16]
 8005800:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005804:	463a      	mov	r2, r7
 8005806:	4640      	mov	r0, r8
 8005808:	4798      	blx	r3
 800580a:	462e      	mov	r6, r5
 800580c:	6825      	ldr	r5, [r4, #0]
 800580e:	f015 0510 	ands.w	r5, r5, #16
 8005812:	d159      	bne.n	80058c8 <_scanf_float+0x414>
 8005814:	7035      	strb	r5, [r6, #0]
 8005816:	6823      	ldr	r3, [r4, #0]
 8005818:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800581c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005820:	d11b      	bne.n	800585a <_scanf_float+0x3a6>
 8005822:	9b01      	ldr	r3, [sp, #4]
 8005824:	454b      	cmp	r3, r9
 8005826:	eba3 0209 	sub.w	r2, r3, r9
 800582a:	d123      	bne.n	8005874 <_scanf_float+0x3c0>
 800582c:	2200      	movs	r2, #0
 800582e:	4659      	mov	r1, fp
 8005830:	4640      	mov	r0, r8
 8005832:	f000 fe97 	bl	8006564 <_strtod_r>
 8005836:	6822      	ldr	r2, [r4, #0]
 8005838:	9b03      	ldr	r3, [sp, #12]
 800583a:	f012 0f02 	tst.w	r2, #2
 800583e:	ec57 6b10 	vmov	r6, r7, d0
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	d021      	beq.n	800588a <_scanf_float+0x3d6>
 8005846:	9903      	ldr	r1, [sp, #12]
 8005848:	1d1a      	adds	r2, r3, #4
 800584a:	600a      	str	r2, [r1, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	e9c3 6700 	strd	r6, r7, [r3]
 8005852:	68e3      	ldr	r3, [r4, #12]
 8005854:	3301      	adds	r3, #1
 8005856:	60e3      	str	r3, [r4, #12]
 8005858:	e66d      	b.n	8005536 <_scanf_float+0x82>
 800585a:	9b04      	ldr	r3, [sp, #16]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d0e5      	beq.n	800582c <_scanf_float+0x378>
 8005860:	9905      	ldr	r1, [sp, #20]
 8005862:	230a      	movs	r3, #10
 8005864:	462a      	mov	r2, r5
 8005866:	3101      	adds	r1, #1
 8005868:	4640      	mov	r0, r8
 800586a:	f000 ff03 	bl	8006674 <_strtol_r>
 800586e:	9b04      	ldr	r3, [sp, #16]
 8005870:	9e05      	ldr	r6, [sp, #20]
 8005872:	1ac2      	subs	r2, r0, r3
 8005874:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8005878:	429e      	cmp	r6, r3
 800587a:	bf28      	it	cs
 800587c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005880:	4912      	ldr	r1, [pc, #72]	; (80058cc <_scanf_float+0x418>)
 8005882:	4630      	mov	r0, r6
 8005884:	f000 f82c 	bl	80058e0 <siprintf>
 8005888:	e7d0      	b.n	800582c <_scanf_float+0x378>
 800588a:	9903      	ldr	r1, [sp, #12]
 800588c:	f012 0f04 	tst.w	r2, #4
 8005890:	f103 0204 	add.w	r2, r3, #4
 8005894:	600a      	str	r2, [r1, #0]
 8005896:	d1d9      	bne.n	800584c <_scanf_float+0x398>
 8005898:	f8d3 8000 	ldr.w	r8, [r3]
 800589c:	ee10 2a10 	vmov	r2, s0
 80058a0:	ee10 0a10 	vmov	r0, s0
 80058a4:	463b      	mov	r3, r7
 80058a6:	4639      	mov	r1, r7
 80058a8:	f7fb f960 	bl	8000b6c <__aeabi_dcmpun>
 80058ac:	b128      	cbz	r0, 80058ba <_scanf_float+0x406>
 80058ae:	4808      	ldr	r0, [pc, #32]	; (80058d0 <_scanf_float+0x41c>)
 80058b0:	f000 f810 	bl	80058d4 <nanf>
 80058b4:	ed88 0a00 	vstr	s0, [r8]
 80058b8:	e7cb      	b.n	8005852 <_scanf_float+0x39e>
 80058ba:	4630      	mov	r0, r6
 80058bc:	4639      	mov	r1, r7
 80058be:	f7fb f9b3 	bl	8000c28 <__aeabi_d2f>
 80058c2:	f8c8 0000 	str.w	r0, [r8]
 80058c6:	e7c4      	b.n	8005852 <_scanf_float+0x39e>
 80058c8:	2500      	movs	r5, #0
 80058ca:	e634      	b.n	8005536 <_scanf_float+0x82>
 80058cc:	0800953c 	.word	0x0800953c
 80058d0:	08009948 	.word	0x08009948

080058d4 <nanf>:
 80058d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80058dc <nanf+0x8>
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	7fc00000 	.word	0x7fc00000

080058e0 <siprintf>:
 80058e0:	b40e      	push	{r1, r2, r3}
 80058e2:	b500      	push	{lr}
 80058e4:	b09c      	sub	sp, #112	; 0x70
 80058e6:	ab1d      	add	r3, sp, #116	; 0x74
 80058e8:	9002      	str	r0, [sp, #8]
 80058ea:	9006      	str	r0, [sp, #24]
 80058ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80058f0:	4809      	ldr	r0, [pc, #36]	; (8005918 <siprintf+0x38>)
 80058f2:	9107      	str	r1, [sp, #28]
 80058f4:	9104      	str	r1, [sp, #16]
 80058f6:	4909      	ldr	r1, [pc, #36]	; (800591c <siprintf+0x3c>)
 80058f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80058fc:	9105      	str	r1, [sp, #20]
 80058fe:	6800      	ldr	r0, [r0, #0]
 8005900:	9301      	str	r3, [sp, #4]
 8005902:	a902      	add	r1, sp, #8
 8005904:	f002 fee2 	bl	80086cc <_svfiprintf_r>
 8005908:	9b02      	ldr	r3, [sp, #8]
 800590a:	2200      	movs	r2, #0
 800590c:	701a      	strb	r2, [r3, #0]
 800590e:	b01c      	add	sp, #112	; 0x70
 8005910:	f85d eb04 	ldr.w	lr, [sp], #4
 8005914:	b003      	add	sp, #12
 8005916:	4770      	bx	lr
 8005918:	2000000c 	.word	0x2000000c
 800591c:	ffff0208 	.word	0xffff0208

08005920 <sulp>:
 8005920:	b570      	push	{r4, r5, r6, lr}
 8005922:	4604      	mov	r4, r0
 8005924:	460d      	mov	r5, r1
 8005926:	ec45 4b10 	vmov	d0, r4, r5
 800592a:	4616      	mov	r6, r2
 800592c:	f002 fc2c 	bl	8008188 <__ulp>
 8005930:	ec51 0b10 	vmov	r0, r1, d0
 8005934:	b17e      	cbz	r6, 8005956 <sulp+0x36>
 8005936:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800593a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800593e:	2b00      	cmp	r3, #0
 8005940:	dd09      	ble.n	8005956 <sulp+0x36>
 8005942:	051b      	lsls	r3, r3, #20
 8005944:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8005948:	2400      	movs	r4, #0
 800594a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800594e:	4622      	mov	r2, r4
 8005950:	462b      	mov	r3, r5
 8005952:	f7fa fe71 	bl	8000638 <__aeabi_dmul>
 8005956:	bd70      	pop	{r4, r5, r6, pc}

08005958 <_strtod_l>:
 8005958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800595c:	ed2d 8b02 	vpush	{d8}
 8005960:	b09d      	sub	sp, #116	; 0x74
 8005962:	461f      	mov	r7, r3
 8005964:	2300      	movs	r3, #0
 8005966:	9318      	str	r3, [sp, #96]	; 0x60
 8005968:	4ba2      	ldr	r3, [pc, #648]	; (8005bf4 <_strtod_l+0x29c>)
 800596a:	9213      	str	r2, [sp, #76]	; 0x4c
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	9305      	str	r3, [sp, #20]
 8005970:	4604      	mov	r4, r0
 8005972:	4618      	mov	r0, r3
 8005974:	4688      	mov	r8, r1
 8005976:	f7fa fc4b 	bl	8000210 <strlen>
 800597a:	f04f 0a00 	mov.w	sl, #0
 800597e:	4605      	mov	r5, r0
 8005980:	f04f 0b00 	mov.w	fp, #0
 8005984:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005988:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800598a:	781a      	ldrb	r2, [r3, #0]
 800598c:	2a2b      	cmp	r2, #43	; 0x2b
 800598e:	d04e      	beq.n	8005a2e <_strtod_l+0xd6>
 8005990:	d83b      	bhi.n	8005a0a <_strtod_l+0xb2>
 8005992:	2a0d      	cmp	r2, #13
 8005994:	d834      	bhi.n	8005a00 <_strtod_l+0xa8>
 8005996:	2a08      	cmp	r2, #8
 8005998:	d834      	bhi.n	8005a04 <_strtod_l+0xac>
 800599a:	2a00      	cmp	r2, #0
 800599c:	d03e      	beq.n	8005a1c <_strtod_l+0xc4>
 800599e:	2300      	movs	r3, #0
 80059a0:	930a      	str	r3, [sp, #40]	; 0x28
 80059a2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80059a4:	7833      	ldrb	r3, [r6, #0]
 80059a6:	2b30      	cmp	r3, #48	; 0x30
 80059a8:	f040 80b0 	bne.w	8005b0c <_strtod_l+0x1b4>
 80059ac:	7873      	ldrb	r3, [r6, #1]
 80059ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80059b2:	2b58      	cmp	r3, #88	; 0x58
 80059b4:	d168      	bne.n	8005a88 <_strtod_l+0x130>
 80059b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059b8:	9301      	str	r3, [sp, #4]
 80059ba:	ab18      	add	r3, sp, #96	; 0x60
 80059bc:	9702      	str	r7, [sp, #8]
 80059be:	9300      	str	r3, [sp, #0]
 80059c0:	4a8d      	ldr	r2, [pc, #564]	; (8005bf8 <_strtod_l+0x2a0>)
 80059c2:	ab19      	add	r3, sp, #100	; 0x64
 80059c4:	a917      	add	r1, sp, #92	; 0x5c
 80059c6:	4620      	mov	r0, r4
 80059c8:	f001 fd38 	bl	800743c <__gethex>
 80059cc:	f010 0707 	ands.w	r7, r0, #7
 80059d0:	4605      	mov	r5, r0
 80059d2:	d005      	beq.n	80059e0 <_strtod_l+0x88>
 80059d4:	2f06      	cmp	r7, #6
 80059d6:	d12c      	bne.n	8005a32 <_strtod_l+0xda>
 80059d8:	3601      	adds	r6, #1
 80059da:	2300      	movs	r3, #0
 80059dc:	9617      	str	r6, [sp, #92]	; 0x5c
 80059de:	930a      	str	r3, [sp, #40]	; 0x28
 80059e0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f040 8590 	bne.w	8006508 <_strtod_l+0xbb0>
 80059e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059ea:	b1eb      	cbz	r3, 8005a28 <_strtod_l+0xd0>
 80059ec:	4652      	mov	r2, sl
 80059ee:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80059f2:	ec43 2b10 	vmov	d0, r2, r3
 80059f6:	b01d      	add	sp, #116	; 0x74
 80059f8:	ecbd 8b02 	vpop	{d8}
 80059fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a00:	2a20      	cmp	r2, #32
 8005a02:	d1cc      	bne.n	800599e <_strtod_l+0x46>
 8005a04:	3301      	adds	r3, #1
 8005a06:	9317      	str	r3, [sp, #92]	; 0x5c
 8005a08:	e7be      	b.n	8005988 <_strtod_l+0x30>
 8005a0a:	2a2d      	cmp	r2, #45	; 0x2d
 8005a0c:	d1c7      	bne.n	800599e <_strtod_l+0x46>
 8005a0e:	2201      	movs	r2, #1
 8005a10:	920a      	str	r2, [sp, #40]	; 0x28
 8005a12:	1c5a      	adds	r2, r3, #1
 8005a14:	9217      	str	r2, [sp, #92]	; 0x5c
 8005a16:	785b      	ldrb	r3, [r3, #1]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1c2      	bne.n	80059a2 <_strtod_l+0x4a>
 8005a1c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005a1e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f040 856e 	bne.w	8006504 <_strtod_l+0xbac>
 8005a28:	4652      	mov	r2, sl
 8005a2a:	465b      	mov	r3, fp
 8005a2c:	e7e1      	b.n	80059f2 <_strtod_l+0x9a>
 8005a2e:	2200      	movs	r2, #0
 8005a30:	e7ee      	b.n	8005a10 <_strtod_l+0xb8>
 8005a32:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005a34:	b13a      	cbz	r2, 8005a46 <_strtod_l+0xee>
 8005a36:	2135      	movs	r1, #53	; 0x35
 8005a38:	a81a      	add	r0, sp, #104	; 0x68
 8005a3a:	f002 fcb0 	bl	800839e <__copybits>
 8005a3e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005a40:	4620      	mov	r0, r4
 8005a42:	f002 f86f 	bl	8007b24 <_Bfree>
 8005a46:	3f01      	subs	r7, #1
 8005a48:	2f04      	cmp	r7, #4
 8005a4a:	d806      	bhi.n	8005a5a <_strtod_l+0x102>
 8005a4c:	e8df f007 	tbb	[pc, r7]
 8005a50:	1714030a 	.word	0x1714030a
 8005a54:	0a          	.byte	0x0a
 8005a55:	00          	.byte	0x00
 8005a56:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8005a5a:	0728      	lsls	r0, r5, #28
 8005a5c:	d5c0      	bpl.n	80059e0 <_strtod_l+0x88>
 8005a5e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005a62:	e7bd      	b.n	80059e0 <_strtod_l+0x88>
 8005a64:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005a68:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005a6a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005a6e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005a72:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005a76:	e7f0      	b.n	8005a5a <_strtod_l+0x102>
 8005a78:	f8df b180 	ldr.w	fp, [pc, #384]	; 8005bfc <_strtod_l+0x2a4>
 8005a7c:	e7ed      	b.n	8005a5a <_strtod_l+0x102>
 8005a7e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005a82:	f04f 3aff 	mov.w	sl, #4294967295
 8005a86:	e7e8      	b.n	8005a5a <_strtod_l+0x102>
 8005a88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	9217      	str	r2, [sp, #92]	; 0x5c
 8005a8e:	785b      	ldrb	r3, [r3, #1]
 8005a90:	2b30      	cmp	r3, #48	; 0x30
 8005a92:	d0f9      	beq.n	8005a88 <_strtod_l+0x130>
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d0a3      	beq.n	80059e0 <_strtod_l+0x88>
 8005a98:	2301      	movs	r3, #1
 8005a9a:	f04f 0900 	mov.w	r9, #0
 8005a9e:	9304      	str	r3, [sp, #16]
 8005aa0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005aa2:	9308      	str	r3, [sp, #32]
 8005aa4:	f8cd 901c 	str.w	r9, [sp, #28]
 8005aa8:	464f      	mov	r7, r9
 8005aaa:	220a      	movs	r2, #10
 8005aac:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005aae:	7806      	ldrb	r6, [r0, #0]
 8005ab0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005ab4:	b2d9      	uxtb	r1, r3
 8005ab6:	2909      	cmp	r1, #9
 8005ab8:	d92a      	bls.n	8005b10 <_strtod_l+0x1b8>
 8005aba:	9905      	ldr	r1, [sp, #20]
 8005abc:	462a      	mov	r2, r5
 8005abe:	f002 ff1f 	bl	8008900 <strncmp>
 8005ac2:	b398      	cbz	r0, 8005b2c <_strtod_l+0x1d4>
 8005ac4:	2000      	movs	r0, #0
 8005ac6:	4632      	mov	r2, r6
 8005ac8:	463d      	mov	r5, r7
 8005aca:	9005      	str	r0, [sp, #20]
 8005acc:	4603      	mov	r3, r0
 8005ace:	2a65      	cmp	r2, #101	; 0x65
 8005ad0:	d001      	beq.n	8005ad6 <_strtod_l+0x17e>
 8005ad2:	2a45      	cmp	r2, #69	; 0x45
 8005ad4:	d118      	bne.n	8005b08 <_strtod_l+0x1b0>
 8005ad6:	b91d      	cbnz	r5, 8005ae0 <_strtod_l+0x188>
 8005ad8:	9a04      	ldr	r2, [sp, #16]
 8005ada:	4302      	orrs	r2, r0
 8005adc:	d09e      	beq.n	8005a1c <_strtod_l+0xc4>
 8005ade:	2500      	movs	r5, #0
 8005ae0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005ae4:	f108 0201 	add.w	r2, r8, #1
 8005ae8:	9217      	str	r2, [sp, #92]	; 0x5c
 8005aea:	f898 2001 	ldrb.w	r2, [r8, #1]
 8005aee:	2a2b      	cmp	r2, #43	; 0x2b
 8005af0:	d075      	beq.n	8005bde <_strtod_l+0x286>
 8005af2:	2a2d      	cmp	r2, #45	; 0x2d
 8005af4:	d07b      	beq.n	8005bee <_strtod_l+0x296>
 8005af6:	f04f 0c00 	mov.w	ip, #0
 8005afa:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005afe:	2909      	cmp	r1, #9
 8005b00:	f240 8082 	bls.w	8005c08 <_strtod_l+0x2b0>
 8005b04:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005b08:	2600      	movs	r6, #0
 8005b0a:	e09d      	b.n	8005c48 <_strtod_l+0x2f0>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	e7c4      	b.n	8005a9a <_strtod_l+0x142>
 8005b10:	2f08      	cmp	r7, #8
 8005b12:	bfd8      	it	le
 8005b14:	9907      	ldrle	r1, [sp, #28]
 8005b16:	f100 0001 	add.w	r0, r0, #1
 8005b1a:	bfda      	itte	le
 8005b1c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005b20:	9307      	strle	r3, [sp, #28]
 8005b22:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005b26:	3701      	adds	r7, #1
 8005b28:	9017      	str	r0, [sp, #92]	; 0x5c
 8005b2a:	e7bf      	b.n	8005aac <_strtod_l+0x154>
 8005b2c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005b2e:	195a      	adds	r2, r3, r5
 8005b30:	9217      	str	r2, [sp, #92]	; 0x5c
 8005b32:	5d5a      	ldrb	r2, [r3, r5]
 8005b34:	2f00      	cmp	r7, #0
 8005b36:	d037      	beq.n	8005ba8 <_strtod_l+0x250>
 8005b38:	9005      	str	r0, [sp, #20]
 8005b3a:	463d      	mov	r5, r7
 8005b3c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005b40:	2b09      	cmp	r3, #9
 8005b42:	d912      	bls.n	8005b6a <_strtod_l+0x212>
 8005b44:	2301      	movs	r3, #1
 8005b46:	e7c2      	b.n	8005ace <_strtod_l+0x176>
 8005b48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005b4a:	1c5a      	adds	r2, r3, #1
 8005b4c:	9217      	str	r2, [sp, #92]	; 0x5c
 8005b4e:	785a      	ldrb	r2, [r3, #1]
 8005b50:	3001      	adds	r0, #1
 8005b52:	2a30      	cmp	r2, #48	; 0x30
 8005b54:	d0f8      	beq.n	8005b48 <_strtod_l+0x1f0>
 8005b56:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005b5a:	2b08      	cmp	r3, #8
 8005b5c:	f200 84d9 	bhi.w	8006512 <_strtod_l+0xbba>
 8005b60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005b62:	9005      	str	r0, [sp, #20]
 8005b64:	2000      	movs	r0, #0
 8005b66:	9308      	str	r3, [sp, #32]
 8005b68:	4605      	mov	r5, r0
 8005b6a:	3a30      	subs	r2, #48	; 0x30
 8005b6c:	f100 0301 	add.w	r3, r0, #1
 8005b70:	d014      	beq.n	8005b9c <_strtod_l+0x244>
 8005b72:	9905      	ldr	r1, [sp, #20]
 8005b74:	4419      	add	r1, r3
 8005b76:	9105      	str	r1, [sp, #20]
 8005b78:	462b      	mov	r3, r5
 8005b7a:	eb00 0e05 	add.w	lr, r0, r5
 8005b7e:	210a      	movs	r1, #10
 8005b80:	4573      	cmp	r3, lr
 8005b82:	d113      	bne.n	8005bac <_strtod_l+0x254>
 8005b84:	182b      	adds	r3, r5, r0
 8005b86:	2b08      	cmp	r3, #8
 8005b88:	f105 0501 	add.w	r5, r5, #1
 8005b8c:	4405      	add	r5, r0
 8005b8e:	dc1c      	bgt.n	8005bca <_strtod_l+0x272>
 8005b90:	9907      	ldr	r1, [sp, #28]
 8005b92:	230a      	movs	r3, #10
 8005b94:	fb03 2301 	mla	r3, r3, r1, r2
 8005b98:	9307      	str	r3, [sp, #28]
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005b9e:	1c51      	adds	r1, r2, #1
 8005ba0:	9117      	str	r1, [sp, #92]	; 0x5c
 8005ba2:	7852      	ldrb	r2, [r2, #1]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	e7c9      	b.n	8005b3c <_strtod_l+0x1e4>
 8005ba8:	4638      	mov	r0, r7
 8005baa:	e7d2      	b.n	8005b52 <_strtod_l+0x1fa>
 8005bac:	2b08      	cmp	r3, #8
 8005bae:	dc04      	bgt.n	8005bba <_strtod_l+0x262>
 8005bb0:	9e07      	ldr	r6, [sp, #28]
 8005bb2:	434e      	muls	r6, r1
 8005bb4:	9607      	str	r6, [sp, #28]
 8005bb6:	3301      	adds	r3, #1
 8005bb8:	e7e2      	b.n	8005b80 <_strtod_l+0x228>
 8005bba:	f103 0c01 	add.w	ip, r3, #1
 8005bbe:	f1bc 0f10 	cmp.w	ip, #16
 8005bc2:	bfd8      	it	le
 8005bc4:	fb01 f909 	mulle.w	r9, r1, r9
 8005bc8:	e7f5      	b.n	8005bb6 <_strtod_l+0x25e>
 8005bca:	2d10      	cmp	r5, #16
 8005bcc:	bfdc      	itt	le
 8005bce:	230a      	movle	r3, #10
 8005bd0:	fb03 2909 	mlale	r9, r3, r9, r2
 8005bd4:	e7e1      	b.n	8005b9a <_strtod_l+0x242>
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	9305      	str	r3, [sp, #20]
 8005bda:	2301      	movs	r3, #1
 8005bdc:	e77c      	b.n	8005ad8 <_strtod_l+0x180>
 8005bde:	f04f 0c00 	mov.w	ip, #0
 8005be2:	f108 0202 	add.w	r2, r8, #2
 8005be6:	9217      	str	r2, [sp, #92]	; 0x5c
 8005be8:	f898 2002 	ldrb.w	r2, [r8, #2]
 8005bec:	e785      	b.n	8005afa <_strtod_l+0x1a2>
 8005bee:	f04f 0c01 	mov.w	ip, #1
 8005bf2:	e7f6      	b.n	8005be2 <_strtod_l+0x28a>
 8005bf4:	08009790 	.word	0x08009790
 8005bf8:	08009544 	.word	0x08009544
 8005bfc:	7ff00000 	.word	0x7ff00000
 8005c00:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005c02:	1c51      	adds	r1, r2, #1
 8005c04:	9117      	str	r1, [sp, #92]	; 0x5c
 8005c06:	7852      	ldrb	r2, [r2, #1]
 8005c08:	2a30      	cmp	r2, #48	; 0x30
 8005c0a:	d0f9      	beq.n	8005c00 <_strtod_l+0x2a8>
 8005c0c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005c10:	2908      	cmp	r1, #8
 8005c12:	f63f af79 	bhi.w	8005b08 <_strtod_l+0x1b0>
 8005c16:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005c1a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005c1c:	9206      	str	r2, [sp, #24]
 8005c1e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005c20:	1c51      	adds	r1, r2, #1
 8005c22:	9117      	str	r1, [sp, #92]	; 0x5c
 8005c24:	7852      	ldrb	r2, [r2, #1]
 8005c26:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8005c2a:	2e09      	cmp	r6, #9
 8005c2c:	d937      	bls.n	8005c9e <_strtod_l+0x346>
 8005c2e:	9e06      	ldr	r6, [sp, #24]
 8005c30:	1b89      	subs	r1, r1, r6
 8005c32:	2908      	cmp	r1, #8
 8005c34:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005c38:	dc02      	bgt.n	8005c40 <_strtod_l+0x2e8>
 8005c3a:	4576      	cmp	r6, lr
 8005c3c:	bfa8      	it	ge
 8005c3e:	4676      	movge	r6, lr
 8005c40:	f1bc 0f00 	cmp.w	ip, #0
 8005c44:	d000      	beq.n	8005c48 <_strtod_l+0x2f0>
 8005c46:	4276      	negs	r6, r6
 8005c48:	2d00      	cmp	r5, #0
 8005c4a:	d14d      	bne.n	8005ce8 <_strtod_l+0x390>
 8005c4c:	9904      	ldr	r1, [sp, #16]
 8005c4e:	4301      	orrs	r1, r0
 8005c50:	f47f aec6 	bne.w	80059e0 <_strtod_l+0x88>
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f47f aee1 	bne.w	8005a1c <_strtod_l+0xc4>
 8005c5a:	2a69      	cmp	r2, #105	; 0x69
 8005c5c:	d027      	beq.n	8005cae <_strtod_l+0x356>
 8005c5e:	dc24      	bgt.n	8005caa <_strtod_l+0x352>
 8005c60:	2a49      	cmp	r2, #73	; 0x49
 8005c62:	d024      	beq.n	8005cae <_strtod_l+0x356>
 8005c64:	2a4e      	cmp	r2, #78	; 0x4e
 8005c66:	f47f aed9 	bne.w	8005a1c <_strtod_l+0xc4>
 8005c6a:	499f      	ldr	r1, [pc, #636]	; (8005ee8 <_strtod_l+0x590>)
 8005c6c:	a817      	add	r0, sp, #92	; 0x5c
 8005c6e:	f001 fe3d 	bl	80078ec <__match>
 8005c72:	2800      	cmp	r0, #0
 8005c74:	f43f aed2 	beq.w	8005a1c <_strtod_l+0xc4>
 8005c78:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005c7a:	781b      	ldrb	r3, [r3, #0]
 8005c7c:	2b28      	cmp	r3, #40	; 0x28
 8005c7e:	d12d      	bne.n	8005cdc <_strtod_l+0x384>
 8005c80:	499a      	ldr	r1, [pc, #616]	; (8005eec <_strtod_l+0x594>)
 8005c82:	aa1a      	add	r2, sp, #104	; 0x68
 8005c84:	a817      	add	r0, sp, #92	; 0x5c
 8005c86:	f001 fe45 	bl	8007914 <__hexnan>
 8005c8a:	2805      	cmp	r0, #5
 8005c8c:	d126      	bne.n	8005cdc <_strtod_l+0x384>
 8005c8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005c90:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8005c94:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005c98:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005c9c:	e6a0      	b.n	80059e0 <_strtod_l+0x88>
 8005c9e:	210a      	movs	r1, #10
 8005ca0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8005ca4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005ca8:	e7b9      	b.n	8005c1e <_strtod_l+0x2c6>
 8005caa:	2a6e      	cmp	r2, #110	; 0x6e
 8005cac:	e7db      	b.n	8005c66 <_strtod_l+0x30e>
 8005cae:	4990      	ldr	r1, [pc, #576]	; (8005ef0 <_strtod_l+0x598>)
 8005cb0:	a817      	add	r0, sp, #92	; 0x5c
 8005cb2:	f001 fe1b 	bl	80078ec <__match>
 8005cb6:	2800      	cmp	r0, #0
 8005cb8:	f43f aeb0 	beq.w	8005a1c <_strtod_l+0xc4>
 8005cbc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005cbe:	498d      	ldr	r1, [pc, #564]	; (8005ef4 <_strtod_l+0x59c>)
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	a817      	add	r0, sp, #92	; 0x5c
 8005cc4:	9317      	str	r3, [sp, #92]	; 0x5c
 8005cc6:	f001 fe11 	bl	80078ec <__match>
 8005cca:	b910      	cbnz	r0, 8005cd2 <_strtod_l+0x37a>
 8005ccc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005cce:	3301      	adds	r3, #1
 8005cd0:	9317      	str	r3, [sp, #92]	; 0x5c
 8005cd2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8005f04 <_strtod_l+0x5ac>
 8005cd6:	f04f 0a00 	mov.w	sl, #0
 8005cda:	e681      	b.n	80059e0 <_strtod_l+0x88>
 8005cdc:	4886      	ldr	r0, [pc, #536]	; (8005ef8 <_strtod_l+0x5a0>)
 8005cde:	f002 fdf7 	bl	80088d0 <nan>
 8005ce2:	ec5b ab10 	vmov	sl, fp, d0
 8005ce6:	e67b      	b.n	80059e0 <_strtod_l+0x88>
 8005ce8:	9b05      	ldr	r3, [sp, #20]
 8005cea:	9807      	ldr	r0, [sp, #28]
 8005cec:	1af3      	subs	r3, r6, r3
 8005cee:	2f00      	cmp	r7, #0
 8005cf0:	bf08      	it	eq
 8005cf2:	462f      	moveq	r7, r5
 8005cf4:	2d10      	cmp	r5, #16
 8005cf6:	9306      	str	r3, [sp, #24]
 8005cf8:	46a8      	mov	r8, r5
 8005cfa:	bfa8      	it	ge
 8005cfc:	f04f 0810 	movge.w	r8, #16
 8005d00:	f7fa fc20 	bl	8000544 <__aeabi_ui2d>
 8005d04:	2d09      	cmp	r5, #9
 8005d06:	4682      	mov	sl, r0
 8005d08:	468b      	mov	fp, r1
 8005d0a:	dd13      	ble.n	8005d34 <_strtod_l+0x3dc>
 8005d0c:	4b7b      	ldr	r3, [pc, #492]	; (8005efc <_strtod_l+0x5a4>)
 8005d0e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005d12:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005d16:	f7fa fc8f 	bl	8000638 <__aeabi_dmul>
 8005d1a:	4682      	mov	sl, r0
 8005d1c:	4648      	mov	r0, r9
 8005d1e:	468b      	mov	fp, r1
 8005d20:	f7fa fc10 	bl	8000544 <__aeabi_ui2d>
 8005d24:	4602      	mov	r2, r0
 8005d26:	460b      	mov	r3, r1
 8005d28:	4650      	mov	r0, sl
 8005d2a:	4659      	mov	r1, fp
 8005d2c:	f7fa face 	bl	80002cc <__adddf3>
 8005d30:	4682      	mov	sl, r0
 8005d32:	468b      	mov	fp, r1
 8005d34:	2d0f      	cmp	r5, #15
 8005d36:	dc38      	bgt.n	8005daa <_strtod_l+0x452>
 8005d38:	9b06      	ldr	r3, [sp, #24]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	f43f ae50 	beq.w	80059e0 <_strtod_l+0x88>
 8005d40:	dd24      	ble.n	8005d8c <_strtod_l+0x434>
 8005d42:	2b16      	cmp	r3, #22
 8005d44:	dc0b      	bgt.n	8005d5e <_strtod_l+0x406>
 8005d46:	496d      	ldr	r1, [pc, #436]	; (8005efc <_strtod_l+0x5a4>)
 8005d48:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005d4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d50:	4652      	mov	r2, sl
 8005d52:	465b      	mov	r3, fp
 8005d54:	f7fa fc70 	bl	8000638 <__aeabi_dmul>
 8005d58:	4682      	mov	sl, r0
 8005d5a:	468b      	mov	fp, r1
 8005d5c:	e640      	b.n	80059e0 <_strtod_l+0x88>
 8005d5e:	9a06      	ldr	r2, [sp, #24]
 8005d60:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005d64:	4293      	cmp	r3, r2
 8005d66:	db20      	blt.n	8005daa <_strtod_l+0x452>
 8005d68:	4c64      	ldr	r4, [pc, #400]	; (8005efc <_strtod_l+0x5a4>)
 8005d6a:	f1c5 050f 	rsb	r5, r5, #15
 8005d6e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005d72:	4652      	mov	r2, sl
 8005d74:	465b      	mov	r3, fp
 8005d76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005d7a:	f7fa fc5d 	bl	8000638 <__aeabi_dmul>
 8005d7e:	9b06      	ldr	r3, [sp, #24]
 8005d80:	1b5d      	subs	r5, r3, r5
 8005d82:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005d86:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005d8a:	e7e3      	b.n	8005d54 <_strtod_l+0x3fc>
 8005d8c:	9b06      	ldr	r3, [sp, #24]
 8005d8e:	3316      	adds	r3, #22
 8005d90:	db0b      	blt.n	8005daa <_strtod_l+0x452>
 8005d92:	9b05      	ldr	r3, [sp, #20]
 8005d94:	1b9e      	subs	r6, r3, r6
 8005d96:	4b59      	ldr	r3, [pc, #356]	; (8005efc <_strtod_l+0x5a4>)
 8005d98:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005d9c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005da0:	4650      	mov	r0, sl
 8005da2:	4659      	mov	r1, fp
 8005da4:	f7fa fd72 	bl	800088c <__aeabi_ddiv>
 8005da8:	e7d6      	b.n	8005d58 <_strtod_l+0x400>
 8005daa:	9b06      	ldr	r3, [sp, #24]
 8005dac:	eba5 0808 	sub.w	r8, r5, r8
 8005db0:	4498      	add	r8, r3
 8005db2:	f1b8 0f00 	cmp.w	r8, #0
 8005db6:	dd74      	ble.n	8005ea2 <_strtod_l+0x54a>
 8005db8:	f018 030f 	ands.w	r3, r8, #15
 8005dbc:	d00a      	beq.n	8005dd4 <_strtod_l+0x47c>
 8005dbe:	494f      	ldr	r1, [pc, #316]	; (8005efc <_strtod_l+0x5a4>)
 8005dc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005dc4:	4652      	mov	r2, sl
 8005dc6:	465b      	mov	r3, fp
 8005dc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dcc:	f7fa fc34 	bl	8000638 <__aeabi_dmul>
 8005dd0:	4682      	mov	sl, r0
 8005dd2:	468b      	mov	fp, r1
 8005dd4:	f038 080f 	bics.w	r8, r8, #15
 8005dd8:	d04f      	beq.n	8005e7a <_strtod_l+0x522>
 8005dda:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005dde:	dd22      	ble.n	8005e26 <_strtod_l+0x4ce>
 8005de0:	2500      	movs	r5, #0
 8005de2:	462e      	mov	r6, r5
 8005de4:	9507      	str	r5, [sp, #28]
 8005de6:	9505      	str	r5, [sp, #20]
 8005de8:	2322      	movs	r3, #34	; 0x22
 8005dea:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005f04 <_strtod_l+0x5ac>
 8005dee:	6023      	str	r3, [r4, #0]
 8005df0:	f04f 0a00 	mov.w	sl, #0
 8005df4:	9b07      	ldr	r3, [sp, #28]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	f43f adf2 	beq.w	80059e0 <_strtod_l+0x88>
 8005dfc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005dfe:	4620      	mov	r0, r4
 8005e00:	f001 fe90 	bl	8007b24 <_Bfree>
 8005e04:	9905      	ldr	r1, [sp, #20]
 8005e06:	4620      	mov	r0, r4
 8005e08:	f001 fe8c 	bl	8007b24 <_Bfree>
 8005e0c:	4631      	mov	r1, r6
 8005e0e:	4620      	mov	r0, r4
 8005e10:	f001 fe88 	bl	8007b24 <_Bfree>
 8005e14:	9907      	ldr	r1, [sp, #28]
 8005e16:	4620      	mov	r0, r4
 8005e18:	f001 fe84 	bl	8007b24 <_Bfree>
 8005e1c:	4629      	mov	r1, r5
 8005e1e:	4620      	mov	r0, r4
 8005e20:	f001 fe80 	bl	8007b24 <_Bfree>
 8005e24:	e5dc      	b.n	80059e0 <_strtod_l+0x88>
 8005e26:	4b36      	ldr	r3, [pc, #216]	; (8005f00 <_strtod_l+0x5a8>)
 8005e28:	9304      	str	r3, [sp, #16]
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005e30:	4650      	mov	r0, sl
 8005e32:	4659      	mov	r1, fp
 8005e34:	4699      	mov	r9, r3
 8005e36:	f1b8 0f01 	cmp.w	r8, #1
 8005e3a:	dc21      	bgt.n	8005e80 <_strtod_l+0x528>
 8005e3c:	b10b      	cbz	r3, 8005e42 <_strtod_l+0x4ea>
 8005e3e:	4682      	mov	sl, r0
 8005e40:	468b      	mov	fp, r1
 8005e42:	4b2f      	ldr	r3, [pc, #188]	; (8005f00 <_strtod_l+0x5a8>)
 8005e44:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005e48:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005e4c:	4652      	mov	r2, sl
 8005e4e:	465b      	mov	r3, fp
 8005e50:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005e54:	f7fa fbf0 	bl	8000638 <__aeabi_dmul>
 8005e58:	4b2a      	ldr	r3, [pc, #168]	; (8005f04 <_strtod_l+0x5ac>)
 8005e5a:	460a      	mov	r2, r1
 8005e5c:	400b      	ands	r3, r1
 8005e5e:	492a      	ldr	r1, [pc, #168]	; (8005f08 <_strtod_l+0x5b0>)
 8005e60:	428b      	cmp	r3, r1
 8005e62:	4682      	mov	sl, r0
 8005e64:	d8bc      	bhi.n	8005de0 <_strtod_l+0x488>
 8005e66:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005e6a:	428b      	cmp	r3, r1
 8005e6c:	bf86      	itte	hi
 8005e6e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8005f0c <_strtod_l+0x5b4>
 8005e72:	f04f 3aff 	movhi.w	sl, #4294967295
 8005e76:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	9304      	str	r3, [sp, #16]
 8005e7e:	e084      	b.n	8005f8a <_strtod_l+0x632>
 8005e80:	f018 0f01 	tst.w	r8, #1
 8005e84:	d005      	beq.n	8005e92 <_strtod_l+0x53a>
 8005e86:	9b04      	ldr	r3, [sp, #16]
 8005e88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e8c:	f7fa fbd4 	bl	8000638 <__aeabi_dmul>
 8005e90:	2301      	movs	r3, #1
 8005e92:	9a04      	ldr	r2, [sp, #16]
 8005e94:	3208      	adds	r2, #8
 8005e96:	f109 0901 	add.w	r9, r9, #1
 8005e9a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005e9e:	9204      	str	r2, [sp, #16]
 8005ea0:	e7c9      	b.n	8005e36 <_strtod_l+0x4de>
 8005ea2:	d0ea      	beq.n	8005e7a <_strtod_l+0x522>
 8005ea4:	f1c8 0800 	rsb	r8, r8, #0
 8005ea8:	f018 020f 	ands.w	r2, r8, #15
 8005eac:	d00a      	beq.n	8005ec4 <_strtod_l+0x56c>
 8005eae:	4b13      	ldr	r3, [pc, #76]	; (8005efc <_strtod_l+0x5a4>)
 8005eb0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005eb4:	4650      	mov	r0, sl
 8005eb6:	4659      	mov	r1, fp
 8005eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebc:	f7fa fce6 	bl	800088c <__aeabi_ddiv>
 8005ec0:	4682      	mov	sl, r0
 8005ec2:	468b      	mov	fp, r1
 8005ec4:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005ec8:	d0d7      	beq.n	8005e7a <_strtod_l+0x522>
 8005eca:	f1b8 0f1f 	cmp.w	r8, #31
 8005ece:	dd1f      	ble.n	8005f10 <_strtod_l+0x5b8>
 8005ed0:	2500      	movs	r5, #0
 8005ed2:	462e      	mov	r6, r5
 8005ed4:	9507      	str	r5, [sp, #28]
 8005ed6:	9505      	str	r5, [sp, #20]
 8005ed8:	2322      	movs	r3, #34	; 0x22
 8005eda:	f04f 0a00 	mov.w	sl, #0
 8005ede:	f04f 0b00 	mov.w	fp, #0
 8005ee2:	6023      	str	r3, [r4, #0]
 8005ee4:	e786      	b.n	8005df4 <_strtod_l+0x49c>
 8005ee6:	bf00      	nop
 8005ee8:	08009515 	.word	0x08009515
 8005eec:	08009558 	.word	0x08009558
 8005ef0:	0800950d 	.word	0x0800950d
 8005ef4:	0800969c 	.word	0x0800969c
 8005ef8:	08009948 	.word	0x08009948
 8005efc:	08009828 	.word	0x08009828
 8005f00:	08009800 	.word	0x08009800
 8005f04:	7ff00000 	.word	0x7ff00000
 8005f08:	7ca00000 	.word	0x7ca00000
 8005f0c:	7fefffff 	.word	0x7fefffff
 8005f10:	f018 0310 	ands.w	r3, r8, #16
 8005f14:	bf18      	it	ne
 8005f16:	236a      	movne	r3, #106	; 0x6a
 8005f18:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80062c8 <_strtod_l+0x970>
 8005f1c:	9304      	str	r3, [sp, #16]
 8005f1e:	4650      	mov	r0, sl
 8005f20:	4659      	mov	r1, fp
 8005f22:	2300      	movs	r3, #0
 8005f24:	f018 0f01 	tst.w	r8, #1
 8005f28:	d004      	beq.n	8005f34 <_strtod_l+0x5dc>
 8005f2a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005f2e:	f7fa fb83 	bl	8000638 <__aeabi_dmul>
 8005f32:	2301      	movs	r3, #1
 8005f34:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005f38:	f109 0908 	add.w	r9, r9, #8
 8005f3c:	d1f2      	bne.n	8005f24 <_strtod_l+0x5cc>
 8005f3e:	b10b      	cbz	r3, 8005f44 <_strtod_l+0x5ec>
 8005f40:	4682      	mov	sl, r0
 8005f42:	468b      	mov	fp, r1
 8005f44:	9b04      	ldr	r3, [sp, #16]
 8005f46:	b1c3      	cbz	r3, 8005f7a <_strtod_l+0x622>
 8005f48:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005f4c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	4659      	mov	r1, fp
 8005f54:	dd11      	ble.n	8005f7a <_strtod_l+0x622>
 8005f56:	2b1f      	cmp	r3, #31
 8005f58:	f340 8124 	ble.w	80061a4 <_strtod_l+0x84c>
 8005f5c:	2b34      	cmp	r3, #52	; 0x34
 8005f5e:	bfde      	ittt	le
 8005f60:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005f64:	f04f 33ff 	movle.w	r3, #4294967295
 8005f68:	fa03 f202 	lslle.w	r2, r3, r2
 8005f6c:	f04f 0a00 	mov.w	sl, #0
 8005f70:	bfcc      	ite	gt
 8005f72:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005f76:	ea02 0b01 	andle.w	fp, r2, r1
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	4650      	mov	r0, sl
 8005f80:	4659      	mov	r1, fp
 8005f82:	f7fa fdc1 	bl	8000b08 <__aeabi_dcmpeq>
 8005f86:	2800      	cmp	r0, #0
 8005f88:	d1a2      	bne.n	8005ed0 <_strtod_l+0x578>
 8005f8a:	9b07      	ldr	r3, [sp, #28]
 8005f8c:	9300      	str	r3, [sp, #0]
 8005f8e:	9908      	ldr	r1, [sp, #32]
 8005f90:	462b      	mov	r3, r5
 8005f92:	463a      	mov	r2, r7
 8005f94:	4620      	mov	r0, r4
 8005f96:	f001 fe2d 	bl	8007bf4 <__s2b>
 8005f9a:	9007      	str	r0, [sp, #28]
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	f43f af1f 	beq.w	8005de0 <_strtod_l+0x488>
 8005fa2:	9b05      	ldr	r3, [sp, #20]
 8005fa4:	1b9e      	subs	r6, r3, r6
 8005fa6:	9b06      	ldr	r3, [sp, #24]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	bfb4      	ite	lt
 8005fac:	4633      	movlt	r3, r6
 8005fae:	2300      	movge	r3, #0
 8005fb0:	930c      	str	r3, [sp, #48]	; 0x30
 8005fb2:	9b06      	ldr	r3, [sp, #24]
 8005fb4:	2500      	movs	r5, #0
 8005fb6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005fba:	9312      	str	r3, [sp, #72]	; 0x48
 8005fbc:	462e      	mov	r6, r5
 8005fbe:	9b07      	ldr	r3, [sp, #28]
 8005fc0:	4620      	mov	r0, r4
 8005fc2:	6859      	ldr	r1, [r3, #4]
 8005fc4:	f001 fd6e 	bl	8007aa4 <_Balloc>
 8005fc8:	9005      	str	r0, [sp, #20]
 8005fca:	2800      	cmp	r0, #0
 8005fcc:	f43f af0c 	beq.w	8005de8 <_strtod_l+0x490>
 8005fd0:	9b07      	ldr	r3, [sp, #28]
 8005fd2:	691a      	ldr	r2, [r3, #16]
 8005fd4:	3202      	adds	r2, #2
 8005fd6:	f103 010c 	add.w	r1, r3, #12
 8005fda:	0092      	lsls	r2, r2, #2
 8005fdc:	300c      	adds	r0, #12
 8005fde:	f001 fd53 	bl	8007a88 <memcpy>
 8005fe2:	ec4b ab10 	vmov	d0, sl, fp
 8005fe6:	aa1a      	add	r2, sp, #104	; 0x68
 8005fe8:	a919      	add	r1, sp, #100	; 0x64
 8005fea:	4620      	mov	r0, r4
 8005fec:	f002 f948 	bl	8008280 <__d2b>
 8005ff0:	ec4b ab18 	vmov	d8, sl, fp
 8005ff4:	9018      	str	r0, [sp, #96]	; 0x60
 8005ff6:	2800      	cmp	r0, #0
 8005ff8:	f43f aef6 	beq.w	8005de8 <_strtod_l+0x490>
 8005ffc:	2101      	movs	r1, #1
 8005ffe:	4620      	mov	r0, r4
 8006000:	f001 fe92 	bl	8007d28 <__i2b>
 8006004:	4606      	mov	r6, r0
 8006006:	2800      	cmp	r0, #0
 8006008:	f43f aeee 	beq.w	8005de8 <_strtod_l+0x490>
 800600c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800600e:	9904      	ldr	r1, [sp, #16]
 8006010:	2b00      	cmp	r3, #0
 8006012:	bfab      	itete	ge
 8006014:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8006016:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006018:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800601a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800601e:	bfac      	ite	ge
 8006020:	eb03 0902 	addge.w	r9, r3, r2
 8006024:	1ad7      	sublt	r7, r2, r3
 8006026:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006028:	eba3 0801 	sub.w	r8, r3, r1
 800602c:	4490      	add	r8, r2
 800602e:	4ba1      	ldr	r3, [pc, #644]	; (80062b4 <_strtod_l+0x95c>)
 8006030:	f108 38ff 	add.w	r8, r8, #4294967295
 8006034:	4598      	cmp	r8, r3
 8006036:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800603a:	f280 80c7 	bge.w	80061cc <_strtod_l+0x874>
 800603e:	eba3 0308 	sub.w	r3, r3, r8
 8006042:	2b1f      	cmp	r3, #31
 8006044:	eba2 0203 	sub.w	r2, r2, r3
 8006048:	f04f 0101 	mov.w	r1, #1
 800604c:	f300 80b1 	bgt.w	80061b2 <_strtod_l+0x85a>
 8006050:	fa01 f303 	lsl.w	r3, r1, r3
 8006054:	930d      	str	r3, [sp, #52]	; 0x34
 8006056:	2300      	movs	r3, #0
 8006058:	9308      	str	r3, [sp, #32]
 800605a:	eb09 0802 	add.w	r8, r9, r2
 800605e:	9b04      	ldr	r3, [sp, #16]
 8006060:	45c1      	cmp	r9, r8
 8006062:	4417      	add	r7, r2
 8006064:	441f      	add	r7, r3
 8006066:	464b      	mov	r3, r9
 8006068:	bfa8      	it	ge
 800606a:	4643      	movge	r3, r8
 800606c:	42bb      	cmp	r3, r7
 800606e:	bfa8      	it	ge
 8006070:	463b      	movge	r3, r7
 8006072:	2b00      	cmp	r3, #0
 8006074:	bfc2      	ittt	gt
 8006076:	eba8 0803 	subgt.w	r8, r8, r3
 800607a:	1aff      	subgt	r7, r7, r3
 800607c:	eba9 0903 	subgt.w	r9, r9, r3
 8006080:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006082:	2b00      	cmp	r3, #0
 8006084:	dd17      	ble.n	80060b6 <_strtod_l+0x75e>
 8006086:	4631      	mov	r1, r6
 8006088:	461a      	mov	r2, r3
 800608a:	4620      	mov	r0, r4
 800608c:	f001 ff0c 	bl	8007ea8 <__pow5mult>
 8006090:	4606      	mov	r6, r0
 8006092:	2800      	cmp	r0, #0
 8006094:	f43f aea8 	beq.w	8005de8 <_strtod_l+0x490>
 8006098:	4601      	mov	r1, r0
 800609a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800609c:	4620      	mov	r0, r4
 800609e:	f001 fe59 	bl	8007d54 <__multiply>
 80060a2:	900b      	str	r0, [sp, #44]	; 0x2c
 80060a4:	2800      	cmp	r0, #0
 80060a6:	f43f ae9f 	beq.w	8005de8 <_strtod_l+0x490>
 80060aa:	9918      	ldr	r1, [sp, #96]	; 0x60
 80060ac:	4620      	mov	r0, r4
 80060ae:	f001 fd39 	bl	8007b24 <_Bfree>
 80060b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80060b4:	9318      	str	r3, [sp, #96]	; 0x60
 80060b6:	f1b8 0f00 	cmp.w	r8, #0
 80060ba:	f300 808c 	bgt.w	80061d6 <_strtod_l+0x87e>
 80060be:	9b06      	ldr	r3, [sp, #24]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	dd08      	ble.n	80060d6 <_strtod_l+0x77e>
 80060c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80060c6:	9905      	ldr	r1, [sp, #20]
 80060c8:	4620      	mov	r0, r4
 80060ca:	f001 feed 	bl	8007ea8 <__pow5mult>
 80060ce:	9005      	str	r0, [sp, #20]
 80060d0:	2800      	cmp	r0, #0
 80060d2:	f43f ae89 	beq.w	8005de8 <_strtod_l+0x490>
 80060d6:	2f00      	cmp	r7, #0
 80060d8:	dd08      	ble.n	80060ec <_strtod_l+0x794>
 80060da:	9905      	ldr	r1, [sp, #20]
 80060dc:	463a      	mov	r2, r7
 80060de:	4620      	mov	r0, r4
 80060e0:	f001 ff3c 	bl	8007f5c <__lshift>
 80060e4:	9005      	str	r0, [sp, #20]
 80060e6:	2800      	cmp	r0, #0
 80060e8:	f43f ae7e 	beq.w	8005de8 <_strtod_l+0x490>
 80060ec:	f1b9 0f00 	cmp.w	r9, #0
 80060f0:	dd08      	ble.n	8006104 <_strtod_l+0x7ac>
 80060f2:	4631      	mov	r1, r6
 80060f4:	464a      	mov	r2, r9
 80060f6:	4620      	mov	r0, r4
 80060f8:	f001 ff30 	bl	8007f5c <__lshift>
 80060fc:	4606      	mov	r6, r0
 80060fe:	2800      	cmp	r0, #0
 8006100:	f43f ae72 	beq.w	8005de8 <_strtod_l+0x490>
 8006104:	9a05      	ldr	r2, [sp, #20]
 8006106:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006108:	4620      	mov	r0, r4
 800610a:	f001 ffb3 	bl	8008074 <__mdiff>
 800610e:	4605      	mov	r5, r0
 8006110:	2800      	cmp	r0, #0
 8006112:	f43f ae69 	beq.w	8005de8 <_strtod_l+0x490>
 8006116:	68c3      	ldr	r3, [r0, #12]
 8006118:	930b      	str	r3, [sp, #44]	; 0x2c
 800611a:	2300      	movs	r3, #0
 800611c:	60c3      	str	r3, [r0, #12]
 800611e:	4631      	mov	r1, r6
 8006120:	f001 ff8c 	bl	800803c <__mcmp>
 8006124:	2800      	cmp	r0, #0
 8006126:	da60      	bge.n	80061ea <_strtod_l+0x892>
 8006128:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800612a:	ea53 030a 	orrs.w	r3, r3, sl
 800612e:	f040 8082 	bne.w	8006236 <_strtod_l+0x8de>
 8006132:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006136:	2b00      	cmp	r3, #0
 8006138:	d17d      	bne.n	8006236 <_strtod_l+0x8de>
 800613a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800613e:	0d1b      	lsrs	r3, r3, #20
 8006140:	051b      	lsls	r3, r3, #20
 8006142:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006146:	d976      	bls.n	8006236 <_strtod_l+0x8de>
 8006148:	696b      	ldr	r3, [r5, #20]
 800614a:	b913      	cbnz	r3, 8006152 <_strtod_l+0x7fa>
 800614c:	692b      	ldr	r3, [r5, #16]
 800614e:	2b01      	cmp	r3, #1
 8006150:	dd71      	ble.n	8006236 <_strtod_l+0x8de>
 8006152:	4629      	mov	r1, r5
 8006154:	2201      	movs	r2, #1
 8006156:	4620      	mov	r0, r4
 8006158:	f001 ff00 	bl	8007f5c <__lshift>
 800615c:	4631      	mov	r1, r6
 800615e:	4605      	mov	r5, r0
 8006160:	f001 ff6c 	bl	800803c <__mcmp>
 8006164:	2800      	cmp	r0, #0
 8006166:	dd66      	ble.n	8006236 <_strtod_l+0x8de>
 8006168:	9904      	ldr	r1, [sp, #16]
 800616a:	4a53      	ldr	r2, [pc, #332]	; (80062b8 <_strtod_l+0x960>)
 800616c:	465b      	mov	r3, fp
 800616e:	2900      	cmp	r1, #0
 8006170:	f000 8081 	beq.w	8006276 <_strtod_l+0x91e>
 8006174:	ea02 010b 	and.w	r1, r2, fp
 8006178:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800617c:	dc7b      	bgt.n	8006276 <_strtod_l+0x91e>
 800617e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006182:	f77f aea9 	ble.w	8005ed8 <_strtod_l+0x580>
 8006186:	4b4d      	ldr	r3, [pc, #308]	; (80062bc <_strtod_l+0x964>)
 8006188:	4650      	mov	r0, sl
 800618a:	4659      	mov	r1, fp
 800618c:	2200      	movs	r2, #0
 800618e:	f7fa fa53 	bl	8000638 <__aeabi_dmul>
 8006192:	460b      	mov	r3, r1
 8006194:	4303      	orrs	r3, r0
 8006196:	bf08      	it	eq
 8006198:	2322      	moveq	r3, #34	; 0x22
 800619a:	4682      	mov	sl, r0
 800619c:	468b      	mov	fp, r1
 800619e:	bf08      	it	eq
 80061a0:	6023      	streq	r3, [r4, #0]
 80061a2:	e62b      	b.n	8005dfc <_strtod_l+0x4a4>
 80061a4:	f04f 32ff 	mov.w	r2, #4294967295
 80061a8:	fa02 f303 	lsl.w	r3, r2, r3
 80061ac:	ea03 0a0a 	and.w	sl, r3, sl
 80061b0:	e6e3      	b.n	8005f7a <_strtod_l+0x622>
 80061b2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80061b6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80061ba:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80061be:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80061c2:	fa01 f308 	lsl.w	r3, r1, r8
 80061c6:	9308      	str	r3, [sp, #32]
 80061c8:	910d      	str	r1, [sp, #52]	; 0x34
 80061ca:	e746      	b.n	800605a <_strtod_l+0x702>
 80061cc:	2300      	movs	r3, #0
 80061ce:	9308      	str	r3, [sp, #32]
 80061d0:	2301      	movs	r3, #1
 80061d2:	930d      	str	r3, [sp, #52]	; 0x34
 80061d4:	e741      	b.n	800605a <_strtod_l+0x702>
 80061d6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80061d8:	4642      	mov	r2, r8
 80061da:	4620      	mov	r0, r4
 80061dc:	f001 febe 	bl	8007f5c <__lshift>
 80061e0:	9018      	str	r0, [sp, #96]	; 0x60
 80061e2:	2800      	cmp	r0, #0
 80061e4:	f47f af6b 	bne.w	80060be <_strtod_l+0x766>
 80061e8:	e5fe      	b.n	8005de8 <_strtod_l+0x490>
 80061ea:	465f      	mov	r7, fp
 80061ec:	d16e      	bne.n	80062cc <_strtod_l+0x974>
 80061ee:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80061f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80061f4:	b342      	cbz	r2, 8006248 <_strtod_l+0x8f0>
 80061f6:	4a32      	ldr	r2, [pc, #200]	; (80062c0 <_strtod_l+0x968>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d128      	bne.n	800624e <_strtod_l+0x8f6>
 80061fc:	9b04      	ldr	r3, [sp, #16]
 80061fe:	4651      	mov	r1, sl
 8006200:	b1eb      	cbz	r3, 800623e <_strtod_l+0x8e6>
 8006202:	4b2d      	ldr	r3, [pc, #180]	; (80062b8 <_strtod_l+0x960>)
 8006204:	403b      	ands	r3, r7
 8006206:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800620a:	f04f 32ff 	mov.w	r2, #4294967295
 800620e:	d819      	bhi.n	8006244 <_strtod_l+0x8ec>
 8006210:	0d1b      	lsrs	r3, r3, #20
 8006212:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006216:	fa02 f303 	lsl.w	r3, r2, r3
 800621a:	4299      	cmp	r1, r3
 800621c:	d117      	bne.n	800624e <_strtod_l+0x8f6>
 800621e:	4b29      	ldr	r3, [pc, #164]	; (80062c4 <_strtod_l+0x96c>)
 8006220:	429f      	cmp	r7, r3
 8006222:	d102      	bne.n	800622a <_strtod_l+0x8d2>
 8006224:	3101      	adds	r1, #1
 8006226:	f43f addf 	beq.w	8005de8 <_strtod_l+0x490>
 800622a:	4b23      	ldr	r3, [pc, #140]	; (80062b8 <_strtod_l+0x960>)
 800622c:	403b      	ands	r3, r7
 800622e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006232:	f04f 0a00 	mov.w	sl, #0
 8006236:	9b04      	ldr	r3, [sp, #16]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d1a4      	bne.n	8006186 <_strtod_l+0x82e>
 800623c:	e5de      	b.n	8005dfc <_strtod_l+0x4a4>
 800623e:	f04f 33ff 	mov.w	r3, #4294967295
 8006242:	e7ea      	b.n	800621a <_strtod_l+0x8c2>
 8006244:	4613      	mov	r3, r2
 8006246:	e7e8      	b.n	800621a <_strtod_l+0x8c2>
 8006248:	ea53 030a 	orrs.w	r3, r3, sl
 800624c:	d08c      	beq.n	8006168 <_strtod_l+0x810>
 800624e:	9b08      	ldr	r3, [sp, #32]
 8006250:	b1db      	cbz	r3, 800628a <_strtod_l+0x932>
 8006252:	423b      	tst	r3, r7
 8006254:	d0ef      	beq.n	8006236 <_strtod_l+0x8de>
 8006256:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006258:	9a04      	ldr	r2, [sp, #16]
 800625a:	4650      	mov	r0, sl
 800625c:	4659      	mov	r1, fp
 800625e:	b1c3      	cbz	r3, 8006292 <_strtod_l+0x93a>
 8006260:	f7ff fb5e 	bl	8005920 <sulp>
 8006264:	4602      	mov	r2, r0
 8006266:	460b      	mov	r3, r1
 8006268:	ec51 0b18 	vmov	r0, r1, d8
 800626c:	f7fa f82e 	bl	80002cc <__adddf3>
 8006270:	4682      	mov	sl, r0
 8006272:	468b      	mov	fp, r1
 8006274:	e7df      	b.n	8006236 <_strtod_l+0x8de>
 8006276:	4013      	ands	r3, r2
 8006278:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800627c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006280:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006284:	f04f 3aff 	mov.w	sl, #4294967295
 8006288:	e7d5      	b.n	8006236 <_strtod_l+0x8de>
 800628a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800628c:	ea13 0f0a 	tst.w	r3, sl
 8006290:	e7e0      	b.n	8006254 <_strtod_l+0x8fc>
 8006292:	f7ff fb45 	bl	8005920 <sulp>
 8006296:	4602      	mov	r2, r0
 8006298:	460b      	mov	r3, r1
 800629a:	ec51 0b18 	vmov	r0, r1, d8
 800629e:	f7fa f813 	bl	80002c8 <__aeabi_dsub>
 80062a2:	2200      	movs	r2, #0
 80062a4:	2300      	movs	r3, #0
 80062a6:	4682      	mov	sl, r0
 80062a8:	468b      	mov	fp, r1
 80062aa:	f7fa fc2d 	bl	8000b08 <__aeabi_dcmpeq>
 80062ae:	2800      	cmp	r0, #0
 80062b0:	d0c1      	beq.n	8006236 <_strtod_l+0x8de>
 80062b2:	e611      	b.n	8005ed8 <_strtod_l+0x580>
 80062b4:	fffffc02 	.word	0xfffffc02
 80062b8:	7ff00000 	.word	0x7ff00000
 80062bc:	39500000 	.word	0x39500000
 80062c0:	000fffff 	.word	0x000fffff
 80062c4:	7fefffff 	.word	0x7fefffff
 80062c8:	08009570 	.word	0x08009570
 80062cc:	4631      	mov	r1, r6
 80062ce:	4628      	mov	r0, r5
 80062d0:	f002 f832 	bl	8008338 <__ratio>
 80062d4:	ec59 8b10 	vmov	r8, r9, d0
 80062d8:	ee10 0a10 	vmov	r0, s0
 80062dc:	2200      	movs	r2, #0
 80062de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80062e2:	4649      	mov	r1, r9
 80062e4:	f7fa fc24 	bl	8000b30 <__aeabi_dcmple>
 80062e8:	2800      	cmp	r0, #0
 80062ea:	d07a      	beq.n	80063e2 <_strtod_l+0xa8a>
 80062ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d04a      	beq.n	8006388 <_strtod_l+0xa30>
 80062f2:	4b95      	ldr	r3, [pc, #596]	; (8006548 <_strtod_l+0xbf0>)
 80062f4:	2200      	movs	r2, #0
 80062f6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80062fa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006548 <_strtod_l+0xbf0>
 80062fe:	f04f 0800 	mov.w	r8, #0
 8006302:	4b92      	ldr	r3, [pc, #584]	; (800654c <_strtod_l+0xbf4>)
 8006304:	403b      	ands	r3, r7
 8006306:	930d      	str	r3, [sp, #52]	; 0x34
 8006308:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800630a:	4b91      	ldr	r3, [pc, #580]	; (8006550 <_strtod_l+0xbf8>)
 800630c:	429a      	cmp	r2, r3
 800630e:	f040 80b0 	bne.w	8006472 <_strtod_l+0xb1a>
 8006312:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006316:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800631a:	ec4b ab10 	vmov	d0, sl, fp
 800631e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006322:	f001 ff31 	bl	8008188 <__ulp>
 8006326:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800632a:	ec53 2b10 	vmov	r2, r3, d0
 800632e:	f7fa f983 	bl	8000638 <__aeabi_dmul>
 8006332:	4652      	mov	r2, sl
 8006334:	465b      	mov	r3, fp
 8006336:	f7f9 ffc9 	bl	80002cc <__adddf3>
 800633a:	460b      	mov	r3, r1
 800633c:	4983      	ldr	r1, [pc, #524]	; (800654c <_strtod_l+0xbf4>)
 800633e:	4a85      	ldr	r2, [pc, #532]	; (8006554 <_strtod_l+0xbfc>)
 8006340:	4019      	ands	r1, r3
 8006342:	4291      	cmp	r1, r2
 8006344:	4682      	mov	sl, r0
 8006346:	d960      	bls.n	800640a <_strtod_l+0xab2>
 8006348:	ee18 3a90 	vmov	r3, s17
 800634c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006350:	4293      	cmp	r3, r2
 8006352:	d104      	bne.n	800635e <_strtod_l+0xa06>
 8006354:	ee18 3a10 	vmov	r3, s16
 8006358:	3301      	adds	r3, #1
 800635a:	f43f ad45 	beq.w	8005de8 <_strtod_l+0x490>
 800635e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8006560 <_strtod_l+0xc08>
 8006362:	f04f 3aff 	mov.w	sl, #4294967295
 8006366:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006368:	4620      	mov	r0, r4
 800636a:	f001 fbdb 	bl	8007b24 <_Bfree>
 800636e:	9905      	ldr	r1, [sp, #20]
 8006370:	4620      	mov	r0, r4
 8006372:	f001 fbd7 	bl	8007b24 <_Bfree>
 8006376:	4631      	mov	r1, r6
 8006378:	4620      	mov	r0, r4
 800637a:	f001 fbd3 	bl	8007b24 <_Bfree>
 800637e:	4629      	mov	r1, r5
 8006380:	4620      	mov	r0, r4
 8006382:	f001 fbcf 	bl	8007b24 <_Bfree>
 8006386:	e61a      	b.n	8005fbe <_strtod_l+0x666>
 8006388:	f1ba 0f00 	cmp.w	sl, #0
 800638c:	d11b      	bne.n	80063c6 <_strtod_l+0xa6e>
 800638e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006392:	b9f3      	cbnz	r3, 80063d2 <_strtod_l+0xa7a>
 8006394:	4b6c      	ldr	r3, [pc, #432]	; (8006548 <_strtod_l+0xbf0>)
 8006396:	2200      	movs	r2, #0
 8006398:	4640      	mov	r0, r8
 800639a:	4649      	mov	r1, r9
 800639c:	f7fa fbbe 	bl	8000b1c <__aeabi_dcmplt>
 80063a0:	b9d0      	cbnz	r0, 80063d8 <_strtod_l+0xa80>
 80063a2:	4640      	mov	r0, r8
 80063a4:	4649      	mov	r1, r9
 80063a6:	4b6c      	ldr	r3, [pc, #432]	; (8006558 <_strtod_l+0xc00>)
 80063a8:	2200      	movs	r2, #0
 80063aa:	f7fa f945 	bl	8000638 <__aeabi_dmul>
 80063ae:	4680      	mov	r8, r0
 80063b0:	4689      	mov	r9, r1
 80063b2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80063b6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80063ba:	9315      	str	r3, [sp, #84]	; 0x54
 80063bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80063c0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80063c4:	e79d      	b.n	8006302 <_strtod_l+0x9aa>
 80063c6:	f1ba 0f01 	cmp.w	sl, #1
 80063ca:	d102      	bne.n	80063d2 <_strtod_l+0xa7a>
 80063cc:	2f00      	cmp	r7, #0
 80063ce:	f43f ad83 	beq.w	8005ed8 <_strtod_l+0x580>
 80063d2:	4b62      	ldr	r3, [pc, #392]	; (800655c <_strtod_l+0xc04>)
 80063d4:	2200      	movs	r2, #0
 80063d6:	e78e      	b.n	80062f6 <_strtod_l+0x99e>
 80063d8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8006558 <_strtod_l+0xc00>
 80063dc:	f04f 0800 	mov.w	r8, #0
 80063e0:	e7e7      	b.n	80063b2 <_strtod_l+0xa5a>
 80063e2:	4b5d      	ldr	r3, [pc, #372]	; (8006558 <_strtod_l+0xc00>)
 80063e4:	4640      	mov	r0, r8
 80063e6:	4649      	mov	r1, r9
 80063e8:	2200      	movs	r2, #0
 80063ea:	f7fa f925 	bl	8000638 <__aeabi_dmul>
 80063ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80063f0:	4680      	mov	r8, r0
 80063f2:	4689      	mov	r9, r1
 80063f4:	b933      	cbnz	r3, 8006404 <_strtod_l+0xaac>
 80063f6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80063fa:	900e      	str	r0, [sp, #56]	; 0x38
 80063fc:	930f      	str	r3, [sp, #60]	; 0x3c
 80063fe:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8006402:	e7dd      	b.n	80063c0 <_strtod_l+0xa68>
 8006404:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006408:	e7f9      	b.n	80063fe <_strtod_l+0xaa6>
 800640a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800640e:	9b04      	ldr	r3, [sp, #16]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1a8      	bne.n	8006366 <_strtod_l+0xa0e>
 8006414:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006418:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800641a:	0d1b      	lsrs	r3, r3, #20
 800641c:	051b      	lsls	r3, r3, #20
 800641e:	429a      	cmp	r2, r3
 8006420:	d1a1      	bne.n	8006366 <_strtod_l+0xa0e>
 8006422:	4640      	mov	r0, r8
 8006424:	4649      	mov	r1, r9
 8006426:	f7fa fc67 	bl	8000cf8 <__aeabi_d2lz>
 800642a:	f7fa f8d7 	bl	80005dc <__aeabi_l2d>
 800642e:	4602      	mov	r2, r0
 8006430:	460b      	mov	r3, r1
 8006432:	4640      	mov	r0, r8
 8006434:	4649      	mov	r1, r9
 8006436:	f7f9 ff47 	bl	80002c8 <__aeabi_dsub>
 800643a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800643c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006440:	ea43 030a 	orr.w	r3, r3, sl
 8006444:	4313      	orrs	r3, r2
 8006446:	4680      	mov	r8, r0
 8006448:	4689      	mov	r9, r1
 800644a:	d055      	beq.n	80064f8 <_strtod_l+0xba0>
 800644c:	a336      	add	r3, pc, #216	; (adr r3, 8006528 <_strtod_l+0xbd0>)
 800644e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006452:	f7fa fb63 	bl	8000b1c <__aeabi_dcmplt>
 8006456:	2800      	cmp	r0, #0
 8006458:	f47f acd0 	bne.w	8005dfc <_strtod_l+0x4a4>
 800645c:	a334      	add	r3, pc, #208	; (adr r3, 8006530 <_strtod_l+0xbd8>)
 800645e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006462:	4640      	mov	r0, r8
 8006464:	4649      	mov	r1, r9
 8006466:	f7fa fb77 	bl	8000b58 <__aeabi_dcmpgt>
 800646a:	2800      	cmp	r0, #0
 800646c:	f43f af7b 	beq.w	8006366 <_strtod_l+0xa0e>
 8006470:	e4c4      	b.n	8005dfc <_strtod_l+0x4a4>
 8006472:	9b04      	ldr	r3, [sp, #16]
 8006474:	b333      	cbz	r3, 80064c4 <_strtod_l+0xb6c>
 8006476:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006478:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800647c:	d822      	bhi.n	80064c4 <_strtod_l+0xb6c>
 800647e:	a32e      	add	r3, pc, #184	; (adr r3, 8006538 <_strtod_l+0xbe0>)
 8006480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006484:	4640      	mov	r0, r8
 8006486:	4649      	mov	r1, r9
 8006488:	f7fa fb52 	bl	8000b30 <__aeabi_dcmple>
 800648c:	b1a0      	cbz	r0, 80064b8 <_strtod_l+0xb60>
 800648e:	4649      	mov	r1, r9
 8006490:	4640      	mov	r0, r8
 8006492:	f7fa fba9 	bl	8000be8 <__aeabi_d2uiz>
 8006496:	2801      	cmp	r0, #1
 8006498:	bf38      	it	cc
 800649a:	2001      	movcc	r0, #1
 800649c:	f7fa f852 	bl	8000544 <__aeabi_ui2d>
 80064a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064a2:	4680      	mov	r8, r0
 80064a4:	4689      	mov	r9, r1
 80064a6:	bb23      	cbnz	r3, 80064f2 <_strtod_l+0xb9a>
 80064a8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80064ac:	9010      	str	r0, [sp, #64]	; 0x40
 80064ae:	9311      	str	r3, [sp, #68]	; 0x44
 80064b0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80064b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80064b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064ba:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80064bc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80064c0:	1a9b      	subs	r3, r3, r2
 80064c2:	9309      	str	r3, [sp, #36]	; 0x24
 80064c4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80064c8:	eeb0 0a48 	vmov.f32	s0, s16
 80064cc:	eef0 0a68 	vmov.f32	s1, s17
 80064d0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80064d4:	f001 fe58 	bl	8008188 <__ulp>
 80064d8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80064dc:	ec53 2b10 	vmov	r2, r3, d0
 80064e0:	f7fa f8aa 	bl	8000638 <__aeabi_dmul>
 80064e4:	ec53 2b18 	vmov	r2, r3, d8
 80064e8:	f7f9 fef0 	bl	80002cc <__adddf3>
 80064ec:	4682      	mov	sl, r0
 80064ee:	468b      	mov	fp, r1
 80064f0:	e78d      	b.n	800640e <_strtod_l+0xab6>
 80064f2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80064f6:	e7db      	b.n	80064b0 <_strtod_l+0xb58>
 80064f8:	a311      	add	r3, pc, #68	; (adr r3, 8006540 <_strtod_l+0xbe8>)
 80064fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064fe:	f7fa fb0d 	bl	8000b1c <__aeabi_dcmplt>
 8006502:	e7b2      	b.n	800646a <_strtod_l+0xb12>
 8006504:	2300      	movs	r3, #0
 8006506:	930a      	str	r3, [sp, #40]	; 0x28
 8006508:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800650a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800650c:	6013      	str	r3, [r2, #0]
 800650e:	f7ff ba6b 	b.w	80059e8 <_strtod_l+0x90>
 8006512:	2a65      	cmp	r2, #101	; 0x65
 8006514:	f43f ab5f 	beq.w	8005bd6 <_strtod_l+0x27e>
 8006518:	2a45      	cmp	r2, #69	; 0x45
 800651a:	f43f ab5c 	beq.w	8005bd6 <_strtod_l+0x27e>
 800651e:	2301      	movs	r3, #1
 8006520:	f7ff bb94 	b.w	8005c4c <_strtod_l+0x2f4>
 8006524:	f3af 8000 	nop.w
 8006528:	94a03595 	.word	0x94a03595
 800652c:	3fdfffff 	.word	0x3fdfffff
 8006530:	35afe535 	.word	0x35afe535
 8006534:	3fe00000 	.word	0x3fe00000
 8006538:	ffc00000 	.word	0xffc00000
 800653c:	41dfffff 	.word	0x41dfffff
 8006540:	94a03595 	.word	0x94a03595
 8006544:	3fcfffff 	.word	0x3fcfffff
 8006548:	3ff00000 	.word	0x3ff00000
 800654c:	7ff00000 	.word	0x7ff00000
 8006550:	7fe00000 	.word	0x7fe00000
 8006554:	7c9fffff 	.word	0x7c9fffff
 8006558:	3fe00000 	.word	0x3fe00000
 800655c:	bff00000 	.word	0xbff00000
 8006560:	7fefffff 	.word	0x7fefffff

08006564 <_strtod_r>:
 8006564:	4b01      	ldr	r3, [pc, #4]	; (800656c <_strtod_r+0x8>)
 8006566:	f7ff b9f7 	b.w	8005958 <_strtod_l>
 800656a:	bf00      	nop
 800656c:	20000074 	.word	0x20000074

08006570 <_strtol_l.constprop.0>:
 8006570:	2b01      	cmp	r3, #1
 8006572:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006576:	d001      	beq.n	800657c <_strtol_l.constprop.0+0xc>
 8006578:	2b24      	cmp	r3, #36	; 0x24
 800657a:	d906      	bls.n	800658a <_strtol_l.constprop.0+0x1a>
 800657c:	f7fe fafe 	bl	8004b7c <__errno>
 8006580:	2316      	movs	r3, #22
 8006582:	6003      	str	r3, [r0, #0]
 8006584:	2000      	movs	r0, #0
 8006586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800658a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006670 <_strtol_l.constprop.0+0x100>
 800658e:	460d      	mov	r5, r1
 8006590:	462e      	mov	r6, r5
 8006592:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006596:	f814 700c 	ldrb.w	r7, [r4, ip]
 800659a:	f017 0708 	ands.w	r7, r7, #8
 800659e:	d1f7      	bne.n	8006590 <_strtol_l.constprop.0+0x20>
 80065a0:	2c2d      	cmp	r4, #45	; 0x2d
 80065a2:	d132      	bne.n	800660a <_strtol_l.constprop.0+0x9a>
 80065a4:	782c      	ldrb	r4, [r5, #0]
 80065a6:	2701      	movs	r7, #1
 80065a8:	1cb5      	adds	r5, r6, #2
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d05b      	beq.n	8006666 <_strtol_l.constprop.0+0xf6>
 80065ae:	2b10      	cmp	r3, #16
 80065b0:	d109      	bne.n	80065c6 <_strtol_l.constprop.0+0x56>
 80065b2:	2c30      	cmp	r4, #48	; 0x30
 80065b4:	d107      	bne.n	80065c6 <_strtol_l.constprop.0+0x56>
 80065b6:	782c      	ldrb	r4, [r5, #0]
 80065b8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80065bc:	2c58      	cmp	r4, #88	; 0x58
 80065be:	d14d      	bne.n	800665c <_strtol_l.constprop.0+0xec>
 80065c0:	786c      	ldrb	r4, [r5, #1]
 80065c2:	2310      	movs	r3, #16
 80065c4:	3502      	adds	r5, #2
 80065c6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80065ca:	f108 38ff 	add.w	r8, r8, #4294967295
 80065ce:	f04f 0c00 	mov.w	ip, #0
 80065d2:	fbb8 f9f3 	udiv	r9, r8, r3
 80065d6:	4666      	mov	r6, ip
 80065d8:	fb03 8a19 	mls	sl, r3, r9, r8
 80065dc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80065e0:	f1be 0f09 	cmp.w	lr, #9
 80065e4:	d816      	bhi.n	8006614 <_strtol_l.constprop.0+0xa4>
 80065e6:	4674      	mov	r4, lr
 80065e8:	42a3      	cmp	r3, r4
 80065ea:	dd24      	ble.n	8006636 <_strtol_l.constprop.0+0xc6>
 80065ec:	f1bc 0f00 	cmp.w	ip, #0
 80065f0:	db1e      	blt.n	8006630 <_strtol_l.constprop.0+0xc0>
 80065f2:	45b1      	cmp	r9, r6
 80065f4:	d31c      	bcc.n	8006630 <_strtol_l.constprop.0+0xc0>
 80065f6:	d101      	bne.n	80065fc <_strtol_l.constprop.0+0x8c>
 80065f8:	45a2      	cmp	sl, r4
 80065fa:	db19      	blt.n	8006630 <_strtol_l.constprop.0+0xc0>
 80065fc:	fb06 4603 	mla	r6, r6, r3, r4
 8006600:	f04f 0c01 	mov.w	ip, #1
 8006604:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006608:	e7e8      	b.n	80065dc <_strtol_l.constprop.0+0x6c>
 800660a:	2c2b      	cmp	r4, #43	; 0x2b
 800660c:	bf04      	itt	eq
 800660e:	782c      	ldrbeq	r4, [r5, #0]
 8006610:	1cb5      	addeq	r5, r6, #2
 8006612:	e7ca      	b.n	80065aa <_strtol_l.constprop.0+0x3a>
 8006614:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006618:	f1be 0f19 	cmp.w	lr, #25
 800661c:	d801      	bhi.n	8006622 <_strtol_l.constprop.0+0xb2>
 800661e:	3c37      	subs	r4, #55	; 0x37
 8006620:	e7e2      	b.n	80065e8 <_strtol_l.constprop.0+0x78>
 8006622:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006626:	f1be 0f19 	cmp.w	lr, #25
 800662a:	d804      	bhi.n	8006636 <_strtol_l.constprop.0+0xc6>
 800662c:	3c57      	subs	r4, #87	; 0x57
 800662e:	e7db      	b.n	80065e8 <_strtol_l.constprop.0+0x78>
 8006630:	f04f 3cff 	mov.w	ip, #4294967295
 8006634:	e7e6      	b.n	8006604 <_strtol_l.constprop.0+0x94>
 8006636:	f1bc 0f00 	cmp.w	ip, #0
 800663a:	da05      	bge.n	8006648 <_strtol_l.constprop.0+0xd8>
 800663c:	2322      	movs	r3, #34	; 0x22
 800663e:	6003      	str	r3, [r0, #0]
 8006640:	4646      	mov	r6, r8
 8006642:	b942      	cbnz	r2, 8006656 <_strtol_l.constprop.0+0xe6>
 8006644:	4630      	mov	r0, r6
 8006646:	e79e      	b.n	8006586 <_strtol_l.constprop.0+0x16>
 8006648:	b107      	cbz	r7, 800664c <_strtol_l.constprop.0+0xdc>
 800664a:	4276      	negs	r6, r6
 800664c:	2a00      	cmp	r2, #0
 800664e:	d0f9      	beq.n	8006644 <_strtol_l.constprop.0+0xd4>
 8006650:	f1bc 0f00 	cmp.w	ip, #0
 8006654:	d000      	beq.n	8006658 <_strtol_l.constprop.0+0xe8>
 8006656:	1e69      	subs	r1, r5, #1
 8006658:	6011      	str	r1, [r2, #0]
 800665a:	e7f3      	b.n	8006644 <_strtol_l.constprop.0+0xd4>
 800665c:	2430      	movs	r4, #48	; 0x30
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1b1      	bne.n	80065c6 <_strtol_l.constprop.0+0x56>
 8006662:	2308      	movs	r3, #8
 8006664:	e7af      	b.n	80065c6 <_strtol_l.constprop.0+0x56>
 8006666:	2c30      	cmp	r4, #48	; 0x30
 8006668:	d0a5      	beq.n	80065b6 <_strtol_l.constprop.0+0x46>
 800666a:	230a      	movs	r3, #10
 800666c:	e7ab      	b.n	80065c6 <_strtol_l.constprop.0+0x56>
 800666e:	bf00      	nop
 8006670:	08009599 	.word	0x08009599

08006674 <_strtol_r>:
 8006674:	f7ff bf7c 	b.w	8006570 <_strtol_l.constprop.0>

08006678 <quorem>:
 8006678:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800667c:	6903      	ldr	r3, [r0, #16]
 800667e:	690c      	ldr	r4, [r1, #16]
 8006680:	42a3      	cmp	r3, r4
 8006682:	4607      	mov	r7, r0
 8006684:	f2c0 8081 	blt.w	800678a <quorem+0x112>
 8006688:	3c01      	subs	r4, #1
 800668a:	f101 0814 	add.w	r8, r1, #20
 800668e:	f100 0514 	add.w	r5, r0, #20
 8006692:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006696:	9301      	str	r3, [sp, #4]
 8006698:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800669c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80066a0:	3301      	adds	r3, #1
 80066a2:	429a      	cmp	r2, r3
 80066a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80066a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80066ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80066b0:	d331      	bcc.n	8006716 <quorem+0x9e>
 80066b2:	f04f 0e00 	mov.w	lr, #0
 80066b6:	4640      	mov	r0, r8
 80066b8:	46ac      	mov	ip, r5
 80066ba:	46f2      	mov	sl, lr
 80066bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80066c0:	b293      	uxth	r3, r2
 80066c2:	fb06 e303 	mla	r3, r6, r3, lr
 80066c6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80066ca:	b29b      	uxth	r3, r3
 80066cc:	ebaa 0303 	sub.w	r3, sl, r3
 80066d0:	f8dc a000 	ldr.w	sl, [ip]
 80066d4:	0c12      	lsrs	r2, r2, #16
 80066d6:	fa13 f38a 	uxtah	r3, r3, sl
 80066da:	fb06 e202 	mla	r2, r6, r2, lr
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	9b00      	ldr	r3, [sp, #0]
 80066e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80066e6:	b292      	uxth	r2, r2
 80066e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80066ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80066f0:	f8bd 3000 	ldrh.w	r3, [sp]
 80066f4:	4581      	cmp	r9, r0
 80066f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80066fa:	f84c 3b04 	str.w	r3, [ip], #4
 80066fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006702:	d2db      	bcs.n	80066bc <quorem+0x44>
 8006704:	f855 300b 	ldr.w	r3, [r5, fp]
 8006708:	b92b      	cbnz	r3, 8006716 <quorem+0x9e>
 800670a:	9b01      	ldr	r3, [sp, #4]
 800670c:	3b04      	subs	r3, #4
 800670e:	429d      	cmp	r5, r3
 8006710:	461a      	mov	r2, r3
 8006712:	d32e      	bcc.n	8006772 <quorem+0xfa>
 8006714:	613c      	str	r4, [r7, #16]
 8006716:	4638      	mov	r0, r7
 8006718:	f001 fc90 	bl	800803c <__mcmp>
 800671c:	2800      	cmp	r0, #0
 800671e:	db24      	blt.n	800676a <quorem+0xf2>
 8006720:	3601      	adds	r6, #1
 8006722:	4628      	mov	r0, r5
 8006724:	f04f 0c00 	mov.w	ip, #0
 8006728:	f858 2b04 	ldr.w	r2, [r8], #4
 800672c:	f8d0 e000 	ldr.w	lr, [r0]
 8006730:	b293      	uxth	r3, r2
 8006732:	ebac 0303 	sub.w	r3, ip, r3
 8006736:	0c12      	lsrs	r2, r2, #16
 8006738:	fa13 f38e 	uxtah	r3, r3, lr
 800673c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006740:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006744:	b29b      	uxth	r3, r3
 8006746:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800674a:	45c1      	cmp	r9, r8
 800674c:	f840 3b04 	str.w	r3, [r0], #4
 8006750:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006754:	d2e8      	bcs.n	8006728 <quorem+0xb0>
 8006756:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800675a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800675e:	b922      	cbnz	r2, 800676a <quorem+0xf2>
 8006760:	3b04      	subs	r3, #4
 8006762:	429d      	cmp	r5, r3
 8006764:	461a      	mov	r2, r3
 8006766:	d30a      	bcc.n	800677e <quorem+0x106>
 8006768:	613c      	str	r4, [r7, #16]
 800676a:	4630      	mov	r0, r6
 800676c:	b003      	add	sp, #12
 800676e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006772:	6812      	ldr	r2, [r2, #0]
 8006774:	3b04      	subs	r3, #4
 8006776:	2a00      	cmp	r2, #0
 8006778:	d1cc      	bne.n	8006714 <quorem+0x9c>
 800677a:	3c01      	subs	r4, #1
 800677c:	e7c7      	b.n	800670e <quorem+0x96>
 800677e:	6812      	ldr	r2, [r2, #0]
 8006780:	3b04      	subs	r3, #4
 8006782:	2a00      	cmp	r2, #0
 8006784:	d1f0      	bne.n	8006768 <quorem+0xf0>
 8006786:	3c01      	subs	r4, #1
 8006788:	e7eb      	b.n	8006762 <quorem+0xea>
 800678a:	2000      	movs	r0, #0
 800678c:	e7ee      	b.n	800676c <quorem+0xf4>
	...

08006790 <_dtoa_r>:
 8006790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006794:	ed2d 8b04 	vpush	{d8-d9}
 8006798:	ec57 6b10 	vmov	r6, r7, d0
 800679c:	b093      	sub	sp, #76	; 0x4c
 800679e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80067a0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80067a4:	9106      	str	r1, [sp, #24]
 80067a6:	ee10 aa10 	vmov	sl, s0
 80067aa:	4604      	mov	r4, r0
 80067ac:	9209      	str	r2, [sp, #36]	; 0x24
 80067ae:	930c      	str	r3, [sp, #48]	; 0x30
 80067b0:	46bb      	mov	fp, r7
 80067b2:	b975      	cbnz	r5, 80067d2 <_dtoa_r+0x42>
 80067b4:	2010      	movs	r0, #16
 80067b6:	f001 f94d 	bl	8007a54 <malloc>
 80067ba:	4602      	mov	r2, r0
 80067bc:	6260      	str	r0, [r4, #36]	; 0x24
 80067be:	b920      	cbnz	r0, 80067ca <_dtoa_r+0x3a>
 80067c0:	4ba7      	ldr	r3, [pc, #668]	; (8006a60 <_dtoa_r+0x2d0>)
 80067c2:	21ea      	movs	r1, #234	; 0xea
 80067c4:	48a7      	ldr	r0, [pc, #668]	; (8006a64 <_dtoa_r+0x2d4>)
 80067c6:	f002 f8bd 	bl	8008944 <__assert_func>
 80067ca:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80067ce:	6005      	str	r5, [r0, #0]
 80067d0:	60c5      	str	r5, [r0, #12]
 80067d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067d4:	6819      	ldr	r1, [r3, #0]
 80067d6:	b151      	cbz	r1, 80067ee <_dtoa_r+0x5e>
 80067d8:	685a      	ldr	r2, [r3, #4]
 80067da:	604a      	str	r2, [r1, #4]
 80067dc:	2301      	movs	r3, #1
 80067de:	4093      	lsls	r3, r2
 80067e0:	608b      	str	r3, [r1, #8]
 80067e2:	4620      	mov	r0, r4
 80067e4:	f001 f99e 	bl	8007b24 <_Bfree>
 80067e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80067ea:	2200      	movs	r2, #0
 80067ec:	601a      	str	r2, [r3, #0]
 80067ee:	1e3b      	subs	r3, r7, #0
 80067f0:	bfaa      	itet	ge
 80067f2:	2300      	movge	r3, #0
 80067f4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80067f8:	f8c8 3000 	strge.w	r3, [r8]
 80067fc:	4b9a      	ldr	r3, [pc, #616]	; (8006a68 <_dtoa_r+0x2d8>)
 80067fe:	bfbc      	itt	lt
 8006800:	2201      	movlt	r2, #1
 8006802:	f8c8 2000 	strlt.w	r2, [r8]
 8006806:	ea33 030b 	bics.w	r3, r3, fp
 800680a:	d11b      	bne.n	8006844 <_dtoa_r+0xb4>
 800680c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800680e:	f242 730f 	movw	r3, #9999	; 0x270f
 8006812:	6013      	str	r3, [r2, #0]
 8006814:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006818:	4333      	orrs	r3, r6
 800681a:	f000 8592 	beq.w	8007342 <_dtoa_r+0xbb2>
 800681e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006820:	b963      	cbnz	r3, 800683c <_dtoa_r+0xac>
 8006822:	4b92      	ldr	r3, [pc, #584]	; (8006a6c <_dtoa_r+0x2dc>)
 8006824:	e022      	b.n	800686c <_dtoa_r+0xdc>
 8006826:	4b92      	ldr	r3, [pc, #584]	; (8006a70 <_dtoa_r+0x2e0>)
 8006828:	9301      	str	r3, [sp, #4]
 800682a:	3308      	adds	r3, #8
 800682c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800682e:	6013      	str	r3, [r2, #0]
 8006830:	9801      	ldr	r0, [sp, #4]
 8006832:	b013      	add	sp, #76	; 0x4c
 8006834:	ecbd 8b04 	vpop	{d8-d9}
 8006838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800683c:	4b8b      	ldr	r3, [pc, #556]	; (8006a6c <_dtoa_r+0x2dc>)
 800683e:	9301      	str	r3, [sp, #4]
 8006840:	3303      	adds	r3, #3
 8006842:	e7f3      	b.n	800682c <_dtoa_r+0x9c>
 8006844:	2200      	movs	r2, #0
 8006846:	2300      	movs	r3, #0
 8006848:	4650      	mov	r0, sl
 800684a:	4659      	mov	r1, fp
 800684c:	f7fa f95c 	bl	8000b08 <__aeabi_dcmpeq>
 8006850:	ec4b ab19 	vmov	d9, sl, fp
 8006854:	4680      	mov	r8, r0
 8006856:	b158      	cbz	r0, 8006870 <_dtoa_r+0xe0>
 8006858:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800685a:	2301      	movs	r3, #1
 800685c:	6013      	str	r3, [r2, #0]
 800685e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006860:	2b00      	cmp	r3, #0
 8006862:	f000 856b 	beq.w	800733c <_dtoa_r+0xbac>
 8006866:	4883      	ldr	r0, [pc, #524]	; (8006a74 <_dtoa_r+0x2e4>)
 8006868:	6018      	str	r0, [r3, #0]
 800686a:	1e43      	subs	r3, r0, #1
 800686c:	9301      	str	r3, [sp, #4]
 800686e:	e7df      	b.n	8006830 <_dtoa_r+0xa0>
 8006870:	ec4b ab10 	vmov	d0, sl, fp
 8006874:	aa10      	add	r2, sp, #64	; 0x40
 8006876:	a911      	add	r1, sp, #68	; 0x44
 8006878:	4620      	mov	r0, r4
 800687a:	f001 fd01 	bl	8008280 <__d2b>
 800687e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8006882:	ee08 0a10 	vmov	s16, r0
 8006886:	2d00      	cmp	r5, #0
 8006888:	f000 8084 	beq.w	8006994 <_dtoa_r+0x204>
 800688c:	ee19 3a90 	vmov	r3, s19
 8006890:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006894:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8006898:	4656      	mov	r6, sl
 800689a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800689e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80068a2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80068a6:	4b74      	ldr	r3, [pc, #464]	; (8006a78 <_dtoa_r+0x2e8>)
 80068a8:	2200      	movs	r2, #0
 80068aa:	4630      	mov	r0, r6
 80068ac:	4639      	mov	r1, r7
 80068ae:	f7f9 fd0b 	bl	80002c8 <__aeabi_dsub>
 80068b2:	a365      	add	r3, pc, #404	; (adr r3, 8006a48 <_dtoa_r+0x2b8>)
 80068b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b8:	f7f9 febe 	bl	8000638 <__aeabi_dmul>
 80068bc:	a364      	add	r3, pc, #400	; (adr r3, 8006a50 <_dtoa_r+0x2c0>)
 80068be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c2:	f7f9 fd03 	bl	80002cc <__adddf3>
 80068c6:	4606      	mov	r6, r0
 80068c8:	4628      	mov	r0, r5
 80068ca:	460f      	mov	r7, r1
 80068cc:	f7f9 fe4a 	bl	8000564 <__aeabi_i2d>
 80068d0:	a361      	add	r3, pc, #388	; (adr r3, 8006a58 <_dtoa_r+0x2c8>)
 80068d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d6:	f7f9 feaf 	bl	8000638 <__aeabi_dmul>
 80068da:	4602      	mov	r2, r0
 80068dc:	460b      	mov	r3, r1
 80068de:	4630      	mov	r0, r6
 80068e0:	4639      	mov	r1, r7
 80068e2:	f7f9 fcf3 	bl	80002cc <__adddf3>
 80068e6:	4606      	mov	r6, r0
 80068e8:	460f      	mov	r7, r1
 80068ea:	f7fa f955 	bl	8000b98 <__aeabi_d2iz>
 80068ee:	2200      	movs	r2, #0
 80068f0:	9000      	str	r0, [sp, #0]
 80068f2:	2300      	movs	r3, #0
 80068f4:	4630      	mov	r0, r6
 80068f6:	4639      	mov	r1, r7
 80068f8:	f7fa f910 	bl	8000b1c <__aeabi_dcmplt>
 80068fc:	b150      	cbz	r0, 8006914 <_dtoa_r+0x184>
 80068fe:	9800      	ldr	r0, [sp, #0]
 8006900:	f7f9 fe30 	bl	8000564 <__aeabi_i2d>
 8006904:	4632      	mov	r2, r6
 8006906:	463b      	mov	r3, r7
 8006908:	f7fa f8fe 	bl	8000b08 <__aeabi_dcmpeq>
 800690c:	b910      	cbnz	r0, 8006914 <_dtoa_r+0x184>
 800690e:	9b00      	ldr	r3, [sp, #0]
 8006910:	3b01      	subs	r3, #1
 8006912:	9300      	str	r3, [sp, #0]
 8006914:	9b00      	ldr	r3, [sp, #0]
 8006916:	2b16      	cmp	r3, #22
 8006918:	d85a      	bhi.n	80069d0 <_dtoa_r+0x240>
 800691a:	9a00      	ldr	r2, [sp, #0]
 800691c:	4b57      	ldr	r3, [pc, #348]	; (8006a7c <_dtoa_r+0x2ec>)
 800691e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006926:	ec51 0b19 	vmov	r0, r1, d9
 800692a:	f7fa f8f7 	bl	8000b1c <__aeabi_dcmplt>
 800692e:	2800      	cmp	r0, #0
 8006930:	d050      	beq.n	80069d4 <_dtoa_r+0x244>
 8006932:	9b00      	ldr	r3, [sp, #0]
 8006934:	3b01      	subs	r3, #1
 8006936:	9300      	str	r3, [sp, #0]
 8006938:	2300      	movs	r3, #0
 800693a:	930b      	str	r3, [sp, #44]	; 0x2c
 800693c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800693e:	1b5d      	subs	r5, r3, r5
 8006940:	1e6b      	subs	r3, r5, #1
 8006942:	9305      	str	r3, [sp, #20]
 8006944:	bf45      	ittet	mi
 8006946:	f1c5 0301 	rsbmi	r3, r5, #1
 800694a:	9304      	strmi	r3, [sp, #16]
 800694c:	2300      	movpl	r3, #0
 800694e:	2300      	movmi	r3, #0
 8006950:	bf4c      	ite	mi
 8006952:	9305      	strmi	r3, [sp, #20]
 8006954:	9304      	strpl	r3, [sp, #16]
 8006956:	9b00      	ldr	r3, [sp, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	db3d      	blt.n	80069d8 <_dtoa_r+0x248>
 800695c:	9b05      	ldr	r3, [sp, #20]
 800695e:	9a00      	ldr	r2, [sp, #0]
 8006960:	920a      	str	r2, [sp, #40]	; 0x28
 8006962:	4413      	add	r3, r2
 8006964:	9305      	str	r3, [sp, #20]
 8006966:	2300      	movs	r3, #0
 8006968:	9307      	str	r3, [sp, #28]
 800696a:	9b06      	ldr	r3, [sp, #24]
 800696c:	2b09      	cmp	r3, #9
 800696e:	f200 8089 	bhi.w	8006a84 <_dtoa_r+0x2f4>
 8006972:	2b05      	cmp	r3, #5
 8006974:	bfc4      	itt	gt
 8006976:	3b04      	subgt	r3, #4
 8006978:	9306      	strgt	r3, [sp, #24]
 800697a:	9b06      	ldr	r3, [sp, #24]
 800697c:	f1a3 0302 	sub.w	r3, r3, #2
 8006980:	bfcc      	ite	gt
 8006982:	2500      	movgt	r5, #0
 8006984:	2501      	movle	r5, #1
 8006986:	2b03      	cmp	r3, #3
 8006988:	f200 8087 	bhi.w	8006a9a <_dtoa_r+0x30a>
 800698c:	e8df f003 	tbb	[pc, r3]
 8006990:	59383a2d 	.word	0x59383a2d
 8006994:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006998:	441d      	add	r5, r3
 800699a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800699e:	2b20      	cmp	r3, #32
 80069a0:	bfc1      	itttt	gt
 80069a2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80069a6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80069aa:	fa0b f303 	lslgt.w	r3, fp, r3
 80069ae:	fa26 f000 	lsrgt.w	r0, r6, r0
 80069b2:	bfda      	itte	le
 80069b4:	f1c3 0320 	rsble	r3, r3, #32
 80069b8:	fa06 f003 	lslle.w	r0, r6, r3
 80069bc:	4318      	orrgt	r0, r3
 80069be:	f7f9 fdc1 	bl	8000544 <__aeabi_ui2d>
 80069c2:	2301      	movs	r3, #1
 80069c4:	4606      	mov	r6, r0
 80069c6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80069ca:	3d01      	subs	r5, #1
 80069cc:	930e      	str	r3, [sp, #56]	; 0x38
 80069ce:	e76a      	b.n	80068a6 <_dtoa_r+0x116>
 80069d0:	2301      	movs	r3, #1
 80069d2:	e7b2      	b.n	800693a <_dtoa_r+0x1aa>
 80069d4:	900b      	str	r0, [sp, #44]	; 0x2c
 80069d6:	e7b1      	b.n	800693c <_dtoa_r+0x1ac>
 80069d8:	9b04      	ldr	r3, [sp, #16]
 80069da:	9a00      	ldr	r2, [sp, #0]
 80069dc:	1a9b      	subs	r3, r3, r2
 80069de:	9304      	str	r3, [sp, #16]
 80069e0:	4253      	negs	r3, r2
 80069e2:	9307      	str	r3, [sp, #28]
 80069e4:	2300      	movs	r3, #0
 80069e6:	930a      	str	r3, [sp, #40]	; 0x28
 80069e8:	e7bf      	b.n	800696a <_dtoa_r+0x1da>
 80069ea:	2300      	movs	r3, #0
 80069ec:	9308      	str	r3, [sp, #32]
 80069ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	dc55      	bgt.n	8006aa0 <_dtoa_r+0x310>
 80069f4:	2301      	movs	r3, #1
 80069f6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80069fa:	461a      	mov	r2, r3
 80069fc:	9209      	str	r2, [sp, #36]	; 0x24
 80069fe:	e00c      	b.n	8006a1a <_dtoa_r+0x28a>
 8006a00:	2301      	movs	r3, #1
 8006a02:	e7f3      	b.n	80069ec <_dtoa_r+0x25c>
 8006a04:	2300      	movs	r3, #0
 8006a06:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a08:	9308      	str	r3, [sp, #32]
 8006a0a:	9b00      	ldr	r3, [sp, #0]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	9302      	str	r3, [sp, #8]
 8006a10:	3301      	adds	r3, #1
 8006a12:	2b01      	cmp	r3, #1
 8006a14:	9303      	str	r3, [sp, #12]
 8006a16:	bfb8      	it	lt
 8006a18:	2301      	movlt	r3, #1
 8006a1a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	6042      	str	r2, [r0, #4]
 8006a20:	2204      	movs	r2, #4
 8006a22:	f102 0614 	add.w	r6, r2, #20
 8006a26:	429e      	cmp	r6, r3
 8006a28:	6841      	ldr	r1, [r0, #4]
 8006a2a:	d93d      	bls.n	8006aa8 <_dtoa_r+0x318>
 8006a2c:	4620      	mov	r0, r4
 8006a2e:	f001 f839 	bl	8007aa4 <_Balloc>
 8006a32:	9001      	str	r0, [sp, #4]
 8006a34:	2800      	cmp	r0, #0
 8006a36:	d13b      	bne.n	8006ab0 <_dtoa_r+0x320>
 8006a38:	4b11      	ldr	r3, [pc, #68]	; (8006a80 <_dtoa_r+0x2f0>)
 8006a3a:	4602      	mov	r2, r0
 8006a3c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8006a40:	e6c0      	b.n	80067c4 <_dtoa_r+0x34>
 8006a42:	2301      	movs	r3, #1
 8006a44:	e7df      	b.n	8006a06 <_dtoa_r+0x276>
 8006a46:	bf00      	nop
 8006a48:	636f4361 	.word	0x636f4361
 8006a4c:	3fd287a7 	.word	0x3fd287a7
 8006a50:	8b60c8b3 	.word	0x8b60c8b3
 8006a54:	3fc68a28 	.word	0x3fc68a28
 8006a58:	509f79fb 	.word	0x509f79fb
 8006a5c:	3fd34413 	.word	0x3fd34413
 8006a60:	080096a6 	.word	0x080096a6
 8006a64:	080096bd 	.word	0x080096bd
 8006a68:	7ff00000 	.word	0x7ff00000
 8006a6c:	080096a2 	.word	0x080096a2
 8006a70:	08009699 	.word	0x08009699
 8006a74:	08009519 	.word	0x08009519
 8006a78:	3ff80000 	.word	0x3ff80000
 8006a7c:	08009828 	.word	0x08009828
 8006a80:	08009718 	.word	0x08009718
 8006a84:	2501      	movs	r5, #1
 8006a86:	2300      	movs	r3, #0
 8006a88:	9306      	str	r3, [sp, #24]
 8006a8a:	9508      	str	r5, [sp, #32]
 8006a8c:	f04f 33ff 	mov.w	r3, #4294967295
 8006a90:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006a94:	2200      	movs	r2, #0
 8006a96:	2312      	movs	r3, #18
 8006a98:	e7b0      	b.n	80069fc <_dtoa_r+0x26c>
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	9308      	str	r3, [sp, #32]
 8006a9e:	e7f5      	b.n	8006a8c <_dtoa_r+0x2fc>
 8006aa0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aa2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8006aa6:	e7b8      	b.n	8006a1a <_dtoa_r+0x28a>
 8006aa8:	3101      	adds	r1, #1
 8006aaa:	6041      	str	r1, [r0, #4]
 8006aac:	0052      	lsls	r2, r2, #1
 8006aae:	e7b8      	b.n	8006a22 <_dtoa_r+0x292>
 8006ab0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ab2:	9a01      	ldr	r2, [sp, #4]
 8006ab4:	601a      	str	r2, [r3, #0]
 8006ab6:	9b03      	ldr	r3, [sp, #12]
 8006ab8:	2b0e      	cmp	r3, #14
 8006aba:	f200 809d 	bhi.w	8006bf8 <_dtoa_r+0x468>
 8006abe:	2d00      	cmp	r5, #0
 8006ac0:	f000 809a 	beq.w	8006bf8 <_dtoa_r+0x468>
 8006ac4:	9b00      	ldr	r3, [sp, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	dd32      	ble.n	8006b30 <_dtoa_r+0x3a0>
 8006aca:	4ab7      	ldr	r2, [pc, #732]	; (8006da8 <_dtoa_r+0x618>)
 8006acc:	f003 030f 	and.w	r3, r3, #15
 8006ad0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8006ad4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006ad8:	9b00      	ldr	r3, [sp, #0]
 8006ada:	05d8      	lsls	r0, r3, #23
 8006adc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8006ae0:	d516      	bpl.n	8006b10 <_dtoa_r+0x380>
 8006ae2:	4bb2      	ldr	r3, [pc, #712]	; (8006dac <_dtoa_r+0x61c>)
 8006ae4:	ec51 0b19 	vmov	r0, r1, d9
 8006ae8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006aec:	f7f9 fece 	bl	800088c <__aeabi_ddiv>
 8006af0:	f007 070f 	and.w	r7, r7, #15
 8006af4:	4682      	mov	sl, r0
 8006af6:	468b      	mov	fp, r1
 8006af8:	2503      	movs	r5, #3
 8006afa:	4eac      	ldr	r6, [pc, #688]	; (8006dac <_dtoa_r+0x61c>)
 8006afc:	b957      	cbnz	r7, 8006b14 <_dtoa_r+0x384>
 8006afe:	4642      	mov	r2, r8
 8006b00:	464b      	mov	r3, r9
 8006b02:	4650      	mov	r0, sl
 8006b04:	4659      	mov	r1, fp
 8006b06:	f7f9 fec1 	bl	800088c <__aeabi_ddiv>
 8006b0a:	4682      	mov	sl, r0
 8006b0c:	468b      	mov	fp, r1
 8006b0e:	e028      	b.n	8006b62 <_dtoa_r+0x3d2>
 8006b10:	2502      	movs	r5, #2
 8006b12:	e7f2      	b.n	8006afa <_dtoa_r+0x36a>
 8006b14:	07f9      	lsls	r1, r7, #31
 8006b16:	d508      	bpl.n	8006b2a <_dtoa_r+0x39a>
 8006b18:	4640      	mov	r0, r8
 8006b1a:	4649      	mov	r1, r9
 8006b1c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006b20:	f7f9 fd8a 	bl	8000638 <__aeabi_dmul>
 8006b24:	3501      	adds	r5, #1
 8006b26:	4680      	mov	r8, r0
 8006b28:	4689      	mov	r9, r1
 8006b2a:	107f      	asrs	r7, r7, #1
 8006b2c:	3608      	adds	r6, #8
 8006b2e:	e7e5      	b.n	8006afc <_dtoa_r+0x36c>
 8006b30:	f000 809b 	beq.w	8006c6a <_dtoa_r+0x4da>
 8006b34:	9b00      	ldr	r3, [sp, #0]
 8006b36:	4f9d      	ldr	r7, [pc, #628]	; (8006dac <_dtoa_r+0x61c>)
 8006b38:	425e      	negs	r6, r3
 8006b3a:	4b9b      	ldr	r3, [pc, #620]	; (8006da8 <_dtoa_r+0x618>)
 8006b3c:	f006 020f 	and.w	r2, r6, #15
 8006b40:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006b48:	ec51 0b19 	vmov	r0, r1, d9
 8006b4c:	f7f9 fd74 	bl	8000638 <__aeabi_dmul>
 8006b50:	1136      	asrs	r6, r6, #4
 8006b52:	4682      	mov	sl, r0
 8006b54:	468b      	mov	fp, r1
 8006b56:	2300      	movs	r3, #0
 8006b58:	2502      	movs	r5, #2
 8006b5a:	2e00      	cmp	r6, #0
 8006b5c:	d17a      	bne.n	8006c54 <_dtoa_r+0x4c4>
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1d3      	bne.n	8006b0a <_dtoa_r+0x37a>
 8006b62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	f000 8082 	beq.w	8006c6e <_dtoa_r+0x4de>
 8006b6a:	4b91      	ldr	r3, [pc, #580]	; (8006db0 <_dtoa_r+0x620>)
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	4650      	mov	r0, sl
 8006b70:	4659      	mov	r1, fp
 8006b72:	f7f9 ffd3 	bl	8000b1c <__aeabi_dcmplt>
 8006b76:	2800      	cmp	r0, #0
 8006b78:	d079      	beq.n	8006c6e <_dtoa_r+0x4de>
 8006b7a:	9b03      	ldr	r3, [sp, #12]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d076      	beq.n	8006c6e <_dtoa_r+0x4de>
 8006b80:	9b02      	ldr	r3, [sp, #8]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	dd36      	ble.n	8006bf4 <_dtoa_r+0x464>
 8006b86:	9b00      	ldr	r3, [sp, #0]
 8006b88:	4650      	mov	r0, sl
 8006b8a:	4659      	mov	r1, fp
 8006b8c:	1e5f      	subs	r7, r3, #1
 8006b8e:	2200      	movs	r2, #0
 8006b90:	4b88      	ldr	r3, [pc, #544]	; (8006db4 <_dtoa_r+0x624>)
 8006b92:	f7f9 fd51 	bl	8000638 <__aeabi_dmul>
 8006b96:	9e02      	ldr	r6, [sp, #8]
 8006b98:	4682      	mov	sl, r0
 8006b9a:	468b      	mov	fp, r1
 8006b9c:	3501      	adds	r5, #1
 8006b9e:	4628      	mov	r0, r5
 8006ba0:	f7f9 fce0 	bl	8000564 <__aeabi_i2d>
 8006ba4:	4652      	mov	r2, sl
 8006ba6:	465b      	mov	r3, fp
 8006ba8:	f7f9 fd46 	bl	8000638 <__aeabi_dmul>
 8006bac:	4b82      	ldr	r3, [pc, #520]	; (8006db8 <_dtoa_r+0x628>)
 8006bae:	2200      	movs	r2, #0
 8006bb0:	f7f9 fb8c 	bl	80002cc <__adddf3>
 8006bb4:	46d0      	mov	r8, sl
 8006bb6:	46d9      	mov	r9, fp
 8006bb8:	4682      	mov	sl, r0
 8006bba:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8006bbe:	2e00      	cmp	r6, #0
 8006bc0:	d158      	bne.n	8006c74 <_dtoa_r+0x4e4>
 8006bc2:	4b7e      	ldr	r3, [pc, #504]	; (8006dbc <_dtoa_r+0x62c>)
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	4640      	mov	r0, r8
 8006bc8:	4649      	mov	r1, r9
 8006bca:	f7f9 fb7d 	bl	80002c8 <__aeabi_dsub>
 8006bce:	4652      	mov	r2, sl
 8006bd0:	465b      	mov	r3, fp
 8006bd2:	4680      	mov	r8, r0
 8006bd4:	4689      	mov	r9, r1
 8006bd6:	f7f9 ffbf 	bl	8000b58 <__aeabi_dcmpgt>
 8006bda:	2800      	cmp	r0, #0
 8006bdc:	f040 8295 	bne.w	800710a <_dtoa_r+0x97a>
 8006be0:	4652      	mov	r2, sl
 8006be2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006be6:	4640      	mov	r0, r8
 8006be8:	4649      	mov	r1, r9
 8006bea:	f7f9 ff97 	bl	8000b1c <__aeabi_dcmplt>
 8006bee:	2800      	cmp	r0, #0
 8006bf0:	f040 8289 	bne.w	8007106 <_dtoa_r+0x976>
 8006bf4:	ec5b ab19 	vmov	sl, fp, d9
 8006bf8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f2c0 8148 	blt.w	8006e90 <_dtoa_r+0x700>
 8006c00:	9a00      	ldr	r2, [sp, #0]
 8006c02:	2a0e      	cmp	r2, #14
 8006c04:	f300 8144 	bgt.w	8006e90 <_dtoa_r+0x700>
 8006c08:	4b67      	ldr	r3, [pc, #412]	; (8006da8 <_dtoa_r+0x618>)
 8006c0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c0e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006c12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f280 80d5 	bge.w	8006dc4 <_dtoa_r+0x634>
 8006c1a:	9b03      	ldr	r3, [sp, #12]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	f300 80d1 	bgt.w	8006dc4 <_dtoa_r+0x634>
 8006c22:	f040 826f 	bne.w	8007104 <_dtoa_r+0x974>
 8006c26:	4b65      	ldr	r3, [pc, #404]	; (8006dbc <_dtoa_r+0x62c>)
 8006c28:	2200      	movs	r2, #0
 8006c2a:	4640      	mov	r0, r8
 8006c2c:	4649      	mov	r1, r9
 8006c2e:	f7f9 fd03 	bl	8000638 <__aeabi_dmul>
 8006c32:	4652      	mov	r2, sl
 8006c34:	465b      	mov	r3, fp
 8006c36:	f7f9 ff85 	bl	8000b44 <__aeabi_dcmpge>
 8006c3a:	9e03      	ldr	r6, [sp, #12]
 8006c3c:	4637      	mov	r7, r6
 8006c3e:	2800      	cmp	r0, #0
 8006c40:	f040 8245 	bne.w	80070ce <_dtoa_r+0x93e>
 8006c44:	9d01      	ldr	r5, [sp, #4]
 8006c46:	2331      	movs	r3, #49	; 0x31
 8006c48:	f805 3b01 	strb.w	r3, [r5], #1
 8006c4c:	9b00      	ldr	r3, [sp, #0]
 8006c4e:	3301      	adds	r3, #1
 8006c50:	9300      	str	r3, [sp, #0]
 8006c52:	e240      	b.n	80070d6 <_dtoa_r+0x946>
 8006c54:	07f2      	lsls	r2, r6, #31
 8006c56:	d505      	bpl.n	8006c64 <_dtoa_r+0x4d4>
 8006c58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006c5c:	f7f9 fcec 	bl	8000638 <__aeabi_dmul>
 8006c60:	3501      	adds	r5, #1
 8006c62:	2301      	movs	r3, #1
 8006c64:	1076      	asrs	r6, r6, #1
 8006c66:	3708      	adds	r7, #8
 8006c68:	e777      	b.n	8006b5a <_dtoa_r+0x3ca>
 8006c6a:	2502      	movs	r5, #2
 8006c6c:	e779      	b.n	8006b62 <_dtoa_r+0x3d2>
 8006c6e:	9f00      	ldr	r7, [sp, #0]
 8006c70:	9e03      	ldr	r6, [sp, #12]
 8006c72:	e794      	b.n	8006b9e <_dtoa_r+0x40e>
 8006c74:	9901      	ldr	r1, [sp, #4]
 8006c76:	4b4c      	ldr	r3, [pc, #304]	; (8006da8 <_dtoa_r+0x618>)
 8006c78:	4431      	add	r1, r6
 8006c7a:	910d      	str	r1, [sp, #52]	; 0x34
 8006c7c:	9908      	ldr	r1, [sp, #32]
 8006c7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8006c82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006c86:	2900      	cmp	r1, #0
 8006c88:	d043      	beq.n	8006d12 <_dtoa_r+0x582>
 8006c8a:	494d      	ldr	r1, [pc, #308]	; (8006dc0 <_dtoa_r+0x630>)
 8006c8c:	2000      	movs	r0, #0
 8006c8e:	f7f9 fdfd 	bl	800088c <__aeabi_ddiv>
 8006c92:	4652      	mov	r2, sl
 8006c94:	465b      	mov	r3, fp
 8006c96:	f7f9 fb17 	bl	80002c8 <__aeabi_dsub>
 8006c9a:	9d01      	ldr	r5, [sp, #4]
 8006c9c:	4682      	mov	sl, r0
 8006c9e:	468b      	mov	fp, r1
 8006ca0:	4649      	mov	r1, r9
 8006ca2:	4640      	mov	r0, r8
 8006ca4:	f7f9 ff78 	bl	8000b98 <__aeabi_d2iz>
 8006ca8:	4606      	mov	r6, r0
 8006caa:	f7f9 fc5b 	bl	8000564 <__aeabi_i2d>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	4640      	mov	r0, r8
 8006cb4:	4649      	mov	r1, r9
 8006cb6:	f7f9 fb07 	bl	80002c8 <__aeabi_dsub>
 8006cba:	3630      	adds	r6, #48	; 0x30
 8006cbc:	f805 6b01 	strb.w	r6, [r5], #1
 8006cc0:	4652      	mov	r2, sl
 8006cc2:	465b      	mov	r3, fp
 8006cc4:	4680      	mov	r8, r0
 8006cc6:	4689      	mov	r9, r1
 8006cc8:	f7f9 ff28 	bl	8000b1c <__aeabi_dcmplt>
 8006ccc:	2800      	cmp	r0, #0
 8006cce:	d163      	bne.n	8006d98 <_dtoa_r+0x608>
 8006cd0:	4642      	mov	r2, r8
 8006cd2:	464b      	mov	r3, r9
 8006cd4:	4936      	ldr	r1, [pc, #216]	; (8006db0 <_dtoa_r+0x620>)
 8006cd6:	2000      	movs	r0, #0
 8006cd8:	f7f9 faf6 	bl	80002c8 <__aeabi_dsub>
 8006cdc:	4652      	mov	r2, sl
 8006cde:	465b      	mov	r3, fp
 8006ce0:	f7f9 ff1c 	bl	8000b1c <__aeabi_dcmplt>
 8006ce4:	2800      	cmp	r0, #0
 8006ce6:	f040 80b5 	bne.w	8006e54 <_dtoa_r+0x6c4>
 8006cea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006cec:	429d      	cmp	r5, r3
 8006cee:	d081      	beq.n	8006bf4 <_dtoa_r+0x464>
 8006cf0:	4b30      	ldr	r3, [pc, #192]	; (8006db4 <_dtoa_r+0x624>)
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	4650      	mov	r0, sl
 8006cf6:	4659      	mov	r1, fp
 8006cf8:	f7f9 fc9e 	bl	8000638 <__aeabi_dmul>
 8006cfc:	4b2d      	ldr	r3, [pc, #180]	; (8006db4 <_dtoa_r+0x624>)
 8006cfe:	4682      	mov	sl, r0
 8006d00:	468b      	mov	fp, r1
 8006d02:	4640      	mov	r0, r8
 8006d04:	4649      	mov	r1, r9
 8006d06:	2200      	movs	r2, #0
 8006d08:	f7f9 fc96 	bl	8000638 <__aeabi_dmul>
 8006d0c:	4680      	mov	r8, r0
 8006d0e:	4689      	mov	r9, r1
 8006d10:	e7c6      	b.n	8006ca0 <_dtoa_r+0x510>
 8006d12:	4650      	mov	r0, sl
 8006d14:	4659      	mov	r1, fp
 8006d16:	f7f9 fc8f 	bl	8000638 <__aeabi_dmul>
 8006d1a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d1c:	9d01      	ldr	r5, [sp, #4]
 8006d1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d20:	4682      	mov	sl, r0
 8006d22:	468b      	mov	fp, r1
 8006d24:	4649      	mov	r1, r9
 8006d26:	4640      	mov	r0, r8
 8006d28:	f7f9 ff36 	bl	8000b98 <__aeabi_d2iz>
 8006d2c:	4606      	mov	r6, r0
 8006d2e:	f7f9 fc19 	bl	8000564 <__aeabi_i2d>
 8006d32:	3630      	adds	r6, #48	; 0x30
 8006d34:	4602      	mov	r2, r0
 8006d36:	460b      	mov	r3, r1
 8006d38:	4640      	mov	r0, r8
 8006d3a:	4649      	mov	r1, r9
 8006d3c:	f7f9 fac4 	bl	80002c8 <__aeabi_dsub>
 8006d40:	f805 6b01 	strb.w	r6, [r5], #1
 8006d44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006d46:	429d      	cmp	r5, r3
 8006d48:	4680      	mov	r8, r0
 8006d4a:	4689      	mov	r9, r1
 8006d4c:	f04f 0200 	mov.w	r2, #0
 8006d50:	d124      	bne.n	8006d9c <_dtoa_r+0x60c>
 8006d52:	4b1b      	ldr	r3, [pc, #108]	; (8006dc0 <_dtoa_r+0x630>)
 8006d54:	4650      	mov	r0, sl
 8006d56:	4659      	mov	r1, fp
 8006d58:	f7f9 fab8 	bl	80002cc <__adddf3>
 8006d5c:	4602      	mov	r2, r0
 8006d5e:	460b      	mov	r3, r1
 8006d60:	4640      	mov	r0, r8
 8006d62:	4649      	mov	r1, r9
 8006d64:	f7f9 fef8 	bl	8000b58 <__aeabi_dcmpgt>
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	d173      	bne.n	8006e54 <_dtoa_r+0x6c4>
 8006d6c:	4652      	mov	r2, sl
 8006d6e:	465b      	mov	r3, fp
 8006d70:	4913      	ldr	r1, [pc, #76]	; (8006dc0 <_dtoa_r+0x630>)
 8006d72:	2000      	movs	r0, #0
 8006d74:	f7f9 faa8 	bl	80002c8 <__aeabi_dsub>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	4640      	mov	r0, r8
 8006d7e:	4649      	mov	r1, r9
 8006d80:	f7f9 fecc 	bl	8000b1c <__aeabi_dcmplt>
 8006d84:	2800      	cmp	r0, #0
 8006d86:	f43f af35 	beq.w	8006bf4 <_dtoa_r+0x464>
 8006d8a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006d8c:	1e6b      	subs	r3, r5, #1
 8006d8e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d90:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006d94:	2b30      	cmp	r3, #48	; 0x30
 8006d96:	d0f8      	beq.n	8006d8a <_dtoa_r+0x5fa>
 8006d98:	9700      	str	r7, [sp, #0]
 8006d9a:	e049      	b.n	8006e30 <_dtoa_r+0x6a0>
 8006d9c:	4b05      	ldr	r3, [pc, #20]	; (8006db4 <_dtoa_r+0x624>)
 8006d9e:	f7f9 fc4b 	bl	8000638 <__aeabi_dmul>
 8006da2:	4680      	mov	r8, r0
 8006da4:	4689      	mov	r9, r1
 8006da6:	e7bd      	b.n	8006d24 <_dtoa_r+0x594>
 8006da8:	08009828 	.word	0x08009828
 8006dac:	08009800 	.word	0x08009800
 8006db0:	3ff00000 	.word	0x3ff00000
 8006db4:	40240000 	.word	0x40240000
 8006db8:	401c0000 	.word	0x401c0000
 8006dbc:	40140000 	.word	0x40140000
 8006dc0:	3fe00000 	.word	0x3fe00000
 8006dc4:	9d01      	ldr	r5, [sp, #4]
 8006dc6:	4656      	mov	r6, sl
 8006dc8:	465f      	mov	r7, fp
 8006dca:	4642      	mov	r2, r8
 8006dcc:	464b      	mov	r3, r9
 8006dce:	4630      	mov	r0, r6
 8006dd0:	4639      	mov	r1, r7
 8006dd2:	f7f9 fd5b 	bl	800088c <__aeabi_ddiv>
 8006dd6:	f7f9 fedf 	bl	8000b98 <__aeabi_d2iz>
 8006dda:	4682      	mov	sl, r0
 8006ddc:	f7f9 fbc2 	bl	8000564 <__aeabi_i2d>
 8006de0:	4642      	mov	r2, r8
 8006de2:	464b      	mov	r3, r9
 8006de4:	f7f9 fc28 	bl	8000638 <__aeabi_dmul>
 8006de8:	4602      	mov	r2, r0
 8006dea:	460b      	mov	r3, r1
 8006dec:	4630      	mov	r0, r6
 8006dee:	4639      	mov	r1, r7
 8006df0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8006df4:	f7f9 fa68 	bl	80002c8 <__aeabi_dsub>
 8006df8:	f805 6b01 	strb.w	r6, [r5], #1
 8006dfc:	9e01      	ldr	r6, [sp, #4]
 8006dfe:	9f03      	ldr	r7, [sp, #12]
 8006e00:	1bae      	subs	r6, r5, r6
 8006e02:	42b7      	cmp	r7, r6
 8006e04:	4602      	mov	r2, r0
 8006e06:	460b      	mov	r3, r1
 8006e08:	d135      	bne.n	8006e76 <_dtoa_r+0x6e6>
 8006e0a:	f7f9 fa5f 	bl	80002cc <__adddf3>
 8006e0e:	4642      	mov	r2, r8
 8006e10:	464b      	mov	r3, r9
 8006e12:	4606      	mov	r6, r0
 8006e14:	460f      	mov	r7, r1
 8006e16:	f7f9 fe9f 	bl	8000b58 <__aeabi_dcmpgt>
 8006e1a:	b9d0      	cbnz	r0, 8006e52 <_dtoa_r+0x6c2>
 8006e1c:	4642      	mov	r2, r8
 8006e1e:	464b      	mov	r3, r9
 8006e20:	4630      	mov	r0, r6
 8006e22:	4639      	mov	r1, r7
 8006e24:	f7f9 fe70 	bl	8000b08 <__aeabi_dcmpeq>
 8006e28:	b110      	cbz	r0, 8006e30 <_dtoa_r+0x6a0>
 8006e2a:	f01a 0f01 	tst.w	sl, #1
 8006e2e:	d110      	bne.n	8006e52 <_dtoa_r+0x6c2>
 8006e30:	4620      	mov	r0, r4
 8006e32:	ee18 1a10 	vmov	r1, s16
 8006e36:	f000 fe75 	bl	8007b24 <_Bfree>
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	9800      	ldr	r0, [sp, #0]
 8006e3e:	702b      	strb	r3, [r5, #0]
 8006e40:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006e42:	3001      	adds	r0, #1
 8006e44:	6018      	str	r0, [r3, #0]
 8006e46:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f43f acf1 	beq.w	8006830 <_dtoa_r+0xa0>
 8006e4e:	601d      	str	r5, [r3, #0]
 8006e50:	e4ee      	b.n	8006830 <_dtoa_r+0xa0>
 8006e52:	9f00      	ldr	r7, [sp, #0]
 8006e54:	462b      	mov	r3, r5
 8006e56:	461d      	mov	r5, r3
 8006e58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e5c:	2a39      	cmp	r2, #57	; 0x39
 8006e5e:	d106      	bne.n	8006e6e <_dtoa_r+0x6de>
 8006e60:	9a01      	ldr	r2, [sp, #4]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d1f7      	bne.n	8006e56 <_dtoa_r+0x6c6>
 8006e66:	9901      	ldr	r1, [sp, #4]
 8006e68:	2230      	movs	r2, #48	; 0x30
 8006e6a:	3701      	adds	r7, #1
 8006e6c:	700a      	strb	r2, [r1, #0]
 8006e6e:	781a      	ldrb	r2, [r3, #0]
 8006e70:	3201      	adds	r2, #1
 8006e72:	701a      	strb	r2, [r3, #0]
 8006e74:	e790      	b.n	8006d98 <_dtoa_r+0x608>
 8006e76:	4ba6      	ldr	r3, [pc, #664]	; (8007110 <_dtoa_r+0x980>)
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f7f9 fbdd 	bl	8000638 <__aeabi_dmul>
 8006e7e:	2200      	movs	r2, #0
 8006e80:	2300      	movs	r3, #0
 8006e82:	4606      	mov	r6, r0
 8006e84:	460f      	mov	r7, r1
 8006e86:	f7f9 fe3f 	bl	8000b08 <__aeabi_dcmpeq>
 8006e8a:	2800      	cmp	r0, #0
 8006e8c:	d09d      	beq.n	8006dca <_dtoa_r+0x63a>
 8006e8e:	e7cf      	b.n	8006e30 <_dtoa_r+0x6a0>
 8006e90:	9a08      	ldr	r2, [sp, #32]
 8006e92:	2a00      	cmp	r2, #0
 8006e94:	f000 80d7 	beq.w	8007046 <_dtoa_r+0x8b6>
 8006e98:	9a06      	ldr	r2, [sp, #24]
 8006e9a:	2a01      	cmp	r2, #1
 8006e9c:	f300 80ba 	bgt.w	8007014 <_dtoa_r+0x884>
 8006ea0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006ea2:	2a00      	cmp	r2, #0
 8006ea4:	f000 80b2 	beq.w	800700c <_dtoa_r+0x87c>
 8006ea8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006eac:	9e07      	ldr	r6, [sp, #28]
 8006eae:	9d04      	ldr	r5, [sp, #16]
 8006eb0:	9a04      	ldr	r2, [sp, #16]
 8006eb2:	441a      	add	r2, r3
 8006eb4:	9204      	str	r2, [sp, #16]
 8006eb6:	9a05      	ldr	r2, [sp, #20]
 8006eb8:	2101      	movs	r1, #1
 8006eba:	441a      	add	r2, r3
 8006ebc:	4620      	mov	r0, r4
 8006ebe:	9205      	str	r2, [sp, #20]
 8006ec0:	f000 ff32 	bl	8007d28 <__i2b>
 8006ec4:	4607      	mov	r7, r0
 8006ec6:	2d00      	cmp	r5, #0
 8006ec8:	dd0c      	ble.n	8006ee4 <_dtoa_r+0x754>
 8006eca:	9b05      	ldr	r3, [sp, #20]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	dd09      	ble.n	8006ee4 <_dtoa_r+0x754>
 8006ed0:	42ab      	cmp	r3, r5
 8006ed2:	9a04      	ldr	r2, [sp, #16]
 8006ed4:	bfa8      	it	ge
 8006ed6:	462b      	movge	r3, r5
 8006ed8:	1ad2      	subs	r2, r2, r3
 8006eda:	9204      	str	r2, [sp, #16]
 8006edc:	9a05      	ldr	r2, [sp, #20]
 8006ede:	1aed      	subs	r5, r5, r3
 8006ee0:	1ad3      	subs	r3, r2, r3
 8006ee2:	9305      	str	r3, [sp, #20]
 8006ee4:	9b07      	ldr	r3, [sp, #28]
 8006ee6:	b31b      	cbz	r3, 8006f30 <_dtoa_r+0x7a0>
 8006ee8:	9b08      	ldr	r3, [sp, #32]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	f000 80af 	beq.w	800704e <_dtoa_r+0x8be>
 8006ef0:	2e00      	cmp	r6, #0
 8006ef2:	dd13      	ble.n	8006f1c <_dtoa_r+0x78c>
 8006ef4:	4639      	mov	r1, r7
 8006ef6:	4632      	mov	r2, r6
 8006ef8:	4620      	mov	r0, r4
 8006efa:	f000 ffd5 	bl	8007ea8 <__pow5mult>
 8006efe:	ee18 2a10 	vmov	r2, s16
 8006f02:	4601      	mov	r1, r0
 8006f04:	4607      	mov	r7, r0
 8006f06:	4620      	mov	r0, r4
 8006f08:	f000 ff24 	bl	8007d54 <__multiply>
 8006f0c:	ee18 1a10 	vmov	r1, s16
 8006f10:	4680      	mov	r8, r0
 8006f12:	4620      	mov	r0, r4
 8006f14:	f000 fe06 	bl	8007b24 <_Bfree>
 8006f18:	ee08 8a10 	vmov	s16, r8
 8006f1c:	9b07      	ldr	r3, [sp, #28]
 8006f1e:	1b9a      	subs	r2, r3, r6
 8006f20:	d006      	beq.n	8006f30 <_dtoa_r+0x7a0>
 8006f22:	ee18 1a10 	vmov	r1, s16
 8006f26:	4620      	mov	r0, r4
 8006f28:	f000 ffbe 	bl	8007ea8 <__pow5mult>
 8006f2c:	ee08 0a10 	vmov	s16, r0
 8006f30:	2101      	movs	r1, #1
 8006f32:	4620      	mov	r0, r4
 8006f34:	f000 fef8 	bl	8007d28 <__i2b>
 8006f38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	4606      	mov	r6, r0
 8006f3e:	f340 8088 	ble.w	8007052 <_dtoa_r+0x8c2>
 8006f42:	461a      	mov	r2, r3
 8006f44:	4601      	mov	r1, r0
 8006f46:	4620      	mov	r0, r4
 8006f48:	f000 ffae 	bl	8007ea8 <__pow5mult>
 8006f4c:	9b06      	ldr	r3, [sp, #24]
 8006f4e:	2b01      	cmp	r3, #1
 8006f50:	4606      	mov	r6, r0
 8006f52:	f340 8081 	ble.w	8007058 <_dtoa_r+0x8c8>
 8006f56:	f04f 0800 	mov.w	r8, #0
 8006f5a:	6933      	ldr	r3, [r6, #16]
 8006f5c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8006f60:	6918      	ldr	r0, [r3, #16]
 8006f62:	f000 fe91 	bl	8007c88 <__hi0bits>
 8006f66:	f1c0 0020 	rsb	r0, r0, #32
 8006f6a:	9b05      	ldr	r3, [sp, #20]
 8006f6c:	4418      	add	r0, r3
 8006f6e:	f010 001f 	ands.w	r0, r0, #31
 8006f72:	f000 8092 	beq.w	800709a <_dtoa_r+0x90a>
 8006f76:	f1c0 0320 	rsb	r3, r0, #32
 8006f7a:	2b04      	cmp	r3, #4
 8006f7c:	f340 808a 	ble.w	8007094 <_dtoa_r+0x904>
 8006f80:	f1c0 001c 	rsb	r0, r0, #28
 8006f84:	9b04      	ldr	r3, [sp, #16]
 8006f86:	4403      	add	r3, r0
 8006f88:	9304      	str	r3, [sp, #16]
 8006f8a:	9b05      	ldr	r3, [sp, #20]
 8006f8c:	4403      	add	r3, r0
 8006f8e:	4405      	add	r5, r0
 8006f90:	9305      	str	r3, [sp, #20]
 8006f92:	9b04      	ldr	r3, [sp, #16]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	dd07      	ble.n	8006fa8 <_dtoa_r+0x818>
 8006f98:	ee18 1a10 	vmov	r1, s16
 8006f9c:	461a      	mov	r2, r3
 8006f9e:	4620      	mov	r0, r4
 8006fa0:	f000 ffdc 	bl	8007f5c <__lshift>
 8006fa4:	ee08 0a10 	vmov	s16, r0
 8006fa8:	9b05      	ldr	r3, [sp, #20]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	dd05      	ble.n	8006fba <_dtoa_r+0x82a>
 8006fae:	4631      	mov	r1, r6
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	4620      	mov	r0, r4
 8006fb4:	f000 ffd2 	bl	8007f5c <__lshift>
 8006fb8:	4606      	mov	r6, r0
 8006fba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d06e      	beq.n	800709e <_dtoa_r+0x90e>
 8006fc0:	ee18 0a10 	vmov	r0, s16
 8006fc4:	4631      	mov	r1, r6
 8006fc6:	f001 f839 	bl	800803c <__mcmp>
 8006fca:	2800      	cmp	r0, #0
 8006fcc:	da67      	bge.n	800709e <_dtoa_r+0x90e>
 8006fce:	9b00      	ldr	r3, [sp, #0]
 8006fd0:	3b01      	subs	r3, #1
 8006fd2:	ee18 1a10 	vmov	r1, s16
 8006fd6:	9300      	str	r3, [sp, #0]
 8006fd8:	220a      	movs	r2, #10
 8006fda:	2300      	movs	r3, #0
 8006fdc:	4620      	mov	r0, r4
 8006fde:	f000 fdc3 	bl	8007b68 <__multadd>
 8006fe2:	9b08      	ldr	r3, [sp, #32]
 8006fe4:	ee08 0a10 	vmov	s16, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	f000 81b1 	beq.w	8007350 <_dtoa_r+0xbc0>
 8006fee:	2300      	movs	r3, #0
 8006ff0:	4639      	mov	r1, r7
 8006ff2:	220a      	movs	r2, #10
 8006ff4:	4620      	mov	r0, r4
 8006ff6:	f000 fdb7 	bl	8007b68 <__multadd>
 8006ffa:	9b02      	ldr	r3, [sp, #8]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	4607      	mov	r7, r0
 8007000:	f300 808e 	bgt.w	8007120 <_dtoa_r+0x990>
 8007004:	9b06      	ldr	r3, [sp, #24]
 8007006:	2b02      	cmp	r3, #2
 8007008:	dc51      	bgt.n	80070ae <_dtoa_r+0x91e>
 800700a:	e089      	b.n	8007120 <_dtoa_r+0x990>
 800700c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800700e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007012:	e74b      	b.n	8006eac <_dtoa_r+0x71c>
 8007014:	9b03      	ldr	r3, [sp, #12]
 8007016:	1e5e      	subs	r6, r3, #1
 8007018:	9b07      	ldr	r3, [sp, #28]
 800701a:	42b3      	cmp	r3, r6
 800701c:	bfbf      	itttt	lt
 800701e:	9b07      	ldrlt	r3, [sp, #28]
 8007020:	9607      	strlt	r6, [sp, #28]
 8007022:	1af2      	sublt	r2, r6, r3
 8007024:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007026:	bfb6      	itet	lt
 8007028:	189b      	addlt	r3, r3, r2
 800702a:	1b9e      	subge	r6, r3, r6
 800702c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800702e:	9b03      	ldr	r3, [sp, #12]
 8007030:	bfb8      	it	lt
 8007032:	2600      	movlt	r6, #0
 8007034:	2b00      	cmp	r3, #0
 8007036:	bfb7      	itett	lt
 8007038:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800703c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8007040:	1a9d      	sublt	r5, r3, r2
 8007042:	2300      	movlt	r3, #0
 8007044:	e734      	b.n	8006eb0 <_dtoa_r+0x720>
 8007046:	9e07      	ldr	r6, [sp, #28]
 8007048:	9d04      	ldr	r5, [sp, #16]
 800704a:	9f08      	ldr	r7, [sp, #32]
 800704c:	e73b      	b.n	8006ec6 <_dtoa_r+0x736>
 800704e:	9a07      	ldr	r2, [sp, #28]
 8007050:	e767      	b.n	8006f22 <_dtoa_r+0x792>
 8007052:	9b06      	ldr	r3, [sp, #24]
 8007054:	2b01      	cmp	r3, #1
 8007056:	dc18      	bgt.n	800708a <_dtoa_r+0x8fa>
 8007058:	f1ba 0f00 	cmp.w	sl, #0
 800705c:	d115      	bne.n	800708a <_dtoa_r+0x8fa>
 800705e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007062:	b993      	cbnz	r3, 800708a <_dtoa_r+0x8fa>
 8007064:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007068:	0d1b      	lsrs	r3, r3, #20
 800706a:	051b      	lsls	r3, r3, #20
 800706c:	b183      	cbz	r3, 8007090 <_dtoa_r+0x900>
 800706e:	9b04      	ldr	r3, [sp, #16]
 8007070:	3301      	adds	r3, #1
 8007072:	9304      	str	r3, [sp, #16]
 8007074:	9b05      	ldr	r3, [sp, #20]
 8007076:	3301      	adds	r3, #1
 8007078:	9305      	str	r3, [sp, #20]
 800707a:	f04f 0801 	mov.w	r8, #1
 800707e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007080:	2b00      	cmp	r3, #0
 8007082:	f47f af6a 	bne.w	8006f5a <_dtoa_r+0x7ca>
 8007086:	2001      	movs	r0, #1
 8007088:	e76f      	b.n	8006f6a <_dtoa_r+0x7da>
 800708a:	f04f 0800 	mov.w	r8, #0
 800708e:	e7f6      	b.n	800707e <_dtoa_r+0x8ee>
 8007090:	4698      	mov	r8, r3
 8007092:	e7f4      	b.n	800707e <_dtoa_r+0x8ee>
 8007094:	f43f af7d 	beq.w	8006f92 <_dtoa_r+0x802>
 8007098:	4618      	mov	r0, r3
 800709a:	301c      	adds	r0, #28
 800709c:	e772      	b.n	8006f84 <_dtoa_r+0x7f4>
 800709e:	9b03      	ldr	r3, [sp, #12]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	dc37      	bgt.n	8007114 <_dtoa_r+0x984>
 80070a4:	9b06      	ldr	r3, [sp, #24]
 80070a6:	2b02      	cmp	r3, #2
 80070a8:	dd34      	ble.n	8007114 <_dtoa_r+0x984>
 80070aa:	9b03      	ldr	r3, [sp, #12]
 80070ac:	9302      	str	r3, [sp, #8]
 80070ae:	9b02      	ldr	r3, [sp, #8]
 80070b0:	b96b      	cbnz	r3, 80070ce <_dtoa_r+0x93e>
 80070b2:	4631      	mov	r1, r6
 80070b4:	2205      	movs	r2, #5
 80070b6:	4620      	mov	r0, r4
 80070b8:	f000 fd56 	bl	8007b68 <__multadd>
 80070bc:	4601      	mov	r1, r0
 80070be:	4606      	mov	r6, r0
 80070c0:	ee18 0a10 	vmov	r0, s16
 80070c4:	f000 ffba 	bl	800803c <__mcmp>
 80070c8:	2800      	cmp	r0, #0
 80070ca:	f73f adbb 	bgt.w	8006c44 <_dtoa_r+0x4b4>
 80070ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070d0:	9d01      	ldr	r5, [sp, #4]
 80070d2:	43db      	mvns	r3, r3
 80070d4:	9300      	str	r3, [sp, #0]
 80070d6:	f04f 0800 	mov.w	r8, #0
 80070da:	4631      	mov	r1, r6
 80070dc:	4620      	mov	r0, r4
 80070de:	f000 fd21 	bl	8007b24 <_Bfree>
 80070e2:	2f00      	cmp	r7, #0
 80070e4:	f43f aea4 	beq.w	8006e30 <_dtoa_r+0x6a0>
 80070e8:	f1b8 0f00 	cmp.w	r8, #0
 80070ec:	d005      	beq.n	80070fa <_dtoa_r+0x96a>
 80070ee:	45b8      	cmp	r8, r7
 80070f0:	d003      	beq.n	80070fa <_dtoa_r+0x96a>
 80070f2:	4641      	mov	r1, r8
 80070f4:	4620      	mov	r0, r4
 80070f6:	f000 fd15 	bl	8007b24 <_Bfree>
 80070fa:	4639      	mov	r1, r7
 80070fc:	4620      	mov	r0, r4
 80070fe:	f000 fd11 	bl	8007b24 <_Bfree>
 8007102:	e695      	b.n	8006e30 <_dtoa_r+0x6a0>
 8007104:	2600      	movs	r6, #0
 8007106:	4637      	mov	r7, r6
 8007108:	e7e1      	b.n	80070ce <_dtoa_r+0x93e>
 800710a:	9700      	str	r7, [sp, #0]
 800710c:	4637      	mov	r7, r6
 800710e:	e599      	b.n	8006c44 <_dtoa_r+0x4b4>
 8007110:	40240000 	.word	0x40240000
 8007114:	9b08      	ldr	r3, [sp, #32]
 8007116:	2b00      	cmp	r3, #0
 8007118:	f000 80ca 	beq.w	80072b0 <_dtoa_r+0xb20>
 800711c:	9b03      	ldr	r3, [sp, #12]
 800711e:	9302      	str	r3, [sp, #8]
 8007120:	2d00      	cmp	r5, #0
 8007122:	dd05      	ble.n	8007130 <_dtoa_r+0x9a0>
 8007124:	4639      	mov	r1, r7
 8007126:	462a      	mov	r2, r5
 8007128:	4620      	mov	r0, r4
 800712a:	f000 ff17 	bl	8007f5c <__lshift>
 800712e:	4607      	mov	r7, r0
 8007130:	f1b8 0f00 	cmp.w	r8, #0
 8007134:	d05b      	beq.n	80071ee <_dtoa_r+0xa5e>
 8007136:	6879      	ldr	r1, [r7, #4]
 8007138:	4620      	mov	r0, r4
 800713a:	f000 fcb3 	bl	8007aa4 <_Balloc>
 800713e:	4605      	mov	r5, r0
 8007140:	b928      	cbnz	r0, 800714e <_dtoa_r+0x9be>
 8007142:	4b87      	ldr	r3, [pc, #540]	; (8007360 <_dtoa_r+0xbd0>)
 8007144:	4602      	mov	r2, r0
 8007146:	f240 21ea 	movw	r1, #746	; 0x2ea
 800714a:	f7ff bb3b 	b.w	80067c4 <_dtoa_r+0x34>
 800714e:	693a      	ldr	r2, [r7, #16]
 8007150:	3202      	adds	r2, #2
 8007152:	0092      	lsls	r2, r2, #2
 8007154:	f107 010c 	add.w	r1, r7, #12
 8007158:	300c      	adds	r0, #12
 800715a:	f000 fc95 	bl	8007a88 <memcpy>
 800715e:	2201      	movs	r2, #1
 8007160:	4629      	mov	r1, r5
 8007162:	4620      	mov	r0, r4
 8007164:	f000 fefa 	bl	8007f5c <__lshift>
 8007168:	9b01      	ldr	r3, [sp, #4]
 800716a:	f103 0901 	add.w	r9, r3, #1
 800716e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8007172:	4413      	add	r3, r2
 8007174:	9305      	str	r3, [sp, #20]
 8007176:	f00a 0301 	and.w	r3, sl, #1
 800717a:	46b8      	mov	r8, r7
 800717c:	9304      	str	r3, [sp, #16]
 800717e:	4607      	mov	r7, r0
 8007180:	4631      	mov	r1, r6
 8007182:	ee18 0a10 	vmov	r0, s16
 8007186:	f7ff fa77 	bl	8006678 <quorem>
 800718a:	4641      	mov	r1, r8
 800718c:	9002      	str	r0, [sp, #8]
 800718e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8007192:	ee18 0a10 	vmov	r0, s16
 8007196:	f000 ff51 	bl	800803c <__mcmp>
 800719a:	463a      	mov	r2, r7
 800719c:	9003      	str	r0, [sp, #12]
 800719e:	4631      	mov	r1, r6
 80071a0:	4620      	mov	r0, r4
 80071a2:	f000 ff67 	bl	8008074 <__mdiff>
 80071a6:	68c2      	ldr	r2, [r0, #12]
 80071a8:	f109 3bff 	add.w	fp, r9, #4294967295
 80071ac:	4605      	mov	r5, r0
 80071ae:	bb02      	cbnz	r2, 80071f2 <_dtoa_r+0xa62>
 80071b0:	4601      	mov	r1, r0
 80071b2:	ee18 0a10 	vmov	r0, s16
 80071b6:	f000 ff41 	bl	800803c <__mcmp>
 80071ba:	4602      	mov	r2, r0
 80071bc:	4629      	mov	r1, r5
 80071be:	4620      	mov	r0, r4
 80071c0:	9207      	str	r2, [sp, #28]
 80071c2:	f000 fcaf 	bl	8007b24 <_Bfree>
 80071c6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80071ca:	ea43 0102 	orr.w	r1, r3, r2
 80071ce:	9b04      	ldr	r3, [sp, #16]
 80071d0:	430b      	orrs	r3, r1
 80071d2:	464d      	mov	r5, r9
 80071d4:	d10f      	bne.n	80071f6 <_dtoa_r+0xa66>
 80071d6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80071da:	d02a      	beq.n	8007232 <_dtoa_r+0xaa2>
 80071dc:	9b03      	ldr	r3, [sp, #12]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	dd02      	ble.n	80071e8 <_dtoa_r+0xa58>
 80071e2:	9b02      	ldr	r3, [sp, #8]
 80071e4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80071e8:	f88b a000 	strb.w	sl, [fp]
 80071ec:	e775      	b.n	80070da <_dtoa_r+0x94a>
 80071ee:	4638      	mov	r0, r7
 80071f0:	e7ba      	b.n	8007168 <_dtoa_r+0x9d8>
 80071f2:	2201      	movs	r2, #1
 80071f4:	e7e2      	b.n	80071bc <_dtoa_r+0xa2c>
 80071f6:	9b03      	ldr	r3, [sp, #12]
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	db04      	blt.n	8007206 <_dtoa_r+0xa76>
 80071fc:	9906      	ldr	r1, [sp, #24]
 80071fe:	430b      	orrs	r3, r1
 8007200:	9904      	ldr	r1, [sp, #16]
 8007202:	430b      	orrs	r3, r1
 8007204:	d122      	bne.n	800724c <_dtoa_r+0xabc>
 8007206:	2a00      	cmp	r2, #0
 8007208:	ddee      	ble.n	80071e8 <_dtoa_r+0xa58>
 800720a:	ee18 1a10 	vmov	r1, s16
 800720e:	2201      	movs	r2, #1
 8007210:	4620      	mov	r0, r4
 8007212:	f000 fea3 	bl	8007f5c <__lshift>
 8007216:	4631      	mov	r1, r6
 8007218:	ee08 0a10 	vmov	s16, r0
 800721c:	f000 ff0e 	bl	800803c <__mcmp>
 8007220:	2800      	cmp	r0, #0
 8007222:	dc03      	bgt.n	800722c <_dtoa_r+0xa9c>
 8007224:	d1e0      	bne.n	80071e8 <_dtoa_r+0xa58>
 8007226:	f01a 0f01 	tst.w	sl, #1
 800722a:	d0dd      	beq.n	80071e8 <_dtoa_r+0xa58>
 800722c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007230:	d1d7      	bne.n	80071e2 <_dtoa_r+0xa52>
 8007232:	2339      	movs	r3, #57	; 0x39
 8007234:	f88b 3000 	strb.w	r3, [fp]
 8007238:	462b      	mov	r3, r5
 800723a:	461d      	mov	r5, r3
 800723c:	3b01      	subs	r3, #1
 800723e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007242:	2a39      	cmp	r2, #57	; 0x39
 8007244:	d071      	beq.n	800732a <_dtoa_r+0xb9a>
 8007246:	3201      	adds	r2, #1
 8007248:	701a      	strb	r2, [r3, #0]
 800724a:	e746      	b.n	80070da <_dtoa_r+0x94a>
 800724c:	2a00      	cmp	r2, #0
 800724e:	dd07      	ble.n	8007260 <_dtoa_r+0xad0>
 8007250:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8007254:	d0ed      	beq.n	8007232 <_dtoa_r+0xaa2>
 8007256:	f10a 0301 	add.w	r3, sl, #1
 800725a:	f88b 3000 	strb.w	r3, [fp]
 800725e:	e73c      	b.n	80070da <_dtoa_r+0x94a>
 8007260:	9b05      	ldr	r3, [sp, #20]
 8007262:	f809 ac01 	strb.w	sl, [r9, #-1]
 8007266:	4599      	cmp	r9, r3
 8007268:	d047      	beq.n	80072fa <_dtoa_r+0xb6a>
 800726a:	ee18 1a10 	vmov	r1, s16
 800726e:	2300      	movs	r3, #0
 8007270:	220a      	movs	r2, #10
 8007272:	4620      	mov	r0, r4
 8007274:	f000 fc78 	bl	8007b68 <__multadd>
 8007278:	45b8      	cmp	r8, r7
 800727a:	ee08 0a10 	vmov	s16, r0
 800727e:	f04f 0300 	mov.w	r3, #0
 8007282:	f04f 020a 	mov.w	r2, #10
 8007286:	4641      	mov	r1, r8
 8007288:	4620      	mov	r0, r4
 800728a:	d106      	bne.n	800729a <_dtoa_r+0xb0a>
 800728c:	f000 fc6c 	bl	8007b68 <__multadd>
 8007290:	4680      	mov	r8, r0
 8007292:	4607      	mov	r7, r0
 8007294:	f109 0901 	add.w	r9, r9, #1
 8007298:	e772      	b.n	8007180 <_dtoa_r+0x9f0>
 800729a:	f000 fc65 	bl	8007b68 <__multadd>
 800729e:	4639      	mov	r1, r7
 80072a0:	4680      	mov	r8, r0
 80072a2:	2300      	movs	r3, #0
 80072a4:	220a      	movs	r2, #10
 80072a6:	4620      	mov	r0, r4
 80072a8:	f000 fc5e 	bl	8007b68 <__multadd>
 80072ac:	4607      	mov	r7, r0
 80072ae:	e7f1      	b.n	8007294 <_dtoa_r+0xb04>
 80072b0:	9b03      	ldr	r3, [sp, #12]
 80072b2:	9302      	str	r3, [sp, #8]
 80072b4:	9d01      	ldr	r5, [sp, #4]
 80072b6:	ee18 0a10 	vmov	r0, s16
 80072ba:	4631      	mov	r1, r6
 80072bc:	f7ff f9dc 	bl	8006678 <quorem>
 80072c0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80072c4:	9b01      	ldr	r3, [sp, #4]
 80072c6:	f805 ab01 	strb.w	sl, [r5], #1
 80072ca:	1aea      	subs	r2, r5, r3
 80072cc:	9b02      	ldr	r3, [sp, #8]
 80072ce:	4293      	cmp	r3, r2
 80072d0:	dd09      	ble.n	80072e6 <_dtoa_r+0xb56>
 80072d2:	ee18 1a10 	vmov	r1, s16
 80072d6:	2300      	movs	r3, #0
 80072d8:	220a      	movs	r2, #10
 80072da:	4620      	mov	r0, r4
 80072dc:	f000 fc44 	bl	8007b68 <__multadd>
 80072e0:	ee08 0a10 	vmov	s16, r0
 80072e4:	e7e7      	b.n	80072b6 <_dtoa_r+0xb26>
 80072e6:	9b02      	ldr	r3, [sp, #8]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	bfc8      	it	gt
 80072ec:	461d      	movgt	r5, r3
 80072ee:	9b01      	ldr	r3, [sp, #4]
 80072f0:	bfd8      	it	le
 80072f2:	2501      	movle	r5, #1
 80072f4:	441d      	add	r5, r3
 80072f6:	f04f 0800 	mov.w	r8, #0
 80072fa:	ee18 1a10 	vmov	r1, s16
 80072fe:	2201      	movs	r2, #1
 8007300:	4620      	mov	r0, r4
 8007302:	f000 fe2b 	bl	8007f5c <__lshift>
 8007306:	4631      	mov	r1, r6
 8007308:	ee08 0a10 	vmov	s16, r0
 800730c:	f000 fe96 	bl	800803c <__mcmp>
 8007310:	2800      	cmp	r0, #0
 8007312:	dc91      	bgt.n	8007238 <_dtoa_r+0xaa8>
 8007314:	d102      	bne.n	800731c <_dtoa_r+0xb8c>
 8007316:	f01a 0f01 	tst.w	sl, #1
 800731a:	d18d      	bne.n	8007238 <_dtoa_r+0xaa8>
 800731c:	462b      	mov	r3, r5
 800731e:	461d      	mov	r5, r3
 8007320:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007324:	2a30      	cmp	r2, #48	; 0x30
 8007326:	d0fa      	beq.n	800731e <_dtoa_r+0xb8e>
 8007328:	e6d7      	b.n	80070da <_dtoa_r+0x94a>
 800732a:	9a01      	ldr	r2, [sp, #4]
 800732c:	429a      	cmp	r2, r3
 800732e:	d184      	bne.n	800723a <_dtoa_r+0xaaa>
 8007330:	9b00      	ldr	r3, [sp, #0]
 8007332:	3301      	adds	r3, #1
 8007334:	9300      	str	r3, [sp, #0]
 8007336:	2331      	movs	r3, #49	; 0x31
 8007338:	7013      	strb	r3, [r2, #0]
 800733a:	e6ce      	b.n	80070da <_dtoa_r+0x94a>
 800733c:	4b09      	ldr	r3, [pc, #36]	; (8007364 <_dtoa_r+0xbd4>)
 800733e:	f7ff ba95 	b.w	800686c <_dtoa_r+0xdc>
 8007342:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007344:	2b00      	cmp	r3, #0
 8007346:	f47f aa6e 	bne.w	8006826 <_dtoa_r+0x96>
 800734a:	4b07      	ldr	r3, [pc, #28]	; (8007368 <_dtoa_r+0xbd8>)
 800734c:	f7ff ba8e 	b.w	800686c <_dtoa_r+0xdc>
 8007350:	9b02      	ldr	r3, [sp, #8]
 8007352:	2b00      	cmp	r3, #0
 8007354:	dcae      	bgt.n	80072b4 <_dtoa_r+0xb24>
 8007356:	9b06      	ldr	r3, [sp, #24]
 8007358:	2b02      	cmp	r3, #2
 800735a:	f73f aea8 	bgt.w	80070ae <_dtoa_r+0x91e>
 800735e:	e7a9      	b.n	80072b4 <_dtoa_r+0xb24>
 8007360:	08009718 	.word	0x08009718
 8007364:	08009518 	.word	0x08009518
 8007368:	08009699 	.word	0x08009699

0800736c <rshift>:
 800736c:	6903      	ldr	r3, [r0, #16]
 800736e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007372:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007376:	ea4f 1261 	mov.w	r2, r1, asr #5
 800737a:	f100 0414 	add.w	r4, r0, #20
 800737e:	dd45      	ble.n	800740c <rshift+0xa0>
 8007380:	f011 011f 	ands.w	r1, r1, #31
 8007384:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007388:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800738c:	d10c      	bne.n	80073a8 <rshift+0x3c>
 800738e:	f100 0710 	add.w	r7, r0, #16
 8007392:	4629      	mov	r1, r5
 8007394:	42b1      	cmp	r1, r6
 8007396:	d334      	bcc.n	8007402 <rshift+0x96>
 8007398:	1a9b      	subs	r3, r3, r2
 800739a:	009b      	lsls	r3, r3, #2
 800739c:	1eea      	subs	r2, r5, #3
 800739e:	4296      	cmp	r6, r2
 80073a0:	bf38      	it	cc
 80073a2:	2300      	movcc	r3, #0
 80073a4:	4423      	add	r3, r4
 80073a6:	e015      	b.n	80073d4 <rshift+0x68>
 80073a8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80073ac:	f1c1 0820 	rsb	r8, r1, #32
 80073b0:	40cf      	lsrs	r7, r1
 80073b2:	f105 0e04 	add.w	lr, r5, #4
 80073b6:	46a1      	mov	r9, r4
 80073b8:	4576      	cmp	r6, lr
 80073ba:	46f4      	mov	ip, lr
 80073bc:	d815      	bhi.n	80073ea <rshift+0x7e>
 80073be:	1a9a      	subs	r2, r3, r2
 80073c0:	0092      	lsls	r2, r2, #2
 80073c2:	3a04      	subs	r2, #4
 80073c4:	3501      	adds	r5, #1
 80073c6:	42ae      	cmp	r6, r5
 80073c8:	bf38      	it	cc
 80073ca:	2200      	movcc	r2, #0
 80073cc:	18a3      	adds	r3, r4, r2
 80073ce:	50a7      	str	r7, [r4, r2]
 80073d0:	b107      	cbz	r7, 80073d4 <rshift+0x68>
 80073d2:	3304      	adds	r3, #4
 80073d4:	1b1a      	subs	r2, r3, r4
 80073d6:	42a3      	cmp	r3, r4
 80073d8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80073dc:	bf08      	it	eq
 80073de:	2300      	moveq	r3, #0
 80073e0:	6102      	str	r2, [r0, #16]
 80073e2:	bf08      	it	eq
 80073e4:	6143      	streq	r3, [r0, #20]
 80073e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073ea:	f8dc c000 	ldr.w	ip, [ip]
 80073ee:	fa0c fc08 	lsl.w	ip, ip, r8
 80073f2:	ea4c 0707 	orr.w	r7, ip, r7
 80073f6:	f849 7b04 	str.w	r7, [r9], #4
 80073fa:	f85e 7b04 	ldr.w	r7, [lr], #4
 80073fe:	40cf      	lsrs	r7, r1
 8007400:	e7da      	b.n	80073b8 <rshift+0x4c>
 8007402:	f851 cb04 	ldr.w	ip, [r1], #4
 8007406:	f847 cf04 	str.w	ip, [r7, #4]!
 800740a:	e7c3      	b.n	8007394 <rshift+0x28>
 800740c:	4623      	mov	r3, r4
 800740e:	e7e1      	b.n	80073d4 <rshift+0x68>

08007410 <__hexdig_fun>:
 8007410:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007414:	2b09      	cmp	r3, #9
 8007416:	d802      	bhi.n	800741e <__hexdig_fun+0xe>
 8007418:	3820      	subs	r0, #32
 800741a:	b2c0      	uxtb	r0, r0
 800741c:	4770      	bx	lr
 800741e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007422:	2b05      	cmp	r3, #5
 8007424:	d801      	bhi.n	800742a <__hexdig_fun+0x1a>
 8007426:	3847      	subs	r0, #71	; 0x47
 8007428:	e7f7      	b.n	800741a <__hexdig_fun+0xa>
 800742a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800742e:	2b05      	cmp	r3, #5
 8007430:	d801      	bhi.n	8007436 <__hexdig_fun+0x26>
 8007432:	3827      	subs	r0, #39	; 0x27
 8007434:	e7f1      	b.n	800741a <__hexdig_fun+0xa>
 8007436:	2000      	movs	r0, #0
 8007438:	4770      	bx	lr
	...

0800743c <__gethex>:
 800743c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007440:	ed2d 8b02 	vpush	{d8}
 8007444:	b089      	sub	sp, #36	; 0x24
 8007446:	ee08 0a10 	vmov	s16, r0
 800744a:	9304      	str	r3, [sp, #16]
 800744c:	4bb4      	ldr	r3, [pc, #720]	; (8007720 <__gethex+0x2e4>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	9301      	str	r3, [sp, #4]
 8007452:	4618      	mov	r0, r3
 8007454:	468b      	mov	fp, r1
 8007456:	4690      	mov	r8, r2
 8007458:	f7f8 feda 	bl	8000210 <strlen>
 800745c:	9b01      	ldr	r3, [sp, #4]
 800745e:	f8db 2000 	ldr.w	r2, [fp]
 8007462:	4403      	add	r3, r0
 8007464:	4682      	mov	sl, r0
 8007466:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800746a:	9305      	str	r3, [sp, #20]
 800746c:	1c93      	adds	r3, r2, #2
 800746e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007472:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007476:	32fe      	adds	r2, #254	; 0xfe
 8007478:	18d1      	adds	r1, r2, r3
 800747a:	461f      	mov	r7, r3
 800747c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007480:	9100      	str	r1, [sp, #0]
 8007482:	2830      	cmp	r0, #48	; 0x30
 8007484:	d0f8      	beq.n	8007478 <__gethex+0x3c>
 8007486:	f7ff ffc3 	bl	8007410 <__hexdig_fun>
 800748a:	4604      	mov	r4, r0
 800748c:	2800      	cmp	r0, #0
 800748e:	d13a      	bne.n	8007506 <__gethex+0xca>
 8007490:	9901      	ldr	r1, [sp, #4]
 8007492:	4652      	mov	r2, sl
 8007494:	4638      	mov	r0, r7
 8007496:	f001 fa33 	bl	8008900 <strncmp>
 800749a:	4605      	mov	r5, r0
 800749c:	2800      	cmp	r0, #0
 800749e:	d168      	bne.n	8007572 <__gethex+0x136>
 80074a0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80074a4:	eb07 060a 	add.w	r6, r7, sl
 80074a8:	f7ff ffb2 	bl	8007410 <__hexdig_fun>
 80074ac:	2800      	cmp	r0, #0
 80074ae:	d062      	beq.n	8007576 <__gethex+0x13a>
 80074b0:	4633      	mov	r3, r6
 80074b2:	7818      	ldrb	r0, [r3, #0]
 80074b4:	2830      	cmp	r0, #48	; 0x30
 80074b6:	461f      	mov	r7, r3
 80074b8:	f103 0301 	add.w	r3, r3, #1
 80074bc:	d0f9      	beq.n	80074b2 <__gethex+0x76>
 80074be:	f7ff ffa7 	bl	8007410 <__hexdig_fun>
 80074c2:	2301      	movs	r3, #1
 80074c4:	fab0 f480 	clz	r4, r0
 80074c8:	0964      	lsrs	r4, r4, #5
 80074ca:	4635      	mov	r5, r6
 80074cc:	9300      	str	r3, [sp, #0]
 80074ce:	463a      	mov	r2, r7
 80074d0:	4616      	mov	r6, r2
 80074d2:	3201      	adds	r2, #1
 80074d4:	7830      	ldrb	r0, [r6, #0]
 80074d6:	f7ff ff9b 	bl	8007410 <__hexdig_fun>
 80074da:	2800      	cmp	r0, #0
 80074dc:	d1f8      	bne.n	80074d0 <__gethex+0x94>
 80074de:	9901      	ldr	r1, [sp, #4]
 80074e0:	4652      	mov	r2, sl
 80074e2:	4630      	mov	r0, r6
 80074e4:	f001 fa0c 	bl	8008900 <strncmp>
 80074e8:	b980      	cbnz	r0, 800750c <__gethex+0xd0>
 80074ea:	b94d      	cbnz	r5, 8007500 <__gethex+0xc4>
 80074ec:	eb06 050a 	add.w	r5, r6, sl
 80074f0:	462a      	mov	r2, r5
 80074f2:	4616      	mov	r6, r2
 80074f4:	3201      	adds	r2, #1
 80074f6:	7830      	ldrb	r0, [r6, #0]
 80074f8:	f7ff ff8a 	bl	8007410 <__hexdig_fun>
 80074fc:	2800      	cmp	r0, #0
 80074fe:	d1f8      	bne.n	80074f2 <__gethex+0xb6>
 8007500:	1bad      	subs	r5, r5, r6
 8007502:	00ad      	lsls	r5, r5, #2
 8007504:	e004      	b.n	8007510 <__gethex+0xd4>
 8007506:	2400      	movs	r4, #0
 8007508:	4625      	mov	r5, r4
 800750a:	e7e0      	b.n	80074ce <__gethex+0x92>
 800750c:	2d00      	cmp	r5, #0
 800750e:	d1f7      	bne.n	8007500 <__gethex+0xc4>
 8007510:	7833      	ldrb	r3, [r6, #0]
 8007512:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007516:	2b50      	cmp	r3, #80	; 0x50
 8007518:	d13b      	bne.n	8007592 <__gethex+0x156>
 800751a:	7873      	ldrb	r3, [r6, #1]
 800751c:	2b2b      	cmp	r3, #43	; 0x2b
 800751e:	d02c      	beq.n	800757a <__gethex+0x13e>
 8007520:	2b2d      	cmp	r3, #45	; 0x2d
 8007522:	d02e      	beq.n	8007582 <__gethex+0x146>
 8007524:	1c71      	adds	r1, r6, #1
 8007526:	f04f 0900 	mov.w	r9, #0
 800752a:	7808      	ldrb	r0, [r1, #0]
 800752c:	f7ff ff70 	bl	8007410 <__hexdig_fun>
 8007530:	1e43      	subs	r3, r0, #1
 8007532:	b2db      	uxtb	r3, r3
 8007534:	2b18      	cmp	r3, #24
 8007536:	d82c      	bhi.n	8007592 <__gethex+0x156>
 8007538:	f1a0 0210 	sub.w	r2, r0, #16
 800753c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007540:	f7ff ff66 	bl	8007410 <__hexdig_fun>
 8007544:	1e43      	subs	r3, r0, #1
 8007546:	b2db      	uxtb	r3, r3
 8007548:	2b18      	cmp	r3, #24
 800754a:	d91d      	bls.n	8007588 <__gethex+0x14c>
 800754c:	f1b9 0f00 	cmp.w	r9, #0
 8007550:	d000      	beq.n	8007554 <__gethex+0x118>
 8007552:	4252      	negs	r2, r2
 8007554:	4415      	add	r5, r2
 8007556:	f8cb 1000 	str.w	r1, [fp]
 800755a:	b1e4      	cbz	r4, 8007596 <__gethex+0x15a>
 800755c:	9b00      	ldr	r3, [sp, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	bf14      	ite	ne
 8007562:	2700      	movne	r7, #0
 8007564:	2706      	moveq	r7, #6
 8007566:	4638      	mov	r0, r7
 8007568:	b009      	add	sp, #36	; 0x24
 800756a:	ecbd 8b02 	vpop	{d8}
 800756e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007572:	463e      	mov	r6, r7
 8007574:	4625      	mov	r5, r4
 8007576:	2401      	movs	r4, #1
 8007578:	e7ca      	b.n	8007510 <__gethex+0xd4>
 800757a:	f04f 0900 	mov.w	r9, #0
 800757e:	1cb1      	adds	r1, r6, #2
 8007580:	e7d3      	b.n	800752a <__gethex+0xee>
 8007582:	f04f 0901 	mov.w	r9, #1
 8007586:	e7fa      	b.n	800757e <__gethex+0x142>
 8007588:	230a      	movs	r3, #10
 800758a:	fb03 0202 	mla	r2, r3, r2, r0
 800758e:	3a10      	subs	r2, #16
 8007590:	e7d4      	b.n	800753c <__gethex+0x100>
 8007592:	4631      	mov	r1, r6
 8007594:	e7df      	b.n	8007556 <__gethex+0x11a>
 8007596:	1bf3      	subs	r3, r6, r7
 8007598:	3b01      	subs	r3, #1
 800759a:	4621      	mov	r1, r4
 800759c:	2b07      	cmp	r3, #7
 800759e:	dc0b      	bgt.n	80075b8 <__gethex+0x17c>
 80075a0:	ee18 0a10 	vmov	r0, s16
 80075a4:	f000 fa7e 	bl	8007aa4 <_Balloc>
 80075a8:	4604      	mov	r4, r0
 80075aa:	b940      	cbnz	r0, 80075be <__gethex+0x182>
 80075ac:	4b5d      	ldr	r3, [pc, #372]	; (8007724 <__gethex+0x2e8>)
 80075ae:	4602      	mov	r2, r0
 80075b0:	21de      	movs	r1, #222	; 0xde
 80075b2:	485d      	ldr	r0, [pc, #372]	; (8007728 <__gethex+0x2ec>)
 80075b4:	f001 f9c6 	bl	8008944 <__assert_func>
 80075b8:	3101      	adds	r1, #1
 80075ba:	105b      	asrs	r3, r3, #1
 80075bc:	e7ee      	b.n	800759c <__gethex+0x160>
 80075be:	f100 0914 	add.w	r9, r0, #20
 80075c2:	f04f 0b00 	mov.w	fp, #0
 80075c6:	f1ca 0301 	rsb	r3, sl, #1
 80075ca:	f8cd 9008 	str.w	r9, [sp, #8]
 80075ce:	f8cd b000 	str.w	fp, [sp]
 80075d2:	9306      	str	r3, [sp, #24]
 80075d4:	42b7      	cmp	r7, r6
 80075d6:	d340      	bcc.n	800765a <__gethex+0x21e>
 80075d8:	9802      	ldr	r0, [sp, #8]
 80075da:	9b00      	ldr	r3, [sp, #0]
 80075dc:	f840 3b04 	str.w	r3, [r0], #4
 80075e0:	eba0 0009 	sub.w	r0, r0, r9
 80075e4:	1080      	asrs	r0, r0, #2
 80075e6:	0146      	lsls	r6, r0, #5
 80075e8:	6120      	str	r0, [r4, #16]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 fb4c 	bl	8007c88 <__hi0bits>
 80075f0:	1a30      	subs	r0, r6, r0
 80075f2:	f8d8 6000 	ldr.w	r6, [r8]
 80075f6:	42b0      	cmp	r0, r6
 80075f8:	dd63      	ble.n	80076c2 <__gethex+0x286>
 80075fa:	1b87      	subs	r7, r0, r6
 80075fc:	4639      	mov	r1, r7
 80075fe:	4620      	mov	r0, r4
 8007600:	f000 fef0 	bl	80083e4 <__any_on>
 8007604:	4682      	mov	sl, r0
 8007606:	b1a8      	cbz	r0, 8007634 <__gethex+0x1f8>
 8007608:	1e7b      	subs	r3, r7, #1
 800760a:	1159      	asrs	r1, r3, #5
 800760c:	f003 021f 	and.w	r2, r3, #31
 8007610:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8007614:	f04f 0a01 	mov.w	sl, #1
 8007618:	fa0a f202 	lsl.w	r2, sl, r2
 800761c:	420a      	tst	r2, r1
 800761e:	d009      	beq.n	8007634 <__gethex+0x1f8>
 8007620:	4553      	cmp	r3, sl
 8007622:	dd05      	ble.n	8007630 <__gethex+0x1f4>
 8007624:	1eb9      	subs	r1, r7, #2
 8007626:	4620      	mov	r0, r4
 8007628:	f000 fedc 	bl	80083e4 <__any_on>
 800762c:	2800      	cmp	r0, #0
 800762e:	d145      	bne.n	80076bc <__gethex+0x280>
 8007630:	f04f 0a02 	mov.w	sl, #2
 8007634:	4639      	mov	r1, r7
 8007636:	4620      	mov	r0, r4
 8007638:	f7ff fe98 	bl	800736c <rshift>
 800763c:	443d      	add	r5, r7
 800763e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007642:	42ab      	cmp	r3, r5
 8007644:	da4c      	bge.n	80076e0 <__gethex+0x2a4>
 8007646:	ee18 0a10 	vmov	r0, s16
 800764a:	4621      	mov	r1, r4
 800764c:	f000 fa6a 	bl	8007b24 <_Bfree>
 8007650:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007652:	2300      	movs	r3, #0
 8007654:	6013      	str	r3, [r2, #0]
 8007656:	27a3      	movs	r7, #163	; 0xa3
 8007658:	e785      	b.n	8007566 <__gethex+0x12a>
 800765a:	1e73      	subs	r3, r6, #1
 800765c:	9a05      	ldr	r2, [sp, #20]
 800765e:	9303      	str	r3, [sp, #12]
 8007660:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007664:	4293      	cmp	r3, r2
 8007666:	d019      	beq.n	800769c <__gethex+0x260>
 8007668:	f1bb 0f20 	cmp.w	fp, #32
 800766c:	d107      	bne.n	800767e <__gethex+0x242>
 800766e:	9b02      	ldr	r3, [sp, #8]
 8007670:	9a00      	ldr	r2, [sp, #0]
 8007672:	f843 2b04 	str.w	r2, [r3], #4
 8007676:	9302      	str	r3, [sp, #8]
 8007678:	2300      	movs	r3, #0
 800767a:	9300      	str	r3, [sp, #0]
 800767c:	469b      	mov	fp, r3
 800767e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8007682:	f7ff fec5 	bl	8007410 <__hexdig_fun>
 8007686:	9b00      	ldr	r3, [sp, #0]
 8007688:	f000 000f 	and.w	r0, r0, #15
 800768c:	fa00 f00b 	lsl.w	r0, r0, fp
 8007690:	4303      	orrs	r3, r0
 8007692:	9300      	str	r3, [sp, #0]
 8007694:	f10b 0b04 	add.w	fp, fp, #4
 8007698:	9b03      	ldr	r3, [sp, #12]
 800769a:	e00d      	b.n	80076b8 <__gethex+0x27c>
 800769c:	9b03      	ldr	r3, [sp, #12]
 800769e:	9a06      	ldr	r2, [sp, #24]
 80076a0:	4413      	add	r3, r2
 80076a2:	42bb      	cmp	r3, r7
 80076a4:	d3e0      	bcc.n	8007668 <__gethex+0x22c>
 80076a6:	4618      	mov	r0, r3
 80076a8:	9901      	ldr	r1, [sp, #4]
 80076aa:	9307      	str	r3, [sp, #28]
 80076ac:	4652      	mov	r2, sl
 80076ae:	f001 f927 	bl	8008900 <strncmp>
 80076b2:	9b07      	ldr	r3, [sp, #28]
 80076b4:	2800      	cmp	r0, #0
 80076b6:	d1d7      	bne.n	8007668 <__gethex+0x22c>
 80076b8:	461e      	mov	r6, r3
 80076ba:	e78b      	b.n	80075d4 <__gethex+0x198>
 80076bc:	f04f 0a03 	mov.w	sl, #3
 80076c0:	e7b8      	b.n	8007634 <__gethex+0x1f8>
 80076c2:	da0a      	bge.n	80076da <__gethex+0x29e>
 80076c4:	1a37      	subs	r7, r6, r0
 80076c6:	4621      	mov	r1, r4
 80076c8:	ee18 0a10 	vmov	r0, s16
 80076cc:	463a      	mov	r2, r7
 80076ce:	f000 fc45 	bl	8007f5c <__lshift>
 80076d2:	1bed      	subs	r5, r5, r7
 80076d4:	4604      	mov	r4, r0
 80076d6:	f100 0914 	add.w	r9, r0, #20
 80076da:	f04f 0a00 	mov.w	sl, #0
 80076de:	e7ae      	b.n	800763e <__gethex+0x202>
 80076e0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80076e4:	42a8      	cmp	r0, r5
 80076e6:	dd72      	ble.n	80077ce <__gethex+0x392>
 80076e8:	1b45      	subs	r5, r0, r5
 80076ea:	42ae      	cmp	r6, r5
 80076ec:	dc36      	bgt.n	800775c <__gethex+0x320>
 80076ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80076f2:	2b02      	cmp	r3, #2
 80076f4:	d02a      	beq.n	800774c <__gethex+0x310>
 80076f6:	2b03      	cmp	r3, #3
 80076f8:	d02c      	beq.n	8007754 <__gethex+0x318>
 80076fa:	2b01      	cmp	r3, #1
 80076fc:	d11c      	bne.n	8007738 <__gethex+0x2fc>
 80076fe:	42ae      	cmp	r6, r5
 8007700:	d11a      	bne.n	8007738 <__gethex+0x2fc>
 8007702:	2e01      	cmp	r6, #1
 8007704:	d112      	bne.n	800772c <__gethex+0x2f0>
 8007706:	9a04      	ldr	r2, [sp, #16]
 8007708:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800770c:	6013      	str	r3, [r2, #0]
 800770e:	2301      	movs	r3, #1
 8007710:	6123      	str	r3, [r4, #16]
 8007712:	f8c9 3000 	str.w	r3, [r9]
 8007716:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007718:	2762      	movs	r7, #98	; 0x62
 800771a:	601c      	str	r4, [r3, #0]
 800771c:	e723      	b.n	8007566 <__gethex+0x12a>
 800771e:	bf00      	nop
 8007720:	08009790 	.word	0x08009790
 8007724:	08009718 	.word	0x08009718
 8007728:	08009729 	.word	0x08009729
 800772c:	1e71      	subs	r1, r6, #1
 800772e:	4620      	mov	r0, r4
 8007730:	f000 fe58 	bl	80083e4 <__any_on>
 8007734:	2800      	cmp	r0, #0
 8007736:	d1e6      	bne.n	8007706 <__gethex+0x2ca>
 8007738:	ee18 0a10 	vmov	r0, s16
 800773c:	4621      	mov	r1, r4
 800773e:	f000 f9f1 	bl	8007b24 <_Bfree>
 8007742:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8007744:	2300      	movs	r3, #0
 8007746:	6013      	str	r3, [r2, #0]
 8007748:	2750      	movs	r7, #80	; 0x50
 800774a:	e70c      	b.n	8007566 <__gethex+0x12a>
 800774c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800774e:	2b00      	cmp	r3, #0
 8007750:	d1f2      	bne.n	8007738 <__gethex+0x2fc>
 8007752:	e7d8      	b.n	8007706 <__gethex+0x2ca>
 8007754:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007756:	2b00      	cmp	r3, #0
 8007758:	d1d5      	bne.n	8007706 <__gethex+0x2ca>
 800775a:	e7ed      	b.n	8007738 <__gethex+0x2fc>
 800775c:	1e6f      	subs	r7, r5, #1
 800775e:	f1ba 0f00 	cmp.w	sl, #0
 8007762:	d131      	bne.n	80077c8 <__gethex+0x38c>
 8007764:	b127      	cbz	r7, 8007770 <__gethex+0x334>
 8007766:	4639      	mov	r1, r7
 8007768:	4620      	mov	r0, r4
 800776a:	f000 fe3b 	bl	80083e4 <__any_on>
 800776e:	4682      	mov	sl, r0
 8007770:	117b      	asrs	r3, r7, #5
 8007772:	2101      	movs	r1, #1
 8007774:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8007778:	f007 071f 	and.w	r7, r7, #31
 800777c:	fa01 f707 	lsl.w	r7, r1, r7
 8007780:	421f      	tst	r7, r3
 8007782:	4629      	mov	r1, r5
 8007784:	4620      	mov	r0, r4
 8007786:	bf18      	it	ne
 8007788:	f04a 0a02 	orrne.w	sl, sl, #2
 800778c:	1b76      	subs	r6, r6, r5
 800778e:	f7ff fded 	bl	800736c <rshift>
 8007792:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8007796:	2702      	movs	r7, #2
 8007798:	f1ba 0f00 	cmp.w	sl, #0
 800779c:	d048      	beq.n	8007830 <__gethex+0x3f4>
 800779e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80077a2:	2b02      	cmp	r3, #2
 80077a4:	d015      	beq.n	80077d2 <__gethex+0x396>
 80077a6:	2b03      	cmp	r3, #3
 80077a8:	d017      	beq.n	80077da <__gethex+0x39e>
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d109      	bne.n	80077c2 <__gethex+0x386>
 80077ae:	f01a 0f02 	tst.w	sl, #2
 80077b2:	d006      	beq.n	80077c2 <__gethex+0x386>
 80077b4:	f8d9 0000 	ldr.w	r0, [r9]
 80077b8:	ea4a 0a00 	orr.w	sl, sl, r0
 80077bc:	f01a 0f01 	tst.w	sl, #1
 80077c0:	d10e      	bne.n	80077e0 <__gethex+0x3a4>
 80077c2:	f047 0710 	orr.w	r7, r7, #16
 80077c6:	e033      	b.n	8007830 <__gethex+0x3f4>
 80077c8:	f04f 0a01 	mov.w	sl, #1
 80077cc:	e7d0      	b.n	8007770 <__gethex+0x334>
 80077ce:	2701      	movs	r7, #1
 80077d0:	e7e2      	b.n	8007798 <__gethex+0x35c>
 80077d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077d4:	f1c3 0301 	rsb	r3, r3, #1
 80077d8:	9315      	str	r3, [sp, #84]	; 0x54
 80077da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d0f0      	beq.n	80077c2 <__gethex+0x386>
 80077e0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80077e4:	f104 0314 	add.w	r3, r4, #20
 80077e8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80077ec:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80077f0:	f04f 0c00 	mov.w	ip, #0
 80077f4:	4618      	mov	r0, r3
 80077f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80077fa:	f1b2 3fff 	cmp.w	r2, #4294967295
 80077fe:	d01c      	beq.n	800783a <__gethex+0x3fe>
 8007800:	3201      	adds	r2, #1
 8007802:	6002      	str	r2, [r0, #0]
 8007804:	2f02      	cmp	r7, #2
 8007806:	f104 0314 	add.w	r3, r4, #20
 800780a:	d13f      	bne.n	800788c <__gethex+0x450>
 800780c:	f8d8 2000 	ldr.w	r2, [r8]
 8007810:	3a01      	subs	r2, #1
 8007812:	42b2      	cmp	r2, r6
 8007814:	d10a      	bne.n	800782c <__gethex+0x3f0>
 8007816:	1171      	asrs	r1, r6, #5
 8007818:	2201      	movs	r2, #1
 800781a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800781e:	f006 061f 	and.w	r6, r6, #31
 8007822:	fa02 f606 	lsl.w	r6, r2, r6
 8007826:	421e      	tst	r6, r3
 8007828:	bf18      	it	ne
 800782a:	4617      	movne	r7, r2
 800782c:	f047 0720 	orr.w	r7, r7, #32
 8007830:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007832:	601c      	str	r4, [r3, #0]
 8007834:	9b04      	ldr	r3, [sp, #16]
 8007836:	601d      	str	r5, [r3, #0]
 8007838:	e695      	b.n	8007566 <__gethex+0x12a>
 800783a:	4299      	cmp	r1, r3
 800783c:	f843 cc04 	str.w	ip, [r3, #-4]
 8007840:	d8d8      	bhi.n	80077f4 <__gethex+0x3b8>
 8007842:	68a3      	ldr	r3, [r4, #8]
 8007844:	459b      	cmp	fp, r3
 8007846:	db19      	blt.n	800787c <__gethex+0x440>
 8007848:	6861      	ldr	r1, [r4, #4]
 800784a:	ee18 0a10 	vmov	r0, s16
 800784e:	3101      	adds	r1, #1
 8007850:	f000 f928 	bl	8007aa4 <_Balloc>
 8007854:	4681      	mov	r9, r0
 8007856:	b918      	cbnz	r0, 8007860 <__gethex+0x424>
 8007858:	4b1a      	ldr	r3, [pc, #104]	; (80078c4 <__gethex+0x488>)
 800785a:	4602      	mov	r2, r0
 800785c:	2184      	movs	r1, #132	; 0x84
 800785e:	e6a8      	b.n	80075b2 <__gethex+0x176>
 8007860:	6922      	ldr	r2, [r4, #16]
 8007862:	3202      	adds	r2, #2
 8007864:	f104 010c 	add.w	r1, r4, #12
 8007868:	0092      	lsls	r2, r2, #2
 800786a:	300c      	adds	r0, #12
 800786c:	f000 f90c 	bl	8007a88 <memcpy>
 8007870:	4621      	mov	r1, r4
 8007872:	ee18 0a10 	vmov	r0, s16
 8007876:	f000 f955 	bl	8007b24 <_Bfree>
 800787a:	464c      	mov	r4, r9
 800787c:	6923      	ldr	r3, [r4, #16]
 800787e:	1c5a      	adds	r2, r3, #1
 8007880:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007884:	6122      	str	r2, [r4, #16]
 8007886:	2201      	movs	r2, #1
 8007888:	615a      	str	r2, [r3, #20]
 800788a:	e7bb      	b.n	8007804 <__gethex+0x3c8>
 800788c:	6922      	ldr	r2, [r4, #16]
 800788e:	455a      	cmp	r2, fp
 8007890:	dd0b      	ble.n	80078aa <__gethex+0x46e>
 8007892:	2101      	movs	r1, #1
 8007894:	4620      	mov	r0, r4
 8007896:	f7ff fd69 	bl	800736c <rshift>
 800789a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800789e:	3501      	adds	r5, #1
 80078a0:	42ab      	cmp	r3, r5
 80078a2:	f6ff aed0 	blt.w	8007646 <__gethex+0x20a>
 80078a6:	2701      	movs	r7, #1
 80078a8:	e7c0      	b.n	800782c <__gethex+0x3f0>
 80078aa:	f016 061f 	ands.w	r6, r6, #31
 80078ae:	d0fa      	beq.n	80078a6 <__gethex+0x46a>
 80078b0:	4453      	add	r3, sl
 80078b2:	f1c6 0620 	rsb	r6, r6, #32
 80078b6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80078ba:	f000 f9e5 	bl	8007c88 <__hi0bits>
 80078be:	42b0      	cmp	r0, r6
 80078c0:	dbe7      	blt.n	8007892 <__gethex+0x456>
 80078c2:	e7f0      	b.n	80078a6 <__gethex+0x46a>
 80078c4:	08009718 	.word	0x08009718

080078c8 <L_shift>:
 80078c8:	f1c2 0208 	rsb	r2, r2, #8
 80078cc:	0092      	lsls	r2, r2, #2
 80078ce:	b570      	push	{r4, r5, r6, lr}
 80078d0:	f1c2 0620 	rsb	r6, r2, #32
 80078d4:	6843      	ldr	r3, [r0, #4]
 80078d6:	6804      	ldr	r4, [r0, #0]
 80078d8:	fa03 f506 	lsl.w	r5, r3, r6
 80078dc:	432c      	orrs	r4, r5
 80078de:	40d3      	lsrs	r3, r2
 80078e0:	6004      	str	r4, [r0, #0]
 80078e2:	f840 3f04 	str.w	r3, [r0, #4]!
 80078e6:	4288      	cmp	r0, r1
 80078e8:	d3f4      	bcc.n	80078d4 <L_shift+0xc>
 80078ea:	bd70      	pop	{r4, r5, r6, pc}

080078ec <__match>:
 80078ec:	b530      	push	{r4, r5, lr}
 80078ee:	6803      	ldr	r3, [r0, #0]
 80078f0:	3301      	adds	r3, #1
 80078f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078f6:	b914      	cbnz	r4, 80078fe <__match+0x12>
 80078f8:	6003      	str	r3, [r0, #0]
 80078fa:	2001      	movs	r0, #1
 80078fc:	bd30      	pop	{r4, r5, pc}
 80078fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007902:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8007906:	2d19      	cmp	r5, #25
 8007908:	bf98      	it	ls
 800790a:	3220      	addls	r2, #32
 800790c:	42a2      	cmp	r2, r4
 800790e:	d0f0      	beq.n	80078f2 <__match+0x6>
 8007910:	2000      	movs	r0, #0
 8007912:	e7f3      	b.n	80078fc <__match+0x10>

08007914 <__hexnan>:
 8007914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007918:	680b      	ldr	r3, [r1, #0]
 800791a:	115e      	asrs	r6, r3, #5
 800791c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8007920:	f013 031f 	ands.w	r3, r3, #31
 8007924:	b087      	sub	sp, #28
 8007926:	bf18      	it	ne
 8007928:	3604      	addne	r6, #4
 800792a:	2500      	movs	r5, #0
 800792c:	1f37      	subs	r7, r6, #4
 800792e:	4690      	mov	r8, r2
 8007930:	6802      	ldr	r2, [r0, #0]
 8007932:	9301      	str	r3, [sp, #4]
 8007934:	4682      	mov	sl, r0
 8007936:	f846 5c04 	str.w	r5, [r6, #-4]
 800793a:	46b9      	mov	r9, r7
 800793c:	463c      	mov	r4, r7
 800793e:	9502      	str	r5, [sp, #8]
 8007940:	46ab      	mov	fp, r5
 8007942:	7851      	ldrb	r1, [r2, #1]
 8007944:	1c53      	adds	r3, r2, #1
 8007946:	9303      	str	r3, [sp, #12]
 8007948:	b341      	cbz	r1, 800799c <__hexnan+0x88>
 800794a:	4608      	mov	r0, r1
 800794c:	9205      	str	r2, [sp, #20]
 800794e:	9104      	str	r1, [sp, #16]
 8007950:	f7ff fd5e 	bl	8007410 <__hexdig_fun>
 8007954:	2800      	cmp	r0, #0
 8007956:	d14f      	bne.n	80079f8 <__hexnan+0xe4>
 8007958:	9904      	ldr	r1, [sp, #16]
 800795a:	9a05      	ldr	r2, [sp, #20]
 800795c:	2920      	cmp	r1, #32
 800795e:	d818      	bhi.n	8007992 <__hexnan+0x7e>
 8007960:	9b02      	ldr	r3, [sp, #8]
 8007962:	459b      	cmp	fp, r3
 8007964:	dd13      	ble.n	800798e <__hexnan+0x7a>
 8007966:	454c      	cmp	r4, r9
 8007968:	d206      	bcs.n	8007978 <__hexnan+0x64>
 800796a:	2d07      	cmp	r5, #7
 800796c:	dc04      	bgt.n	8007978 <__hexnan+0x64>
 800796e:	462a      	mov	r2, r5
 8007970:	4649      	mov	r1, r9
 8007972:	4620      	mov	r0, r4
 8007974:	f7ff ffa8 	bl	80078c8 <L_shift>
 8007978:	4544      	cmp	r4, r8
 800797a:	d950      	bls.n	8007a1e <__hexnan+0x10a>
 800797c:	2300      	movs	r3, #0
 800797e:	f1a4 0904 	sub.w	r9, r4, #4
 8007982:	f844 3c04 	str.w	r3, [r4, #-4]
 8007986:	f8cd b008 	str.w	fp, [sp, #8]
 800798a:	464c      	mov	r4, r9
 800798c:	461d      	mov	r5, r3
 800798e:	9a03      	ldr	r2, [sp, #12]
 8007990:	e7d7      	b.n	8007942 <__hexnan+0x2e>
 8007992:	2929      	cmp	r1, #41	; 0x29
 8007994:	d156      	bne.n	8007a44 <__hexnan+0x130>
 8007996:	3202      	adds	r2, #2
 8007998:	f8ca 2000 	str.w	r2, [sl]
 800799c:	f1bb 0f00 	cmp.w	fp, #0
 80079a0:	d050      	beq.n	8007a44 <__hexnan+0x130>
 80079a2:	454c      	cmp	r4, r9
 80079a4:	d206      	bcs.n	80079b4 <__hexnan+0xa0>
 80079a6:	2d07      	cmp	r5, #7
 80079a8:	dc04      	bgt.n	80079b4 <__hexnan+0xa0>
 80079aa:	462a      	mov	r2, r5
 80079ac:	4649      	mov	r1, r9
 80079ae:	4620      	mov	r0, r4
 80079b0:	f7ff ff8a 	bl	80078c8 <L_shift>
 80079b4:	4544      	cmp	r4, r8
 80079b6:	d934      	bls.n	8007a22 <__hexnan+0x10e>
 80079b8:	f1a8 0204 	sub.w	r2, r8, #4
 80079bc:	4623      	mov	r3, r4
 80079be:	f853 1b04 	ldr.w	r1, [r3], #4
 80079c2:	f842 1f04 	str.w	r1, [r2, #4]!
 80079c6:	429f      	cmp	r7, r3
 80079c8:	d2f9      	bcs.n	80079be <__hexnan+0xaa>
 80079ca:	1b3b      	subs	r3, r7, r4
 80079cc:	f023 0303 	bic.w	r3, r3, #3
 80079d0:	3304      	adds	r3, #4
 80079d2:	3401      	adds	r4, #1
 80079d4:	3e03      	subs	r6, #3
 80079d6:	42b4      	cmp	r4, r6
 80079d8:	bf88      	it	hi
 80079da:	2304      	movhi	r3, #4
 80079dc:	4443      	add	r3, r8
 80079de:	2200      	movs	r2, #0
 80079e0:	f843 2b04 	str.w	r2, [r3], #4
 80079e4:	429f      	cmp	r7, r3
 80079e6:	d2fb      	bcs.n	80079e0 <__hexnan+0xcc>
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	b91b      	cbnz	r3, 80079f4 <__hexnan+0xe0>
 80079ec:	4547      	cmp	r7, r8
 80079ee:	d127      	bne.n	8007a40 <__hexnan+0x12c>
 80079f0:	2301      	movs	r3, #1
 80079f2:	603b      	str	r3, [r7, #0]
 80079f4:	2005      	movs	r0, #5
 80079f6:	e026      	b.n	8007a46 <__hexnan+0x132>
 80079f8:	3501      	adds	r5, #1
 80079fa:	2d08      	cmp	r5, #8
 80079fc:	f10b 0b01 	add.w	fp, fp, #1
 8007a00:	dd06      	ble.n	8007a10 <__hexnan+0xfc>
 8007a02:	4544      	cmp	r4, r8
 8007a04:	d9c3      	bls.n	800798e <__hexnan+0x7a>
 8007a06:	2300      	movs	r3, #0
 8007a08:	f844 3c04 	str.w	r3, [r4, #-4]
 8007a0c:	2501      	movs	r5, #1
 8007a0e:	3c04      	subs	r4, #4
 8007a10:	6822      	ldr	r2, [r4, #0]
 8007a12:	f000 000f 	and.w	r0, r0, #15
 8007a16:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8007a1a:	6022      	str	r2, [r4, #0]
 8007a1c:	e7b7      	b.n	800798e <__hexnan+0x7a>
 8007a1e:	2508      	movs	r5, #8
 8007a20:	e7b5      	b.n	800798e <__hexnan+0x7a>
 8007a22:	9b01      	ldr	r3, [sp, #4]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d0df      	beq.n	80079e8 <__hexnan+0xd4>
 8007a28:	f04f 32ff 	mov.w	r2, #4294967295
 8007a2c:	f1c3 0320 	rsb	r3, r3, #32
 8007a30:	fa22 f303 	lsr.w	r3, r2, r3
 8007a34:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007a38:	401a      	ands	r2, r3
 8007a3a:	f846 2c04 	str.w	r2, [r6, #-4]
 8007a3e:	e7d3      	b.n	80079e8 <__hexnan+0xd4>
 8007a40:	3f04      	subs	r7, #4
 8007a42:	e7d1      	b.n	80079e8 <__hexnan+0xd4>
 8007a44:	2004      	movs	r0, #4
 8007a46:	b007      	add	sp, #28
 8007a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007a4c <_localeconv_r>:
 8007a4c:	4800      	ldr	r0, [pc, #0]	; (8007a50 <_localeconv_r+0x4>)
 8007a4e:	4770      	bx	lr
 8007a50:	20000164 	.word	0x20000164

08007a54 <malloc>:
 8007a54:	4b02      	ldr	r3, [pc, #8]	; (8007a60 <malloc+0xc>)
 8007a56:	4601      	mov	r1, r0
 8007a58:	6818      	ldr	r0, [r3, #0]
 8007a5a:	f000 bd67 	b.w	800852c <_malloc_r>
 8007a5e:	bf00      	nop
 8007a60:	2000000c 	.word	0x2000000c

08007a64 <__ascii_mbtowc>:
 8007a64:	b082      	sub	sp, #8
 8007a66:	b901      	cbnz	r1, 8007a6a <__ascii_mbtowc+0x6>
 8007a68:	a901      	add	r1, sp, #4
 8007a6a:	b142      	cbz	r2, 8007a7e <__ascii_mbtowc+0x1a>
 8007a6c:	b14b      	cbz	r3, 8007a82 <__ascii_mbtowc+0x1e>
 8007a6e:	7813      	ldrb	r3, [r2, #0]
 8007a70:	600b      	str	r3, [r1, #0]
 8007a72:	7812      	ldrb	r2, [r2, #0]
 8007a74:	1e10      	subs	r0, r2, #0
 8007a76:	bf18      	it	ne
 8007a78:	2001      	movne	r0, #1
 8007a7a:	b002      	add	sp, #8
 8007a7c:	4770      	bx	lr
 8007a7e:	4610      	mov	r0, r2
 8007a80:	e7fb      	b.n	8007a7a <__ascii_mbtowc+0x16>
 8007a82:	f06f 0001 	mvn.w	r0, #1
 8007a86:	e7f8      	b.n	8007a7a <__ascii_mbtowc+0x16>

08007a88 <memcpy>:
 8007a88:	440a      	add	r2, r1
 8007a8a:	4291      	cmp	r1, r2
 8007a8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a90:	d100      	bne.n	8007a94 <memcpy+0xc>
 8007a92:	4770      	bx	lr
 8007a94:	b510      	push	{r4, lr}
 8007a96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a9e:	4291      	cmp	r1, r2
 8007aa0:	d1f9      	bne.n	8007a96 <memcpy+0xe>
 8007aa2:	bd10      	pop	{r4, pc}

08007aa4 <_Balloc>:
 8007aa4:	b570      	push	{r4, r5, r6, lr}
 8007aa6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007aa8:	4604      	mov	r4, r0
 8007aaa:	460d      	mov	r5, r1
 8007aac:	b976      	cbnz	r6, 8007acc <_Balloc+0x28>
 8007aae:	2010      	movs	r0, #16
 8007ab0:	f7ff ffd0 	bl	8007a54 <malloc>
 8007ab4:	4602      	mov	r2, r0
 8007ab6:	6260      	str	r0, [r4, #36]	; 0x24
 8007ab8:	b920      	cbnz	r0, 8007ac4 <_Balloc+0x20>
 8007aba:	4b18      	ldr	r3, [pc, #96]	; (8007b1c <_Balloc+0x78>)
 8007abc:	4818      	ldr	r0, [pc, #96]	; (8007b20 <_Balloc+0x7c>)
 8007abe:	2166      	movs	r1, #102	; 0x66
 8007ac0:	f000 ff40 	bl	8008944 <__assert_func>
 8007ac4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ac8:	6006      	str	r6, [r0, #0]
 8007aca:	60c6      	str	r6, [r0, #12]
 8007acc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007ace:	68f3      	ldr	r3, [r6, #12]
 8007ad0:	b183      	cbz	r3, 8007af4 <_Balloc+0x50>
 8007ad2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ad4:	68db      	ldr	r3, [r3, #12]
 8007ad6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007ada:	b9b8      	cbnz	r0, 8007b0c <_Balloc+0x68>
 8007adc:	2101      	movs	r1, #1
 8007ade:	fa01 f605 	lsl.w	r6, r1, r5
 8007ae2:	1d72      	adds	r2, r6, #5
 8007ae4:	0092      	lsls	r2, r2, #2
 8007ae6:	4620      	mov	r0, r4
 8007ae8:	f000 fc9d 	bl	8008426 <_calloc_r>
 8007aec:	b160      	cbz	r0, 8007b08 <_Balloc+0x64>
 8007aee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007af2:	e00e      	b.n	8007b12 <_Balloc+0x6e>
 8007af4:	2221      	movs	r2, #33	; 0x21
 8007af6:	2104      	movs	r1, #4
 8007af8:	4620      	mov	r0, r4
 8007afa:	f000 fc94 	bl	8008426 <_calloc_r>
 8007afe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b00:	60f0      	str	r0, [r6, #12]
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d1e4      	bne.n	8007ad2 <_Balloc+0x2e>
 8007b08:	2000      	movs	r0, #0
 8007b0a:	bd70      	pop	{r4, r5, r6, pc}
 8007b0c:	6802      	ldr	r2, [r0, #0]
 8007b0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007b12:	2300      	movs	r3, #0
 8007b14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007b18:	e7f7      	b.n	8007b0a <_Balloc+0x66>
 8007b1a:	bf00      	nop
 8007b1c:	080096a6 	.word	0x080096a6
 8007b20:	080097a4 	.word	0x080097a4

08007b24 <_Bfree>:
 8007b24:	b570      	push	{r4, r5, r6, lr}
 8007b26:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007b28:	4605      	mov	r5, r0
 8007b2a:	460c      	mov	r4, r1
 8007b2c:	b976      	cbnz	r6, 8007b4c <_Bfree+0x28>
 8007b2e:	2010      	movs	r0, #16
 8007b30:	f7ff ff90 	bl	8007a54 <malloc>
 8007b34:	4602      	mov	r2, r0
 8007b36:	6268      	str	r0, [r5, #36]	; 0x24
 8007b38:	b920      	cbnz	r0, 8007b44 <_Bfree+0x20>
 8007b3a:	4b09      	ldr	r3, [pc, #36]	; (8007b60 <_Bfree+0x3c>)
 8007b3c:	4809      	ldr	r0, [pc, #36]	; (8007b64 <_Bfree+0x40>)
 8007b3e:	218a      	movs	r1, #138	; 0x8a
 8007b40:	f000 ff00 	bl	8008944 <__assert_func>
 8007b44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007b48:	6006      	str	r6, [r0, #0]
 8007b4a:	60c6      	str	r6, [r0, #12]
 8007b4c:	b13c      	cbz	r4, 8007b5e <_Bfree+0x3a>
 8007b4e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007b50:	6862      	ldr	r2, [r4, #4]
 8007b52:	68db      	ldr	r3, [r3, #12]
 8007b54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007b58:	6021      	str	r1, [r4, #0]
 8007b5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b5e:	bd70      	pop	{r4, r5, r6, pc}
 8007b60:	080096a6 	.word	0x080096a6
 8007b64:	080097a4 	.word	0x080097a4

08007b68 <__multadd>:
 8007b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b6c:	690d      	ldr	r5, [r1, #16]
 8007b6e:	4607      	mov	r7, r0
 8007b70:	460c      	mov	r4, r1
 8007b72:	461e      	mov	r6, r3
 8007b74:	f101 0c14 	add.w	ip, r1, #20
 8007b78:	2000      	movs	r0, #0
 8007b7a:	f8dc 3000 	ldr.w	r3, [ip]
 8007b7e:	b299      	uxth	r1, r3
 8007b80:	fb02 6101 	mla	r1, r2, r1, r6
 8007b84:	0c1e      	lsrs	r6, r3, #16
 8007b86:	0c0b      	lsrs	r3, r1, #16
 8007b88:	fb02 3306 	mla	r3, r2, r6, r3
 8007b8c:	b289      	uxth	r1, r1
 8007b8e:	3001      	adds	r0, #1
 8007b90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b94:	4285      	cmp	r5, r0
 8007b96:	f84c 1b04 	str.w	r1, [ip], #4
 8007b9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b9e:	dcec      	bgt.n	8007b7a <__multadd+0x12>
 8007ba0:	b30e      	cbz	r6, 8007be6 <__multadd+0x7e>
 8007ba2:	68a3      	ldr	r3, [r4, #8]
 8007ba4:	42ab      	cmp	r3, r5
 8007ba6:	dc19      	bgt.n	8007bdc <__multadd+0x74>
 8007ba8:	6861      	ldr	r1, [r4, #4]
 8007baa:	4638      	mov	r0, r7
 8007bac:	3101      	adds	r1, #1
 8007bae:	f7ff ff79 	bl	8007aa4 <_Balloc>
 8007bb2:	4680      	mov	r8, r0
 8007bb4:	b928      	cbnz	r0, 8007bc2 <__multadd+0x5a>
 8007bb6:	4602      	mov	r2, r0
 8007bb8:	4b0c      	ldr	r3, [pc, #48]	; (8007bec <__multadd+0x84>)
 8007bba:	480d      	ldr	r0, [pc, #52]	; (8007bf0 <__multadd+0x88>)
 8007bbc:	21b5      	movs	r1, #181	; 0xb5
 8007bbe:	f000 fec1 	bl	8008944 <__assert_func>
 8007bc2:	6922      	ldr	r2, [r4, #16]
 8007bc4:	3202      	adds	r2, #2
 8007bc6:	f104 010c 	add.w	r1, r4, #12
 8007bca:	0092      	lsls	r2, r2, #2
 8007bcc:	300c      	adds	r0, #12
 8007bce:	f7ff ff5b 	bl	8007a88 <memcpy>
 8007bd2:	4621      	mov	r1, r4
 8007bd4:	4638      	mov	r0, r7
 8007bd6:	f7ff ffa5 	bl	8007b24 <_Bfree>
 8007bda:	4644      	mov	r4, r8
 8007bdc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007be0:	3501      	adds	r5, #1
 8007be2:	615e      	str	r6, [r3, #20]
 8007be4:	6125      	str	r5, [r4, #16]
 8007be6:	4620      	mov	r0, r4
 8007be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bec:	08009718 	.word	0x08009718
 8007bf0:	080097a4 	.word	0x080097a4

08007bf4 <__s2b>:
 8007bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007bf8:	460c      	mov	r4, r1
 8007bfa:	4615      	mov	r5, r2
 8007bfc:	461f      	mov	r7, r3
 8007bfe:	2209      	movs	r2, #9
 8007c00:	3308      	adds	r3, #8
 8007c02:	4606      	mov	r6, r0
 8007c04:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c08:	2100      	movs	r1, #0
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	db09      	blt.n	8007c24 <__s2b+0x30>
 8007c10:	4630      	mov	r0, r6
 8007c12:	f7ff ff47 	bl	8007aa4 <_Balloc>
 8007c16:	b940      	cbnz	r0, 8007c2a <__s2b+0x36>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	4b19      	ldr	r3, [pc, #100]	; (8007c80 <__s2b+0x8c>)
 8007c1c:	4819      	ldr	r0, [pc, #100]	; (8007c84 <__s2b+0x90>)
 8007c1e:	21ce      	movs	r1, #206	; 0xce
 8007c20:	f000 fe90 	bl	8008944 <__assert_func>
 8007c24:	0052      	lsls	r2, r2, #1
 8007c26:	3101      	adds	r1, #1
 8007c28:	e7f0      	b.n	8007c0c <__s2b+0x18>
 8007c2a:	9b08      	ldr	r3, [sp, #32]
 8007c2c:	6143      	str	r3, [r0, #20]
 8007c2e:	2d09      	cmp	r5, #9
 8007c30:	f04f 0301 	mov.w	r3, #1
 8007c34:	6103      	str	r3, [r0, #16]
 8007c36:	dd16      	ble.n	8007c66 <__s2b+0x72>
 8007c38:	f104 0909 	add.w	r9, r4, #9
 8007c3c:	46c8      	mov	r8, r9
 8007c3e:	442c      	add	r4, r5
 8007c40:	f818 3b01 	ldrb.w	r3, [r8], #1
 8007c44:	4601      	mov	r1, r0
 8007c46:	3b30      	subs	r3, #48	; 0x30
 8007c48:	220a      	movs	r2, #10
 8007c4a:	4630      	mov	r0, r6
 8007c4c:	f7ff ff8c 	bl	8007b68 <__multadd>
 8007c50:	45a0      	cmp	r8, r4
 8007c52:	d1f5      	bne.n	8007c40 <__s2b+0x4c>
 8007c54:	f1a5 0408 	sub.w	r4, r5, #8
 8007c58:	444c      	add	r4, r9
 8007c5a:	1b2d      	subs	r5, r5, r4
 8007c5c:	1963      	adds	r3, r4, r5
 8007c5e:	42bb      	cmp	r3, r7
 8007c60:	db04      	blt.n	8007c6c <__s2b+0x78>
 8007c62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c66:	340a      	adds	r4, #10
 8007c68:	2509      	movs	r5, #9
 8007c6a:	e7f6      	b.n	8007c5a <__s2b+0x66>
 8007c6c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007c70:	4601      	mov	r1, r0
 8007c72:	3b30      	subs	r3, #48	; 0x30
 8007c74:	220a      	movs	r2, #10
 8007c76:	4630      	mov	r0, r6
 8007c78:	f7ff ff76 	bl	8007b68 <__multadd>
 8007c7c:	e7ee      	b.n	8007c5c <__s2b+0x68>
 8007c7e:	bf00      	nop
 8007c80:	08009718 	.word	0x08009718
 8007c84:	080097a4 	.word	0x080097a4

08007c88 <__hi0bits>:
 8007c88:	0c03      	lsrs	r3, r0, #16
 8007c8a:	041b      	lsls	r3, r3, #16
 8007c8c:	b9d3      	cbnz	r3, 8007cc4 <__hi0bits+0x3c>
 8007c8e:	0400      	lsls	r0, r0, #16
 8007c90:	2310      	movs	r3, #16
 8007c92:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007c96:	bf04      	itt	eq
 8007c98:	0200      	lsleq	r0, r0, #8
 8007c9a:	3308      	addeq	r3, #8
 8007c9c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007ca0:	bf04      	itt	eq
 8007ca2:	0100      	lsleq	r0, r0, #4
 8007ca4:	3304      	addeq	r3, #4
 8007ca6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007caa:	bf04      	itt	eq
 8007cac:	0080      	lsleq	r0, r0, #2
 8007cae:	3302      	addeq	r3, #2
 8007cb0:	2800      	cmp	r0, #0
 8007cb2:	db05      	blt.n	8007cc0 <__hi0bits+0x38>
 8007cb4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007cb8:	f103 0301 	add.w	r3, r3, #1
 8007cbc:	bf08      	it	eq
 8007cbe:	2320      	moveq	r3, #32
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	4770      	bx	lr
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	e7e4      	b.n	8007c92 <__hi0bits+0xa>

08007cc8 <__lo0bits>:
 8007cc8:	6803      	ldr	r3, [r0, #0]
 8007cca:	f013 0207 	ands.w	r2, r3, #7
 8007cce:	4601      	mov	r1, r0
 8007cd0:	d00b      	beq.n	8007cea <__lo0bits+0x22>
 8007cd2:	07da      	lsls	r2, r3, #31
 8007cd4:	d423      	bmi.n	8007d1e <__lo0bits+0x56>
 8007cd6:	0798      	lsls	r0, r3, #30
 8007cd8:	bf49      	itett	mi
 8007cda:	085b      	lsrmi	r3, r3, #1
 8007cdc:	089b      	lsrpl	r3, r3, #2
 8007cde:	2001      	movmi	r0, #1
 8007ce0:	600b      	strmi	r3, [r1, #0]
 8007ce2:	bf5c      	itt	pl
 8007ce4:	600b      	strpl	r3, [r1, #0]
 8007ce6:	2002      	movpl	r0, #2
 8007ce8:	4770      	bx	lr
 8007cea:	b298      	uxth	r0, r3
 8007cec:	b9a8      	cbnz	r0, 8007d1a <__lo0bits+0x52>
 8007cee:	0c1b      	lsrs	r3, r3, #16
 8007cf0:	2010      	movs	r0, #16
 8007cf2:	b2da      	uxtb	r2, r3
 8007cf4:	b90a      	cbnz	r2, 8007cfa <__lo0bits+0x32>
 8007cf6:	3008      	adds	r0, #8
 8007cf8:	0a1b      	lsrs	r3, r3, #8
 8007cfa:	071a      	lsls	r2, r3, #28
 8007cfc:	bf04      	itt	eq
 8007cfe:	091b      	lsreq	r3, r3, #4
 8007d00:	3004      	addeq	r0, #4
 8007d02:	079a      	lsls	r2, r3, #30
 8007d04:	bf04      	itt	eq
 8007d06:	089b      	lsreq	r3, r3, #2
 8007d08:	3002      	addeq	r0, #2
 8007d0a:	07da      	lsls	r2, r3, #31
 8007d0c:	d403      	bmi.n	8007d16 <__lo0bits+0x4e>
 8007d0e:	085b      	lsrs	r3, r3, #1
 8007d10:	f100 0001 	add.w	r0, r0, #1
 8007d14:	d005      	beq.n	8007d22 <__lo0bits+0x5a>
 8007d16:	600b      	str	r3, [r1, #0]
 8007d18:	4770      	bx	lr
 8007d1a:	4610      	mov	r0, r2
 8007d1c:	e7e9      	b.n	8007cf2 <__lo0bits+0x2a>
 8007d1e:	2000      	movs	r0, #0
 8007d20:	4770      	bx	lr
 8007d22:	2020      	movs	r0, #32
 8007d24:	4770      	bx	lr
	...

08007d28 <__i2b>:
 8007d28:	b510      	push	{r4, lr}
 8007d2a:	460c      	mov	r4, r1
 8007d2c:	2101      	movs	r1, #1
 8007d2e:	f7ff feb9 	bl	8007aa4 <_Balloc>
 8007d32:	4602      	mov	r2, r0
 8007d34:	b928      	cbnz	r0, 8007d42 <__i2b+0x1a>
 8007d36:	4b05      	ldr	r3, [pc, #20]	; (8007d4c <__i2b+0x24>)
 8007d38:	4805      	ldr	r0, [pc, #20]	; (8007d50 <__i2b+0x28>)
 8007d3a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007d3e:	f000 fe01 	bl	8008944 <__assert_func>
 8007d42:	2301      	movs	r3, #1
 8007d44:	6144      	str	r4, [r0, #20]
 8007d46:	6103      	str	r3, [r0, #16]
 8007d48:	bd10      	pop	{r4, pc}
 8007d4a:	bf00      	nop
 8007d4c:	08009718 	.word	0x08009718
 8007d50:	080097a4 	.word	0x080097a4

08007d54 <__multiply>:
 8007d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d58:	4691      	mov	r9, r2
 8007d5a:	690a      	ldr	r2, [r1, #16]
 8007d5c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007d60:	429a      	cmp	r2, r3
 8007d62:	bfb8      	it	lt
 8007d64:	460b      	movlt	r3, r1
 8007d66:	460c      	mov	r4, r1
 8007d68:	bfbc      	itt	lt
 8007d6a:	464c      	movlt	r4, r9
 8007d6c:	4699      	movlt	r9, r3
 8007d6e:	6927      	ldr	r7, [r4, #16]
 8007d70:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007d74:	68a3      	ldr	r3, [r4, #8]
 8007d76:	6861      	ldr	r1, [r4, #4]
 8007d78:	eb07 060a 	add.w	r6, r7, sl
 8007d7c:	42b3      	cmp	r3, r6
 8007d7e:	b085      	sub	sp, #20
 8007d80:	bfb8      	it	lt
 8007d82:	3101      	addlt	r1, #1
 8007d84:	f7ff fe8e 	bl	8007aa4 <_Balloc>
 8007d88:	b930      	cbnz	r0, 8007d98 <__multiply+0x44>
 8007d8a:	4602      	mov	r2, r0
 8007d8c:	4b44      	ldr	r3, [pc, #272]	; (8007ea0 <__multiply+0x14c>)
 8007d8e:	4845      	ldr	r0, [pc, #276]	; (8007ea4 <__multiply+0x150>)
 8007d90:	f240 115d 	movw	r1, #349	; 0x15d
 8007d94:	f000 fdd6 	bl	8008944 <__assert_func>
 8007d98:	f100 0514 	add.w	r5, r0, #20
 8007d9c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007da0:	462b      	mov	r3, r5
 8007da2:	2200      	movs	r2, #0
 8007da4:	4543      	cmp	r3, r8
 8007da6:	d321      	bcc.n	8007dec <__multiply+0x98>
 8007da8:	f104 0314 	add.w	r3, r4, #20
 8007dac:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007db0:	f109 0314 	add.w	r3, r9, #20
 8007db4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007db8:	9202      	str	r2, [sp, #8]
 8007dba:	1b3a      	subs	r2, r7, r4
 8007dbc:	3a15      	subs	r2, #21
 8007dbe:	f022 0203 	bic.w	r2, r2, #3
 8007dc2:	3204      	adds	r2, #4
 8007dc4:	f104 0115 	add.w	r1, r4, #21
 8007dc8:	428f      	cmp	r7, r1
 8007dca:	bf38      	it	cc
 8007dcc:	2204      	movcc	r2, #4
 8007dce:	9201      	str	r2, [sp, #4]
 8007dd0:	9a02      	ldr	r2, [sp, #8]
 8007dd2:	9303      	str	r3, [sp, #12]
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	d80c      	bhi.n	8007df2 <__multiply+0x9e>
 8007dd8:	2e00      	cmp	r6, #0
 8007dda:	dd03      	ble.n	8007de4 <__multiply+0x90>
 8007ddc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d05a      	beq.n	8007e9a <__multiply+0x146>
 8007de4:	6106      	str	r6, [r0, #16]
 8007de6:	b005      	add	sp, #20
 8007de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007dec:	f843 2b04 	str.w	r2, [r3], #4
 8007df0:	e7d8      	b.n	8007da4 <__multiply+0x50>
 8007df2:	f8b3 a000 	ldrh.w	sl, [r3]
 8007df6:	f1ba 0f00 	cmp.w	sl, #0
 8007dfa:	d024      	beq.n	8007e46 <__multiply+0xf2>
 8007dfc:	f104 0e14 	add.w	lr, r4, #20
 8007e00:	46a9      	mov	r9, r5
 8007e02:	f04f 0c00 	mov.w	ip, #0
 8007e06:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007e0a:	f8d9 1000 	ldr.w	r1, [r9]
 8007e0e:	fa1f fb82 	uxth.w	fp, r2
 8007e12:	b289      	uxth	r1, r1
 8007e14:	fb0a 110b 	mla	r1, sl, fp, r1
 8007e18:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007e1c:	f8d9 2000 	ldr.w	r2, [r9]
 8007e20:	4461      	add	r1, ip
 8007e22:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007e26:	fb0a c20b 	mla	r2, sl, fp, ip
 8007e2a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007e2e:	b289      	uxth	r1, r1
 8007e30:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007e34:	4577      	cmp	r7, lr
 8007e36:	f849 1b04 	str.w	r1, [r9], #4
 8007e3a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007e3e:	d8e2      	bhi.n	8007e06 <__multiply+0xb2>
 8007e40:	9a01      	ldr	r2, [sp, #4]
 8007e42:	f845 c002 	str.w	ip, [r5, r2]
 8007e46:	9a03      	ldr	r2, [sp, #12]
 8007e48:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007e4c:	3304      	adds	r3, #4
 8007e4e:	f1b9 0f00 	cmp.w	r9, #0
 8007e52:	d020      	beq.n	8007e96 <__multiply+0x142>
 8007e54:	6829      	ldr	r1, [r5, #0]
 8007e56:	f104 0c14 	add.w	ip, r4, #20
 8007e5a:	46ae      	mov	lr, r5
 8007e5c:	f04f 0a00 	mov.w	sl, #0
 8007e60:	f8bc b000 	ldrh.w	fp, [ip]
 8007e64:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007e68:	fb09 220b 	mla	r2, r9, fp, r2
 8007e6c:	4492      	add	sl, r2
 8007e6e:	b289      	uxth	r1, r1
 8007e70:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007e74:	f84e 1b04 	str.w	r1, [lr], #4
 8007e78:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007e7c:	f8be 1000 	ldrh.w	r1, [lr]
 8007e80:	0c12      	lsrs	r2, r2, #16
 8007e82:	fb09 1102 	mla	r1, r9, r2, r1
 8007e86:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007e8a:	4567      	cmp	r7, ip
 8007e8c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007e90:	d8e6      	bhi.n	8007e60 <__multiply+0x10c>
 8007e92:	9a01      	ldr	r2, [sp, #4]
 8007e94:	50a9      	str	r1, [r5, r2]
 8007e96:	3504      	adds	r5, #4
 8007e98:	e79a      	b.n	8007dd0 <__multiply+0x7c>
 8007e9a:	3e01      	subs	r6, #1
 8007e9c:	e79c      	b.n	8007dd8 <__multiply+0x84>
 8007e9e:	bf00      	nop
 8007ea0:	08009718 	.word	0x08009718
 8007ea4:	080097a4 	.word	0x080097a4

08007ea8 <__pow5mult>:
 8007ea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007eac:	4615      	mov	r5, r2
 8007eae:	f012 0203 	ands.w	r2, r2, #3
 8007eb2:	4606      	mov	r6, r0
 8007eb4:	460f      	mov	r7, r1
 8007eb6:	d007      	beq.n	8007ec8 <__pow5mult+0x20>
 8007eb8:	4c25      	ldr	r4, [pc, #148]	; (8007f50 <__pow5mult+0xa8>)
 8007eba:	3a01      	subs	r2, #1
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ec2:	f7ff fe51 	bl	8007b68 <__multadd>
 8007ec6:	4607      	mov	r7, r0
 8007ec8:	10ad      	asrs	r5, r5, #2
 8007eca:	d03d      	beq.n	8007f48 <__pow5mult+0xa0>
 8007ecc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007ece:	b97c      	cbnz	r4, 8007ef0 <__pow5mult+0x48>
 8007ed0:	2010      	movs	r0, #16
 8007ed2:	f7ff fdbf 	bl	8007a54 <malloc>
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	6270      	str	r0, [r6, #36]	; 0x24
 8007eda:	b928      	cbnz	r0, 8007ee8 <__pow5mult+0x40>
 8007edc:	4b1d      	ldr	r3, [pc, #116]	; (8007f54 <__pow5mult+0xac>)
 8007ede:	481e      	ldr	r0, [pc, #120]	; (8007f58 <__pow5mult+0xb0>)
 8007ee0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007ee4:	f000 fd2e 	bl	8008944 <__assert_func>
 8007ee8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007eec:	6004      	str	r4, [r0, #0]
 8007eee:	60c4      	str	r4, [r0, #12]
 8007ef0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007ef4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007ef8:	b94c      	cbnz	r4, 8007f0e <__pow5mult+0x66>
 8007efa:	f240 2171 	movw	r1, #625	; 0x271
 8007efe:	4630      	mov	r0, r6
 8007f00:	f7ff ff12 	bl	8007d28 <__i2b>
 8007f04:	2300      	movs	r3, #0
 8007f06:	f8c8 0008 	str.w	r0, [r8, #8]
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	6003      	str	r3, [r0, #0]
 8007f0e:	f04f 0900 	mov.w	r9, #0
 8007f12:	07eb      	lsls	r3, r5, #31
 8007f14:	d50a      	bpl.n	8007f2c <__pow5mult+0x84>
 8007f16:	4639      	mov	r1, r7
 8007f18:	4622      	mov	r2, r4
 8007f1a:	4630      	mov	r0, r6
 8007f1c:	f7ff ff1a 	bl	8007d54 <__multiply>
 8007f20:	4639      	mov	r1, r7
 8007f22:	4680      	mov	r8, r0
 8007f24:	4630      	mov	r0, r6
 8007f26:	f7ff fdfd 	bl	8007b24 <_Bfree>
 8007f2a:	4647      	mov	r7, r8
 8007f2c:	106d      	asrs	r5, r5, #1
 8007f2e:	d00b      	beq.n	8007f48 <__pow5mult+0xa0>
 8007f30:	6820      	ldr	r0, [r4, #0]
 8007f32:	b938      	cbnz	r0, 8007f44 <__pow5mult+0x9c>
 8007f34:	4622      	mov	r2, r4
 8007f36:	4621      	mov	r1, r4
 8007f38:	4630      	mov	r0, r6
 8007f3a:	f7ff ff0b 	bl	8007d54 <__multiply>
 8007f3e:	6020      	str	r0, [r4, #0]
 8007f40:	f8c0 9000 	str.w	r9, [r0]
 8007f44:	4604      	mov	r4, r0
 8007f46:	e7e4      	b.n	8007f12 <__pow5mult+0x6a>
 8007f48:	4638      	mov	r0, r7
 8007f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f4e:	bf00      	nop
 8007f50:	080098f0 	.word	0x080098f0
 8007f54:	080096a6 	.word	0x080096a6
 8007f58:	080097a4 	.word	0x080097a4

08007f5c <__lshift>:
 8007f5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f60:	460c      	mov	r4, r1
 8007f62:	6849      	ldr	r1, [r1, #4]
 8007f64:	6923      	ldr	r3, [r4, #16]
 8007f66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007f6a:	68a3      	ldr	r3, [r4, #8]
 8007f6c:	4607      	mov	r7, r0
 8007f6e:	4691      	mov	r9, r2
 8007f70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007f74:	f108 0601 	add.w	r6, r8, #1
 8007f78:	42b3      	cmp	r3, r6
 8007f7a:	db0b      	blt.n	8007f94 <__lshift+0x38>
 8007f7c:	4638      	mov	r0, r7
 8007f7e:	f7ff fd91 	bl	8007aa4 <_Balloc>
 8007f82:	4605      	mov	r5, r0
 8007f84:	b948      	cbnz	r0, 8007f9a <__lshift+0x3e>
 8007f86:	4602      	mov	r2, r0
 8007f88:	4b2a      	ldr	r3, [pc, #168]	; (8008034 <__lshift+0xd8>)
 8007f8a:	482b      	ldr	r0, [pc, #172]	; (8008038 <__lshift+0xdc>)
 8007f8c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007f90:	f000 fcd8 	bl	8008944 <__assert_func>
 8007f94:	3101      	adds	r1, #1
 8007f96:	005b      	lsls	r3, r3, #1
 8007f98:	e7ee      	b.n	8007f78 <__lshift+0x1c>
 8007f9a:	2300      	movs	r3, #0
 8007f9c:	f100 0114 	add.w	r1, r0, #20
 8007fa0:	f100 0210 	add.w	r2, r0, #16
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	4553      	cmp	r3, sl
 8007fa8:	db37      	blt.n	800801a <__lshift+0xbe>
 8007faa:	6920      	ldr	r0, [r4, #16]
 8007fac:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007fb0:	f104 0314 	add.w	r3, r4, #20
 8007fb4:	f019 091f 	ands.w	r9, r9, #31
 8007fb8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007fbc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007fc0:	d02f      	beq.n	8008022 <__lshift+0xc6>
 8007fc2:	f1c9 0e20 	rsb	lr, r9, #32
 8007fc6:	468a      	mov	sl, r1
 8007fc8:	f04f 0c00 	mov.w	ip, #0
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	fa02 f209 	lsl.w	r2, r2, r9
 8007fd2:	ea42 020c 	orr.w	r2, r2, ip
 8007fd6:	f84a 2b04 	str.w	r2, [sl], #4
 8007fda:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fde:	4298      	cmp	r0, r3
 8007fe0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007fe4:	d8f2      	bhi.n	8007fcc <__lshift+0x70>
 8007fe6:	1b03      	subs	r3, r0, r4
 8007fe8:	3b15      	subs	r3, #21
 8007fea:	f023 0303 	bic.w	r3, r3, #3
 8007fee:	3304      	adds	r3, #4
 8007ff0:	f104 0215 	add.w	r2, r4, #21
 8007ff4:	4290      	cmp	r0, r2
 8007ff6:	bf38      	it	cc
 8007ff8:	2304      	movcc	r3, #4
 8007ffa:	f841 c003 	str.w	ip, [r1, r3]
 8007ffe:	f1bc 0f00 	cmp.w	ip, #0
 8008002:	d001      	beq.n	8008008 <__lshift+0xac>
 8008004:	f108 0602 	add.w	r6, r8, #2
 8008008:	3e01      	subs	r6, #1
 800800a:	4638      	mov	r0, r7
 800800c:	612e      	str	r6, [r5, #16]
 800800e:	4621      	mov	r1, r4
 8008010:	f7ff fd88 	bl	8007b24 <_Bfree>
 8008014:	4628      	mov	r0, r5
 8008016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800801a:	f842 0f04 	str.w	r0, [r2, #4]!
 800801e:	3301      	adds	r3, #1
 8008020:	e7c1      	b.n	8007fa6 <__lshift+0x4a>
 8008022:	3904      	subs	r1, #4
 8008024:	f853 2b04 	ldr.w	r2, [r3], #4
 8008028:	f841 2f04 	str.w	r2, [r1, #4]!
 800802c:	4298      	cmp	r0, r3
 800802e:	d8f9      	bhi.n	8008024 <__lshift+0xc8>
 8008030:	e7ea      	b.n	8008008 <__lshift+0xac>
 8008032:	bf00      	nop
 8008034:	08009718 	.word	0x08009718
 8008038:	080097a4 	.word	0x080097a4

0800803c <__mcmp>:
 800803c:	b530      	push	{r4, r5, lr}
 800803e:	6902      	ldr	r2, [r0, #16]
 8008040:	690c      	ldr	r4, [r1, #16]
 8008042:	1b12      	subs	r2, r2, r4
 8008044:	d10e      	bne.n	8008064 <__mcmp+0x28>
 8008046:	f100 0314 	add.w	r3, r0, #20
 800804a:	3114      	adds	r1, #20
 800804c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008050:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008054:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008058:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800805c:	42a5      	cmp	r5, r4
 800805e:	d003      	beq.n	8008068 <__mcmp+0x2c>
 8008060:	d305      	bcc.n	800806e <__mcmp+0x32>
 8008062:	2201      	movs	r2, #1
 8008064:	4610      	mov	r0, r2
 8008066:	bd30      	pop	{r4, r5, pc}
 8008068:	4283      	cmp	r3, r0
 800806a:	d3f3      	bcc.n	8008054 <__mcmp+0x18>
 800806c:	e7fa      	b.n	8008064 <__mcmp+0x28>
 800806e:	f04f 32ff 	mov.w	r2, #4294967295
 8008072:	e7f7      	b.n	8008064 <__mcmp+0x28>

08008074 <__mdiff>:
 8008074:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008078:	460c      	mov	r4, r1
 800807a:	4606      	mov	r6, r0
 800807c:	4611      	mov	r1, r2
 800807e:	4620      	mov	r0, r4
 8008080:	4690      	mov	r8, r2
 8008082:	f7ff ffdb 	bl	800803c <__mcmp>
 8008086:	1e05      	subs	r5, r0, #0
 8008088:	d110      	bne.n	80080ac <__mdiff+0x38>
 800808a:	4629      	mov	r1, r5
 800808c:	4630      	mov	r0, r6
 800808e:	f7ff fd09 	bl	8007aa4 <_Balloc>
 8008092:	b930      	cbnz	r0, 80080a2 <__mdiff+0x2e>
 8008094:	4b3a      	ldr	r3, [pc, #232]	; (8008180 <__mdiff+0x10c>)
 8008096:	4602      	mov	r2, r0
 8008098:	f240 2132 	movw	r1, #562	; 0x232
 800809c:	4839      	ldr	r0, [pc, #228]	; (8008184 <__mdiff+0x110>)
 800809e:	f000 fc51 	bl	8008944 <__assert_func>
 80080a2:	2301      	movs	r3, #1
 80080a4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80080a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ac:	bfa4      	itt	ge
 80080ae:	4643      	movge	r3, r8
 80080b0:	46a0      	movge	r8, r4
 80080b2:	4630      	mov	r0, r6
 80080b4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80080b8:	bfa6      	itte	ge
 80080ba:	461c      	movge	r4, r3
 80080bc:	2500      	movge	r5, #0
 80080be:	2501      	movlt	r5, #1
 80080c0:	f7ff fcf0 	bl	8007aa4 <_Balloc>
 80080c4:	b920      	cbnz	r0, 80080d0 <__mdiff+0x5c>
 80080c6:	4b2e      	ldr	r3, [pc, #184]	; (8008180 <__mdiff+0x10c>)
 80080c8:	4602      	mov	r2, r0
 80080ca:	f44f 7110 	mov.w	r1, #576	; 0x240
 80080ce:	e7e5      	b.n	800809c <__mdiff+0x28>
 80080d0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80080d4:	6926      	ldr	r6, [r4, #16]
 80080d6:	60c5      	str	r5, [r0, #12]
 80080d8:	f104 0914 	add.w	r9, r4, #20
 80080dc:	f108 0514 	add.w	r5, r8, #20
 80080e0:	f100 0e14 	add.w	lr, r0, #20
 80080e4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80080e8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80080ec:	f108 0210 	add.w	r2, r8, #16
 80080f0:	46f2      	mov	sl, lr
 80080f2:	2100      	movs	r1, #0
 80080f4:	f859 3b04 	ldr.w	r3, [r9], #4
 80080f8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80080fc:	fa1f f883 	uxth.w	r8, r3
 8008100:	fa11 f18b 	uxtah	r1, r1, fp
 8008104:	0c1b      	lsrs	r3, r3, #16
 8008106:	eba1 0808 	sub.w	r8, r1, r8
 800810a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800810e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008112:	fa1f f888 	uxth.w	r8, r8
 8008116:	1419      	asrs	r1, r3, #16
 8008118:	454e      	cmp	r6, r9
 800811a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800811e:	f84a 3b04 	str.w	r3, [sl], #4
 8008122:	d8e7      	bhi.n	80080f4 <__mdiff+0x80>
 8008124:	1b33      	subs	r3, r6, r4
 8008126:	3b15      	subs	r3, #21
 8008128:	f023 0303 	bic.w	r3, r3, #3
 800812c:	3304      	adds	r3, #4
 800812e:	3415      	adds	r4, #21
 8008130:	42a6      	cmp	r6, r4
 8008132:	bf38      	it	cc
 8008134:	2304      	movcc	r3, #4
 8008136:	441d      	add	r5, r3
 8008138:	4473      	add	r3, lr
 800813a:	469e      	mov	lr, r3
 800813c:	462e      	mov	r6, r5
 800813e:	4566      	cmp	r6, ip
 8008140:	d30e      	bcc.n	8008160 <__mdiff+0xec>
 8008142:	f10c 0203 	add.w	r2, ip, #3
 8008146:	1b52      	subs	r2, r2, r5
 8008148:	f022 0203 	bic.w	r2, r2, #3
 800814c:	3d03      	subs	r5, #3
 800814e:	45ac      	cmp	ip, r5
 8008150:	bf38      	it	cc
 8008152:	2200      	movcc	r2, #0
 8008154:	441a      	add	r2, r3
 8008156:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800815a:	b17b      	cbz	r3, 800817c <__mdiff+0x108>
 800815c:	6107      	str	r7, [r0, #16]
 800815e:	e7a3      	b.n	80080a8 <__mdiff+0x34>
 8008160:	f856 8b04 	ldr.w	r8, [r6], #4
 8008164:	fa11 f288 	uxtah	r2, r1, r8
 8008168:	1414      	asrs	r4, r2, #16
 800816a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800816e:	b292      	uxth	r2, r2
 8008170:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008174:	f84e 2b04 	str.w	r2, [lr], #4
 8008178:	1421      	asrs	r1, r4, #16
 800817a:	e7e0      	b.n	800813e <__mdiff+0xca>
 800817c:	3f01      	subs	r7, #1
 800817e:	e7ea      	b.n	8008156 <__mdiff+0xe2>
 8008180:	08009718 	.word	0x08009718
 8008184:	080097a4 	.word	0x080097a4

08008188 <__ulp>:
 8008188:	b082      	sub	sp, #8
 800818a:	ed8d 0b00 	vstr	d0, [sp]
 800818e:	9b01      	ldr	r3, [sp, #4]
 8008190:	4912      	ldr	r1, [pc, #72]	; (80081dc <__ulp+0x54>)
 8008192:	4019      	ands	r1, r3
 8008194:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008198:	2900      	cmp	r1, #0
 800819a:	dd05      	ble.n	80081a8 <__ulp+0x20>
 800819c:	2200      	movs	r2, #0
 800819e:	460b      	mov	r3, r1
 80081a0:	ec43 2b10 	vmov	d0, r2, r3
 80081a4:	b002      	add	sp, #8
 80081a6:	4770      	bx	lr
 80081a8:	4249      	negs	r1, r1
 80081aa:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80081ae:	ea4f 5021 	mov.w	r0, r1, asr #20
 80081b2:	f04f 0200 	mov.w	r2, #0
 80081b6:	f04f 0300 	mov.w	r3, #0
 80081ba:	da04      	bge.n	80081c6 <__ulp+0x3e>
 80081bc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80081c0:	fa41 f300 	asr.w	r3, r1, r0
 80081c4:	e7ec      	b.n	80081a0 <__ulp+0x18>
 80081c6:	f1a0 0114 	sub.w	r1, r0, #20
 80081ca:	291e      	cmp	r1, #30
 80081cc:	bfda      	itte	le
 80081ce:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80081d2:	fa20 f101 	lsrle.w	r1, r0, r1
 80081d6:	2101      	movgt	r1, #1
 80081d8:	460a      	mov	r2, r1
 80081da:	e7e1      	b.n	80081a0 <__ulp+0x18>
 80081dc:	7ff00000 	.word	0x7ff00000

080081e0 <__b2d>:
 80081e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081e2:	6905      	ldr	r5, [r0, #16]
 80081e4:	f100 0714 	add.w	r7, r0, #20
 80081e8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80081ec:	1f2e      	subs	r6, r5, #4
 80081ee:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80081f2:	4620      	mov	r0, r4
 80081f4:	f7ff fd48 	bl	8007c88 <__hi0bits>
 80081f8:	f1c0 0320 	rsb	r3, r0, #32
 80081fc:	280a      	cmp	r0, #10
 80081fe:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800827c <__b2d+0x9c>
 8008202:	600b      	str	r3, [r1, #0]
 8008204:	dc14      	bgt.n	8008230 <__b2d+0x50>
 8008206:	f1c0 0e0b 	rsb	lr, r0, #11
 800820a:	fa24 f10e 	lsr.w	r1, r4, lr
 800820e:	42b7      	cmp	r7, r6
 8008210:	ea41 030c 	orr.w	r3, r1, ip
 8008214:	bf34      	ite	cc
 8008216:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800821a:	2100      	movcs	r1, #0
 800821c:	3015      	adds	r0, #21
 800821e:	fa04 f000 	lsl.w	r0, r4, r0
 8008222:	fa21 f10e 	lsr.w	r1, r1, lr
 8008226:	ea40 0201 	orr.w	r2, r0, r1
 800822a:	ec43 2b10 	vmov	d0, r2, r3
 800822e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008230:	42b7      	cmp	r7, r6
 8008232:	bf3a      	itte	cc
 8008234:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008238:	f1a5 0608 	subcc.w	r6, r5, #8
 800823c:	2100      	movcs	r1, #0
 800823e:	380b      	subs	r0, #11
 8008240:	d017      	beq.n	8008272 <__b2d+0x92>
 8008242:	f1c0 0c20 	rsb	ip, r0, #32
 8008246:	fa04 f500 	lsl.w	r5, r4, r0
 800824a:	42be      	cmp	r6, r7
 800824c:	fa21 f40c 	lsr.w	r4, r1, ip
 8008250:	ea45 0504 	orr.w	r5, r5, r4
 8008254:	bf8c      	ite	hi
 8008256:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800825a:	2400      	movls	r4, #0
 800825c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008260:	fa01 f000 	lsl.w	r0, r1, r0
 8008264:	fa24 f40c 	lsr.w	r4, r4, ip
 8008268:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800826c:	ea40 0204 	orr.w	r2, r0, r4
 8008270:	e7db      	b.n	800822a <__b2d+0x4a>
 8008272:	ea44 030c 	orr.w	r3, r4, ip
 8008276:	460a      	mov	r2, r1
 8008278:	e7d7      	b.n	800822a <__b2d+0x4a>
 800827a:	bf00      	nop
 800827c:	3ff00000 	.word	0x3ff00000

08008280 <__d2b>:
 8008280:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008284:	4689      	mov	r9, r1
 8008286:	2101      	movs	r1, #1
 8008288:	ec57 6b10 	vmov	r6, r7, d0
 800828c:	4690      	mov	r8, r2
 800828e:	f7ff fc09 	bl	8007aa4 <_Balloc>
 8008292:	4604      	mov	r4, r0
 8008294:	b930      	cbnz	r0, 80082a4 <__d2b+0x24>
 8008296:	4602      	mov	r2, r0
 8008298:	4b25      	ldr	r3, [pc, #148]	; (8008330 <__d2b+0xb0>)
 800829a:	4826      	ldr	r0, [pc, #152]	; (8008334 <__d2b+0xb4>)
 800829c:	f240 310a 	movw	r1, #778	; 0x30a
 80082a0:	f000 fb50 	bl	8008944 <__assert_func>
 80082a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80082a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80082ac:	bb35      	cbnz	r5, 80082fc <__d2b+0x7c>
 80082ae:	2e00      	cmp	r6, #0
 80082b0:	9301      	str	r3, [sp, #4]
 80082b2:	d028      	beq.n	8008306 <__d2b+0x86>
 80082b4:	4668      	mov	r0, sp
 80082b6:	9600      	str	r6, [sp, #0]
 80082b8:	f7ff fd06 	bl	8007cc8 <__lo0bits>
 80082bc:	9900      	ldr	r1, [sp, #0]
 80082be:	b300      	cbz	r0, 8008302 <__d2b+0x82>
 80082c0:	9a01      	ldr	r2, [sp, #4]
 80082c2:	f1c0 0320 	rsb	r3, r0, #32
 80082c6:	fa02 f303 	lsl.w	r3, r2, r3
 80082ca:	430b      	orrs	r3, r1
 80082cc:	40c2      	lsrs	r2, r0
 80082ce:	6163      	str	r3, [r4, #20]
 80082d0:	9201      	str	r2, [sp, #4]
 80082d2:	9b01      	ldr	r3, [sp, #4]
 80082d4:	61a3      	str	r3, [r4, #24]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	bf14      	ite	ne
 80082da:	2202      	movne	r2, #2
 80082dc:	2201      	moveq	r2, #1
 80082de:	6122      	str	r2, [r4, #16]
 80082e0:	b1d5      	cbz	r5, 8008318 <__d2b+0x98>
 80082e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80082e6:	4405      	add	r5, r0
 80082e8:	f8c9 5000 	str.w	r5, [r9]
 80082ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80082f0:	f8c8 0000 	str.w	r0, [r8]
 80082f4:	4620      	mov	r0, r4
 80082f6:	b003      	add	sp, #12
 80082f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80082fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008300:	e7d5      	b.n	80082ae <__d2b+0x2e>
 8008302:	6161      	str	r1, [r4, #20]
 8008304:	e7e5      	b.n	80082d2 <__d2b+0x52>
 8008306:	a801      	add	r0, sp, #4
 8008308:	f7ff fcde 	bl	8007cc8 <__lo0bits>
 800830c:	9b01      	ldr	r3, [sp, #4]
 800830e:	6163      	str	r3, [r4, #20]
 8008310:	2201      	movs	r2, #1
 8008312:	6122      	str	r2, [r4, #16]
 8008314:	3020      	adds	r0, #32
 8008316:	e7e3      	b.n	80082e0 <__d2b+0x60>
 8008318:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800831c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008320:	f8c9 0000 	str.w	r0, [r9]
 8008324:	6918      	ldr	r0, [r3, #16]
 8008326:	f7ff fcaf 	bl	8007c88 <__hi0bits>
 800832a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800832e:	e7df      	b.n	80082f0 <__d2b+0x70>
 8008330:	08009718 	.word	0x08009718
 8008334:	080097a4 	.word	0x080097a4

08008338 <__ratio>:
 8008338:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800833c:	4688      	mov	r8, r1
 800833e:	4669      	mov	r1, sp
 8008340:	4681      	mov	r9, r0
 8008342:	f7ff ff4d 	bl	80081e0 <__b2d>
 8008346:	a901      	add	r1, sp, #4
 8008348:	4640      	mov	r0, r8
 800834a:	ec55 4b10 	vmov	r4, r5, d0
 800834e:	f7ff ff47 	bl	80081e0 <__b2d>
 8008352:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008356:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800835a:	eba3 0c02 	sub.w	ip, r3, r2
 800835e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008362:	1a9b      	subs	r3, r3, r2
 8008364:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008368:	ec51 0b10 	vmov	r0, r1, d0
 800836c:	2b00      	cmp	r3, #0
 800836e:	bfd6      	itet	le
 8008370:	460a      	movle	r2, r1
 8008372:	462a      	movgt	r2, r5
 8008374:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008378:	468b      	mov	fp, r1
 800837a:	462f      	mov	r7, r5
 800837c:	bfd4      	ite	le
 800837e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008382:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008386:	4620      	mov	r0, r4
 8008388:	ee10 2a10 	vmov	r2, s0
 800838c:	465b      	mov	r3, fp
 800838e:	4639      	mov	r1, r7
 8008390:	f7f8 fa7c 	bl	800088c <__aeabi_ddiv>
 8008394:	ec41 0b10 	vmov	d0, r0, r1
 8008398:	b003      	add	sp, #12
 800839a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800839e <__copybits>:
 800839e:	3901      	subs	r1, #1
 80083a0:	b570      	push	{r4, r5, r6, lr}
 80083a2:	1149      	asrs	r1, r1, #5
 80083a4:	6914      	ldr	r4, [r2, #16]
 80083a6:	3101      	adds	r1, #1
 80083a8:	f102 0314 	add.w	r3, r2, #20
 80083ac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80083b0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80083b4:	1f05      	subs	r5, r0, #4
 80083b6:	42a3      	cmp	r3, r4
 80083b8:	d30c      	bcc.n	80083d4 <__copybits+0x36>
 80083ba:	1aa3      	subs	r3, r4, r2
 80083bc:	3b11      	subs	r3, #17
 80083be:	f023 0303 	bic.w	r3, r3, #3
 80083c2:	3211      	adds	r2, #17
 80083c4:	42a2      	cmp	r2, r4
 80083c6:	bf88      	it	hi
 80083c8:	2300      	movhi	r3, #0
 80083ca:	4418      	add	r0, r3
 80083cc:	2300      	movs	r3, #0
 80083ce:	4288      	cmp	r0, r1
 80083d0:	d305      	bcc.n	80083de <__copybits+0x40>
 80083d2:	bd70      	pop	{r4, r5, r6, pc}
 80083d4:	f853 6b04 	ldr.w	r6, [r3], #4
 80083d8:	f845 6f04 	str.w	r6, [r5, #4]!
 80083dc:	e7eb      	b.n	80083b6 <__copybits+0x18>
 80083de:	f840 3b04 	str.w	r3, [r0], #4
 80083e2:	e7f4      	b.n	80083ce <__copybits+0x30>

080083e4 <__any_on>:
 80083e4:	f100 0214 	add.w	r2, r0, #20
 80083e8:	6900      	ldr	r0, [r0, #16]
 80083ea:	114b      	asrs	r3, r1, #5
 80083ec:	4298      	cmp	r0, r3
 80083ee:	b510      	push	{r4, lr}
 80083f0:	db11      	blt.n	8008416 <__any_on+0x32>
 80083f2:	dd0a      	ble.n	800840a <__any_on+0x26>
 80083f4:	f011 011f 	ands.w	r1, r1, #31
 80083f8:	d007      	beq.n	800840a <__any_on+0x26>
 80083fa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80083fe:	fa24 f001 	lsr.w	r0, r4, r1
 8008402:	fa00 f101 	lsl.w	r1, r0, r1
 8008406:	428c      	cmp	r4, r1
 8008408:	d10b      	bne.n	8008422 <__any_on+0x3e>
 800840a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800840e:	4293      	cmp	r3, r2
 8008410:	d803      	bhi.n	800841a <__any_on+0x36>
 8008412:	2000      	movs	r0, #0
 8008414:	bd10      	pop	{r4, pc}
 8008416:	4603      	mov	r3, r0
 8008418:	e7f7      	b.n	800840a <__any_on+0x26>
 800841a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800841e:	2900      	cmp	r1, #0
 8008420:	d0f5      	beq.n	800840e <__any_on+0x2a>
 8008422:	2001      	movs	r0, #1
 8008424:	e7f6      	b.n	8008414 <__any_on+0x30>

08008426 <_calloc_r>:
 8008426:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008428:	fba1 2402 	umull	r2, r4, r1, r2
 800842c:	b94c      	cbnz	r4, 8008442 <_calloc_r+0x1c>
 800842e:	4611      	mov	r1, r2
 8008430:	9201      	str	r2, [sp, #4]
 8008432:	f000 f87b 	bl	800852c <_malloc_r>
 8008436:	9a01      	ldr	r2, [sp, #4]
 8008438:	4605      	mov	r5, r0
 800843a:	b930      	cbnz	r0, 800844a <_calloc_r+0x24>
 800843c:	4628      	mov	r0, r5
 800843e:	b003      	add	sp, #12
 8008440:	bd30      	pop	{r4, r5, pc}
 8008442:	220c      	movs	r2, #12
 8008444:	6002      	str	r2, [r0, #0]
 8008446:	2500      	movs	r5, #0
 8008448:	e7f8      	b.n	800843c <_calloc_r+0x16>
 800844a:	4621      	mov	r1, r4
 800844c:	f7fc fbc0 	bl	8004bd0 <memset>
 8008450:	e7f4      	b.n	800843c <_calloc_r+0x16>
	...

08008454 <_free_r>:
 8008454:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008456:	2900      	cmp	r1, #0
 8008458:	d044      	beq.n	80084e4 <_free_r+0x90>
 800845a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800845e:	9001      	str	r0, [sp, #4]
 8008460:	2b00      	cmp	r3, #0
 8008462:	f1a1 0404 	sub.w	r4, r1, #4
 8008466:	bfb8      	it	lt
 8008468:	18e4      	addlt	r4, r4, r3
 800846a:	f000 fab5 	bl	80089d8 <__malloc_lock>
 800846e:	4a1e      	ldr	r2, [pc, #120]	; (80084e8 <_free_r+0x94>)
 8008470:	9801      	ldr	r0, [sp, #4]
 8008472:	6813      	ldr	r3, [r2, #0]
 8008474:	b933      	cbnz	r3, 8008484 <_free_r+0x30>
 8008476:	6063      	str	r3, [r4, #4]
 8008478:	6014      	str	r4, [r2, #0]
 800847a:	b003      	add	sp, #12
 800847c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008480:	f000 bab0 	b.w	80089e4 <__malloc_unlock>
 8008484:	42a3      	cmp	r3, r4
 8008486:	d908      	bls.n	800849a <_free_r+0x46>
 8008488:	6825      	ldr	r5, [r4, #0]
 800848a:	1961      	adds	r1, r4, r5
 800848c:	428b      	cmp	r3, r1
 800848e:	bf01      	itttt	eq
 8008490:	6819      	ldreq	r1, [r3, #0]
 8008492:	685b      	ldreq	r3, [r3, #4]
 8008494:	1949      	addeq	r1, r1, r5
 8008496:	6021      	streq	r1, [r4, #0]
 8008498:	e7ed      	b.n	8008476 <_free_r+0x22>
 800849a:	461a      	mov	r2, r3
 800849c:	685b      	ldr	r3, [r3, #4]
 800849e:	b10b      	cbz	r3, 80084a4 <_free_r+0x50>
 80084a0:	42a3      	cmp	r3, r4
 80084a2:	d9fa      	bls.n	800849a <_free_r+0x46>
 80084a4:	6811      	ldr	r1, [r2, #0]
 80084a6:	1855      	adds	r5, r2, r1
 80084a8:	42a5      	cmp	r5, r4
 80084aa:	d10b      	bne.n	80084c4 <_free_r+0x70>
 80084ac:	6824      	ldr	r4, [r4, #0]
 80084ae:	4421      	add	r1, r4
 80084b0:	1854      	adds	r4, r2, r1
 80084b2:	42a3      	cmp	r3, r4
 80084b4:	6011      	str	r1, [r2, #0]
 80084b6:	d1e0      	bne.n	800847a <_free_r+0x26>
 80084b8:	681c      	ldr	r4, [r3, #0]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	6053      	str	r3, [r2, #4]
 80084be:	4421      	add	r1, r4
 80084c0:	6011      	str	r1, [r2, #0]
 80084c2:	e7da      	b.n	800847a <_free_r+0x26>
 80084c4:	d902      	bls.n	80084cc <_free_r+0x78>
 80084c6:	230c      	movs	r3, #12
 80084c8:	6003      	str	r3, [r0, #0]
 80084ca:	e7d6      	b.n	800847a <_free_r+0x26>
 80084cc:	6825      	ldr	r5, [r4, #0]
 80084ce:	1961      	adds	r1, r4, r5
 80084d0:	428b      	cmp	r3, r1
 80084d2:	bf04      	itt	eq
 80084d4:	6819      	ldreq	r1, [r3, #0]
 80084d6:	685b      	ldreq	r3, [r3, #4]
 80084d8:	6063      	str	r3, [r4, #4]
 80084da:	bf04      	itt	eq
 80084dc:	1949      	addeq	r1, r1, r5
 80084de:	6021      	streq	r1, [r4, #0]
 80084e0:	6054      	str	r4, [r2, #4]
 80084e2:	e7ca      	b.n	800847a <_free_r+0x26>
 80084e4:	b003      	add	sp, #12
 80084e6:	bd30      	pop	{r4, r5, pc}
 80084e8:	200002f0 	.word	0x200002f0

080084ec <sbrk_aligned>:
 80084ec:	b570      	push	{r4, r5, r6, lr}
 80084ee:	4e0e      	ldr	r6, [pc, #56]	; (8008528 <sbrk_aligned+0x3c>)
 80084f0:	460c      	mov	r4, r1
 80084f2:	6831      	ldr	r1, [r6, #0]
 80084f4:	4605      	mov	r5, r0
 80084f6:	b911      	cbnz	r1, 80084fe <sbrk_aligned+0x12>
 80084f8:	f000 f9f2 	bl	80088e0 <_sbrk_r>
 80084fc:	6030      	str	r0, [r6, #0]
 80084fe:	4621      	mov	r1, r4
 8008500:	4628      	mov	r0, r5
 8008502:	f000 f9ed 	bl	80088e0 <_sbrk_r>
 8008506:	1c43      	adds	r3, r0, #1
 8008508:	d00a      	beq.n	8008520 <sbrk_aligned+0x34>
 800850a:	1cc4      	adds	r4, r0, #3
 800850c:	f024 0403 	bic.w	r4, r4, #3
 8008510:	42a0      	cmp	r0, r4
 8008512:	d007      	beq.n	8008524 <sbrk_aligned+0x38>
 8008514:	1a21      	subs	r1, r4, r0
 8008516:	4628      	mov	r0, r5
 8008518:	f000 f9e2 	bl	80088e0 <_sbrk_r>
 800851c:	3001      	adds	r0, #1
 800851e:	d101      	bne.n	8008524 <sbrk_aligned+0x38>
 8008520:	f04f 34ff 	mov.w	r4, #4294967295
 8008524:	4620      	mov	r0, r4
 8008526:	bd70      	pop	{r4, r5, r6, pc}
 8008528:	200002f4 	.word	0x200002f4

0800852c <_malloc_r>:
 800852c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008530:	1ccd      	adds	r5, r1, #3
 8008532:	f025 0503 	bic.w	r5, r5, #3
 8008536:	3508      	adds	r5, #8
 8008538:	2d0c      	cmp	r5, #12
 800853a:	bf38      	it	cc
 800853c:	250c      	movcc	r5, #12
 800853e:	2d00      	cmp	r5, #0
 8008540:	4607      	mov	r7, r0
 8008542:	db01      	blt.n	8008548 <_malloc_r+0x1c>
 8008544:	42a9      	cmp	r1, r5
 8008546:	d905      	bls.n	8008554 <_malloc_r+0x28>
 8008548:	230c      	movs	r3, #12
 800854a:	603b      	str	r3, [r7, #0]
 800854c:	2600      	movs	r6, #0
 800854e:	4630      	mov	r0, r6
 8008550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008554:	4e2e      	ldr	r6, [pc, #184]	; (8008610 <_malloc_r+0xe4>)
 8008556:	f000 fa3f 	bl	80089d8 <__malloc_lock>
 800855a:	6833      	ldr	r3, [r6, #0]
 800855c:	461c      	mov	r4, r3
 800855e:	bb34      	cbnz	r4, 80085ae <_malloc_r+0x82>
 8008560:	4629      	mov	r1, r5
 8008562:	4638      	mov	r0, r7
 8008564:	f7ff ffc2 	bl	80084ec <sbrk_aligned>
 8008568:	1c43      	adds	r3, r0, #1
 800856a:	4604      	mov	r4, r0
 800856c:	d14d      	bne.n	800860a <_malloc_r+0xde>
 800856e:	6834      	ldr	r4, [r6, #0]
 8008570:	4626      	mov	r6, r4
 8008572:	2e00      	cmp	r6, #0
 8008574:	d140      	bne.n	80085f8 <_malloc_r+0xcc>
 8008576:	6823      	ldr	r3, [r4, #0]
 8008578:	4631      	mov	r1, r6
 800857a:	4638      	mov	r0, r7
 800857c:	eb04 0803 	add.w	r8, r4, r3
 8008580:	f000 f9ae 	bl	80088e0 <_sbrk_r>
 8008584:	4580      	cmp	r8, r0
 8008586:	d13a      	bne.n	80085fe <_malloc_r+0xd2>
 8008588:	6821      	ldr	r1, [r4, #0]
 800858a:	3503      	adds	r5, #3
 800858c:	1a6d      	subs	r5, r5, r1
 800858e:	f025 0503 	bic.w	r5, r5, #3
 8008592:	3508      	adds	r5, #8
 8008594:	2d0c      	cmp	r5, #12
 8008596:	bf38      	it	cc
 8008598:	250c      	movcc	r5, #12
 800859a:	4629      	mov	r1, r5
 800859c:	4638      	mov	r0, r7
 800859e:	f7ff ffa5 	bl	80084ec <sbrk_aligned>
 80085a2:	3001      	adds	r0, #1
 80085a4:	d02b      	beq.n	80085fe <_malloc_r+0xd2>
 80085a6:	6823      	ldr	r3, [r4, #0]
 80085a8:	442b      	add	r3, r5
 80085aa:	6023      	str	r3, [r4, #0]
 80085ac:	e00e      	b.n	80085cc <_malloc_r+0xa0>
 80085ae:	6822      	ldr	r2, [r4, #0]
 80085b0:	1b52      	subs	r2, r2, r5
 80085b2:	d41e      	bmi.n	80085f2 <_malloc_r+0xc6>
 80085b4:	2a0b      	cmp	r2, #11
 80085b6:	d916      	bls.n	80085e6 <_malloc_r+0xba>
 80085b8:	1961      	adds	r1, r4, r5
 80085ba:	42a3      	cmp	r3, r4
 80085bc:	6025      	str	r5, [r4, #0]
 80085be:	bf18      	it	ne
 80085c0:	6059      	strne	r1, [r3, #4]
 80085c2:	6863      	ldr	r3, [r4, #4]
 80085c4:	bf08      	it	eq
 80085c6:	6031      	streq	r1, [r6, #0]
 80085c8:	5162      	str	r2, [r4, r5]
 80085ca:	604b      	str	r3, [r1, #4]
 80085cc:	4638      	mov	r0, r7
 80085ce:	f104 060b 	add.w	r6, r4, #11
 80085d2:	f000 fa07 	bl	80089e4 <__malloc_unlock>
 80085d6:	f026 0607 	bic.w	r6, r6, #7
 80085da:	1d23      	adds	r3, r4, #4
 80085dc:	1af2      	subs	r2, r6, r3
 80085de:	d0b6      	beq.n	800854e <_malloc_r+0x22>
 80085e0:	1b9b      	subs	r3, r3, r6
 80085e2:	50a3      	str	r3, [r4, r2]
 80085e4:	e7b3      	b.n	800854e <_malloc_r+0x22>
 80085e6:	6862      	ldr	r2, [r4, #4]
 80085e8:	42a3      	cmp	r3, r4
 80085ea:	bf0c      	ite	eq
 80085ec:	6032      	streq	r2, [r6, #0]
 80085ee:	605a      	strne	r2, [r3, #4]
 80085f0:	e7ec      	b.n	80085cc <_malloc_r+0xa0>
 80085f2:	4623      	mov	r3, r4
 80085f4:	6864      	ldr	r4, [r4, #4]
 80085f6:	e7b2      	b.n	800855e <_malloc_r+0x32>
 80085f8:	4634      	mov	r4, r6
 80085fa:	6876      	ldr	r6, [r6, #4]
 80085fc:	e7b9      	b.n	8008572 <_malloc_r+0x46>
 80085fe:	230c      	movs	r3, #12
 8008600:	603b      	str	r3, [r7, #0]
 8008602:	4638      	mov	r0, r7
 8008604:	f000 f9ee 	bl	80089e4 <__malloc_unlock>
 8008608:	e7a1      	b.n	800854e <_malloc_r+0x22>
 800860a:	6025      	str	r5, [r4, #0]
 800860c:	e7de      	b.n	80085cc <_malloc_r+0xa0>
 800860e:	bf00      	nop
 8008610:	200002f0 	.word	0x200002f0

08008614 <__ssputs_r>:
 8008614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008618:	688e      	ldr	r6, [r1, #8]
 800861a:	429e      	cmp	r6, r3
 800861c:	4682      	mov	sl, r0
 800861e:	460c      	mov	r4, r1
 8008620:	4690      	mov	r8, r2
 8008622:	461f      	mov	r7, r3
 8008624:	d838      	bhi.n	8008698 <__ssputs_r+0x84>
 8008626:	898a      	ldrh	r2, [r1, #12]
 8008628:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800862c:	d032      	beq.n	8008694 <__ssputs_r+0x80>
 800862e:	6825      	ldr	r5, [r4, #0]
 8008630:	6909      	ldr	r1, [r1, #16]
 8008632:	eba5 0901 	sub.w	r9, r5, r1
 8008636:	6965      	ldr	r5, [r4, #20]
 8008638:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800863c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008640:	3301      	adds	r3, #1
 8008642:	444b      	add	r3, r9
 8008644:	106d      	asrs	r5, r5, #1
 8008646:	429d      	cmp	r5, r3
 8008648:	bf38      	it	cc
 800864a:	461d      	movcc	r5, r3
 800864c:	0553      	lsls	r3, r2, #21
 800864e:	d531      	bpl.n	80086b4 <__ssputs_r+0xa0>
 8008650:	4629      	mov	r1, r5
 8008652:	f7ff ff6b 	bl	800852c <_malloc_r>
 8008656:	4606      	mov	r6, r0
 8008658:	b950      	cbnz	r0, 8008670 <__ssputs_r+0x5c>
 800865a:	230c      	movs	r3, #12
 800865c:	f8ca 3000 	str.w	r3, [sl]
 8008660:	89a3      	ldrh	r3, [r4, #12]
 8008662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008666:	81a3      	strh	r3, [r4, #12]
 8008668:	f04f 30ff 	mov.w	r0, #4294967295
 800866c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008670:	6921      	ldr	r1, [r4, #16]
 8008672:	464a      	mov	r2, r9
 8008674:	f7ff fa08 	bl	8007a88 <memcpy>
 8008678:	89a3      	ldrh	r3, [r4, #12]
 800867a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800867e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008682:	81a3      	strh	r3, [r4, #12]
 8008684:	6126      	str	r6, [r4, #16]
 8008686:	6165      	str	r5, [r4, #20]
 8008688:	444e      	add	r6, r9
 800868a:	eba5 0509 	sub.w	r5, r5, r9
 800868e:	6026      	str	r6, [r4, #0]
 8008690:	60a5      	str	r5, [r4, #8]
 8008692:	463e      	mov	r6, r7
 8008694:	42be      	cmp	r6, r7
 8008696:	d900      	bls.n	800869a <__ssputs_r+0x86>
 8008698:	463e      	mov	r6, r7
 800869a:	6820      	ldr	r0, [r4, #0]
 800869c:	4632      	mov	r2, r6
 800869e:	4641      	mov	r1, r8
 80086a0:	f000 f980 	bl	80089a4 <memmove>
 80086a4:	68a3      	ldr	r3, [r4, #8]
 80086a6:	1b9b      	subs	r3, r3, r6
 80086a8:	60a3      	str	r3, [r4, #8]
 80086aa:	6823      	ldr	r3, [r4, #0]
 80086ac:	4433      	add	r3, r6
 80086ae:	6023      	str	r3, [r4, #0]
 80086b0:	2000      	movs	r0, #0
 80086b2:	e7db      	b.n	800866c <__ssputs_r+0x58>
 80086b4:	462a      	mov	r2, r5
 80086b6:	f000 f99b 	bl	80089f0 <_realloc_r>
 80086ba:	4606      	mov	r6, r0
 80086bc:	2800      	cmp	r0, #0
 80086be:	d1e1      	bne.n	8008684 <__ssputs_r+0x70>
 80086c0:	6921      	ldr	r1, [r4, #16]
 80086c2:	4650      	mov	r0, sl
 80086c4:	f7ff fec6 	bl	8008454 <_free_r>
 80086c8:	e7c7      	b.n	800865a <__ssputs_r+0x46>
	...

080086cc <_svfiprintf_r>:
 80086cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d0:	4698      	mov	r8, r3
 80086d2:	898b      	ldrh	r3, [r1, #12]
 80086d4:	061b      	lsls	r3, r3, #24
 80086d6:	b09d      	sub	sp, #116	; 0x74
 80086d8:	4607      	mov	r7, r0
 80086da:	460d      	mov	r5, r1
 80086dc:	4614      	mov	r4, r2
 80086de:	d50e      	bpl.n	80086fe <_svfiprintf_r+0x32>
 80086e0:	690b      	ldr	r3, [r1, #16]
 80086e2:	b963      	cbnz	r3, 80086fe <_svfiprintf_r+0x32>
 80086e4:	2140      	movs	r1, #64	; 0x40
 80086e6:	f7ff ff21 	bl	800852c <_malloc_r>
 80086ea:	6028      	str	r0, [r5, #0]
 80086ec:	6128      	str	r0, [r5, #16]
 80086ee:	b920      	cbnz	r0, 80086fa <_svfiprintf_r+0x2e>
 80086f0:	230c      	movs	r3, #12
 80086f2:	603b      	str	r3, [r7, #0]
 80086f4:	f04f 30ff 	mov.w	r0, #4294967295
 80086f8:	e0d1      	b.n	800889e <_svfiprintf_r+0x1d2>
 80086fa:	2340      	movs	r3, #64	; 0x40
 80086fc:	616b      	str	r3, [r5, #20]
 80086fe:	2300      	movs	r3, #0
 8008700:	9309      	str	r3, [sp, #36]	; 0x24
 8008702:	2320      	movs	r3, #32
 8008704:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008708:	f8cd 800c 	str.w	r8, [sp, #12]
 800870c:	2330      	movs	r3, #48	; 0x30
 800870e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80088b8 <_svfiprintf_r+0x1ec>
 8008712:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008716:	f04f 0901 	mov.w	r9, #1
 800871a:	4623      	mov	r3, r4
 800871c:	469a      	mov	sl, r3
 800871e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008722:	b10a      	cbz	r2, 8008728 <_svfiprintf_r+0x5c>
 8008724:	2a25      	cmp	r2, #37	; 0x25
 8008726:	d1f9      	bne.n	800871c <_svfiprintf_r+0x50>
 8008728:	ebba 0b04 	subs.w	fp, sl, r4
 800872c:	d00b      	beq.n	8008746 <_svfiprintf_r+0x7a>
 800872e:	465b      	mov	r3, fp
 8008730:	4622      	mov	r2, r4
 8008732:	4629      	mov	r1, r5
 8008734:	4638      	mov	r0, r7
 8008736:	f7ff ff6d 	bl	8008614 <__ssputs_r>
 800873a:	3001      	adds	r0, #1
 800873c:	f000 80aa 	beq.w	8008894 <_svfiprintf_r+0x1c8>
 8008740:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008742:	445a      	add	r2, fp
 8008744:	9209      	str	r2, [sp, #36]	; 0x24
 8008746:	f89a 3000 	ldrb.w	r3, [sl]
 800874a:	2b00      	cmp	r3, #0
 800874c:	f000 80a2 	beq.w	8008894 <_svfiprintf_r+0x1c8>
 8008750:	2300      	movs	r3, #0
 8008752:	f04f 32ff 	mov.w	r2, #4294967295
 8008756:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800875a:	f10a 0a01 	add.w	sl, sl, #1
 800875e:	9304      	str	r3, [sp, #16]
 8008760:	9307      	str	r3, [sp, #28]
 8008762:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008766:	931a      	str	r3, [sp, #104]	; 0x68
 8008768:	4654      	mov	r4, sl
 800876a:	2205      	movs	r2, #5
 800876c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008770:	4851      	ldr	r0, [pc, #324]	; (80088b8 <_svfiprintf_r+0x1ec>)
 8008772:	f7f7 fd55 	bl	8000220 <memchr>
 8008776:	9a04      	ldr	r2, [sp, #16]
 8008778:	b9d8      	cbnz	r0, 80087b2 <_svfiprintf_r+0xe6>
 800877a:	06d0      	lsls	r0, r2, #27
 800877c:	bf44      	itt	mi
 800877e:	2320      	movmi	r3, #32
 8008780:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008784:	0711      	lsls	r1, r2, #28
 8008786:	bf44      	itt	mi
 8008788:	232b      	movmi	r3, #43	; 0x2b
 800878a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800878e:	f89a 3000 	ldrb.w	r3, [sl]
 8008792:	2b2a      	cmp	r3, #42	; 0x2a
 8008794:	d015      	beq.n	80087c2 <_svfiprintf_r+0xf6>
 8008796:	9a07      	ldr	r2, [sp, #28]
 8008798:	4654      	mov	r4, sl
 800879a:	2000      	movs	r0, #0
 800879c:	f04f 0c0a 	mov.w	ip, #10
 80087a0:	4621      	mov	r1, r4
 80087a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80087a6:	3b30      	subs	r3, #48	; 0x30
 80087a8:	2b09      	cmp	r3, #9
 80087aa:	d94e      	bls.n	800884a <_svfiprintf_r+0x17e>
 80087ac:	b1b0      	cbz	r0, 80087dc <_svfiprintf_r+0x110>
 80087ae:	9207      	str	r2, [sp, #28]
 80087b0:	e014      	b.n	80087dc <_svfiprintf_r+0x110>
 80087b2:	eba0 0308 	sub.w	r3, r0, r8
 80087b6:	fa09 f303 	lsl.w	r3, r9, r3
 80087ba:	4313      	orrs	r3, r2
 80087bc:	9304      	str	r3, [sp, #16]
 80087be:	46a2      	mov	sl, r4
 80087c0:	e7d2      	b.n	8008768 <_svfiprintf_r+0x9c>
 80087c2:	9b03      	ldr	r3, [sp, #12]
 80087c4:	1d19      	adds	r1, r3, #4
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	9103      	str	r1, [sp, #12]
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	bfbb      	ittet	lt
 80087ce:	425b      	neglt	r3, r3
 80087d0:	f042 0202 	orrlt.w	r2, r2, #2
 80087d4:	9307      	strge	r3, [sp, #28]
 80087d6:	9307      	strlt	r3, [sp, #28]
 80087d8:	bfb8      	it	lt
 80087da:	9204      	strlt	r2, [sp, #16]
 80087dc:	7823      	ldrb	r3, [r4, #0]
 80087de:	2b2e      	cmp	r3, #46	; 0x2e
 80087e0:	d10c      	bne.n	80087fc <_svfiprintf_r+0x130>
 80087e2:	7863      	ldrb	r3, [r4, #1]
 80087e4:	2b2a      	cmp	r3, #42	; 0x2a
 80087e6:	d135      	bne.n	8008854 <_svfiprintf_r+0x188>
 80087e8:	9b03      	ldr	r3, [sp, #12]
 80087ea:	1d1a      	adds	r2, r3, #4
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	9203      	str	r2, [sp, #12]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	bfb8      	it	lt
 80087f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80087f8:	3402      	adds	r4, #2
 80087fa:	9305      	str	r3, [sp, #20]
 80087fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80088c8 <_svfiprintf_r+0x1fc>
 8008800:	7821      	ldrb	r1, [r4, #0]
 8008802:	2203      	movs	r2, #3
 8008804:	4650      	mov	r0, sl
 8008806:	f7f7 fd0b 	bl	8000220 <memchr>
 800880a:	b140      	cbz	r0, 800881e <_svfiprintf_r+0x152>
 800880c:	2340      	movs	r3, #64	; 0x40
 800880e:	eba0 000a 	sub.w	r0, r0, sl
 8008812:	fa03 f000 	lsl.w	r0, r3, r0
 8008816:	9b04      	ldr	r3, [sp, #16]
 8008818:	4303      	orrs	r3, r0
 800881a:	3401      	adds	r4, #1
 800881c:	9304      	str	r3, [sp, #16]
 800881e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008822:	4826      	ldr	r0, [pc, #152]	; (80088bc <_svfiprintf_r+0x1f0>)
 8008824:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008828:	2206      	movs	r2, #6
 800882a:	f7f7 fcf9 	bl	8000220 <memchr>
 800882e:	2800      	cmp	r0, #0
 8008830:	d038      	beq.n	80088a4 <_svfiprintf_r+0x1d8>
 8008832:	4b23      	ldr	r3, [pc, #140]	; (80088c0 <_svfiprintf_r+0x1f4>)
 8008834:	bb1b      	cbnz	r3, 800887e <_svfiprintf_r+0x1b2>
 8008836:	9b03      	ldr	r3, [sp, #12]
 8008838:	3307      	adds	r3, #7
 800883a:	f023 0307 	bic.w	r3, r3, #7
 800883e:	3308      	adds	r3, #8
 8008840:	9303      	str	r3, [sp, #12]
 8008842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008844:	4433      	add	r3, r6
 8008846:	9309      	str	r3, [sp, #36]	; 0x24
 8008848:	e767      	b.n	800871a <_svfiprintf_r+0x4e>
 800884a:	fb0c 3202 	mla	r2, ip, r2, r3
 800884e:	460c      	mov	r4, r1
 8008850:	2001      	movs	r0, #1
 8008852:	e7a5      	b.n	80087a0 <_svfiprintf_r+0xd4>
 8008854:	2300      	movs	r3, #0
 8008856:	3401      	adds	r4, #1
 8008858:	9305      	str	r3, [sp, #20]
 800885a:	4619      	mov	r1, r3
 800885c:	f04f 0c0a 	mov.w	ip, #10
 8008860:	4620      	mov	r0, r4
 8008862:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008866:	3a30      	subs	r2, #48	; 0x30
 8008868:	2a09      	cmp	r2, #9
 800886a:	d903      	bls.n	8008874 <_svfiprintf_r+0x1a8>
 800886c:	2b00      	cmp	r3, #0
 800886e:	d0c5      	beq.n	80087fc <_svfiprintf_r+0x130>
 8008870:	9105      	str	r1, [sp, #20]
 8008872:	e7c3      	b.n	80087fc <_svfiprintf_r+0x130>
 8008874:	fb0c 2101 	mla	r1, ip, r1, r2
 8008878:	4604      	mov	r4, r0
 800887a:	2301      	movs	r3, #1
 800887c:	e7f0      	b.n	8008860 <_svfiprintf_r+0x194>
 800887e:	ab03      	add	r3, sp, #12
 8008880:	9300      	str	r3, [sp, #0]
 8008882:	462a      	mov	r2, r5
 8008884:	4b0f      	ldr	r3, [pc, #60]	; (80088c4 <_svfiprintf_r+0x1f8>)
 8008886:	a904      	add	r1, sp, #16
 8008888:	4638      	mov	r0, r7
 800888a:	f7fc fa49 	bl	8004d20 <_printf_float>
 800888e:	1c42      	adds	r2, r0, #1
 8008890:	4606      	mov	r6, r0
 8008892:	d1d6      	bne.n	8008842 <_svfiprintf_r+0x176>
 8008894:	89ab      	ldrh	r3, [r5, #12]
 8008896:	065b      	lsls	r3, r3, #25
 8008898:	f53f af2c 	bmi.w	80086f4 <_svfiprintf_r+0x28>
 800889c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800889e:	b01d      	add	sp, #116	; 0x74
 80088a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088a4:	ab03      	add	r3, sp, #12
 80088a6:	9300      	str	r3, [sp, #0]
 80088a8:	462a      	mov	r2, r5
 80088aa:	4b06      	ldr	r3, [pc, #24]	; (80088c4 <_svfiprintf_r+0x1f8>)
 80088ac:	a904      	add	r1, sp, #16
 80088ae:	4638      	mov	r0, r7
 80088b0:	f7fc fcda 	bl	8005268 <_printf_i>
 80088b4:	e7eb      	b.n	800888e <_svfiprintf_r+0x1c2>
 80088b6:	bf00      	nop
 80088b8:	080098fc 	.word	0x080098fc
 80088bc:	08009906 	.word	0x08009906
 80088c0:	08004d21 	.word	0x08004d21
 80088c4:	08008615 	.word	0x08008615
 80088c8:	08009902 	.word	0x08009902
 80088cc:	00000000 	.word	0x00000000

080088d0 <nan>:
 80088d0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80088d8 <nan+0x8>
 80088d4:	4770      	bx	lr
 80088d6:	bf00      	nop
 80088d8:	00000000 	.word	0x00000000
 80088dc:	7ff80000 	.word	0x7ff80000

080088e0 <_sbrk_r>:
 80088e0:	b538      	push	{r3, r4, r5, lr}
 80088e2:	4d06      	ldr	r5, [pc, #24]	; (80088fc <_sbrk_r+0x1c>)
 80088e4:	2300      	movs	r3, #0
 80088e6:	4604      	mov	r4, r0
 80088e8:	4608      	mov	r0, r1
 80088ea:	602b      	str	r3, [r5, #0]
 80088ec:	f7f8 ff72 	bl	80017d4 <_sbrk>
 80088f0:	1c43      	adds	r3, r0, #1
 80088f2:	d102      	bne.n	80088fa <_sbrk_r+0x1a>
 80088f4:	682b      	ldr	r3, [r5, #0]
 80088f6:	b103      	cbz	r3, 80088fa <_sbrk_r+0x1a>
 80088f8:	6023      	str	r3, [r4, #0]
 80088fa:	bd38      	pop	{r3, r4, r5, pc}
 80088fc:	200002f8 	.word	0x200002f8

08008900 <strncmp>:
 8008900:	b510      	push	{r4, lr}
 8008902:	b17a      	cbz	r2, 8008924 <strncmp+0x24>
 8008904:	4603      	mov	r3, r0
 8008906:	3901      	subs	r1, #1
 8008908:	1884      	adds	r4, r0, r2
 800890a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800890e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008912:	4290      	cmp	r0, r2
 8008914:	d101      	bne.n	800891a <strncmp+0x1a>
 8008916:	42a3      	cmp	r3, r4
 8008918:	d101      	bne.n	800891e <strncmp+0x1e>
 800891a:	1a80      	subs	r0, r0, r2
 800891c:	bd10      	pop	{r4, pc}
 800891e:	2800      	cmp	r0, #0
 8008920:	d1f3      	bne.n	800890a <strncmp+0xa>
 8008922:	e7fa      	b.n	800891a <strncmp+0x1a>
 8008924:	4610      	mov	r0, r2
 8008926:	e7f9      	b.n	800891c <strncmp+0x1c>

08008928 <__ascii_wctomb>:
 8008928:	b149      	cbz	r1, 800893e <__ascii_wctomb+0x16>
 800892a:	2aff      	cmp	r2, #255	; 0xff
 800892c:	bf85      	ittet	hi
 800892e:	238a      	movhi	r3, #138	; 0x8a
 8008930:	6003      	strhi	r3, [r0, #0]
 8008932:	700a      	strbls	r2, [r1, #0]
 8008934:	f04f 30ff 	movhi.w	r0, #4294967295
 8008938:	bf98      	it	ls
 800893a:	2001      	movls	r0, #1
 800893c:	4770      	bx	lr
 800893e:	4608      	mov	r0, r1
 8008940:	4770      	bx	lr
	...

08008944 <__assert_func>:
 8008944:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008946:	4614      	mov	r4, r2
 8008948:	461a      	mov	r2, r3
 800894a:	4b09      	ldr	r3, [pc, #36]	; (8008970 <__assert_func+0x2c>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	4605      	mov	r5, r0
 8008950:	68d8      	ldr	r0, [r3, #12]
 8008952:	b14c      	cbz	r4, 8008968 <__assert_func+0x24>
 8008954:	4b07      	ldr	r3, [pc, #28]	; (8008974 <__assert_func+0x30>)
 8008956:	9100      	str	r1, [sp, #0]
 8008958:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800895c:	4906      	ldr	r1, [pc, #24]	; (8008978 <__assert_func+0x34>)
 800895e:	462b      	mov	r3, r5
 8008960:	f000 f80e 	bl	8008980 <fiprintf>
 8008964:	f000 fa8c 	bl	8008e80 <abort>
 8008968:	4b04      	ldr	r3, [pc, #16]	; (800897c <__assert_func+0x38>)
 800896a:	461c      	mov	r4, r3
 800896c:	e7f3      	b.n	8008956 <__assert_func+0x12>
 800896e:	bf00      	nop
 8008970:	2000000c 	.word	0x2000000c
 8008974:	0800990d 	.word	0x0800990d
 8008978:	0800991a 	.word	0x0800991a
 800897c:	08009948 	.word	0x08009948

08008980 <fiprintf>:
 8008980:	b40e      	push	{r1, r2, r3}
 8008982:	b503      	push	{r0, r1, lr}
 8008984:	4601      	mov	r1, r0
 8008986:	ab03      	add	r3, sp, #12
 8008988:	4805      	ldr	r0, [pc, #20]	; (80089a0 <fiprintf+0x20>)
 800898a:	f853 2b04 	ldr.w	r2, [r3], #4
 800898e:	6800      	ldr	r0, [r0, #0]
 8008990:	9301      	str	r3, [sp, #4]
 8008992:	f000 f885 	bl	8008aa0 <_vfiprintf_r>
 8008996:	b002      	add	sp, #8
 8008998:	f85d eb04 	ldr.w	lr, [sp], #4
 800899c:	b003      	add	sp, #12
 800899e:	4770      	bx	lr
 80089a0:	2000000c 	.word	0x2000000c

080089a4 <memmove>:
 80089a4:	4288      	cmp	r0, r1
 80089a6:	b510      	push	{r4, lr}
 80089a8:	eb01 0402 	add.w	r4, r1, r2
 80089ac:	d902      	bls.n	80089b4 <memmove+0x10>
 80089ae:	4284      	cmp	r4, r0
 80089b0:	4623      	mov	r3, r4
 80089b2:	d807      	bhi.n	80089c4 <memmove+0x20>
 80089b4:	1e43      	subs	r3, r0, #1
 80089b6:	42a1      	cmp	r1, r4
 80089b8:	d008      	beq.n	80089cc <memmove+0x28>
 80089ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089c2:	e7f8      	b.n	80089b6 <memmove+0x12>
 80089c4:	4402      	add	r2, r0
 80089c6:	4601      	mov	r1, r0
 80089c8:	428a      	cmp	r2, r1
 80089ca:	d100      	bne.n	80089ce <memmove+0x2a>
 80089cc:	bd10      	pop	{r4, pc}
 80089ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80089d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80089d6:	e7f7      	b.n	80089c8 <memmove+0x24>

080089d8 <__malloc_lock>:
 80089d8:	4801      	ldr	r0, [pc, #4]	; (80089e0 <__malloc_lock+0x8>)
 80089da:	f000 bc11 	b.w	8009200 <__retarget_lock_acquire_recursive>
 80089de:	bf00      	nop
 80089e0:	200002fc 	.word	0x200002fc

080089e4 <__malloc_unlock>:
 80089e4:	4801      	ldr	r0, [pc, #4]	; (80089ec <__malloc_unlock+0x8>)
 80089e6:	f000 bc0c 	b.w	8009202 <__retarget_lock_release_recursive>
 80089ea:	bf00      	nop
 80089ec:	200002fc 	.word	0x200002fc

080089f0 <_realloc_r>:
 80089f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80089f4:	4680      	mov	r8, r0
 80089f6:	4614      	mov	r4, r2
 80089f8:	460e      	mov	r6, r1
 80089fa:	b921      	cbnz	r1, 8008a06 <_realloc_r+0x16>
 80089fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a00:	4611      	mov	r1, r2
 8008a02:	f7ff bd93 	b.w	800852c <_malloc_r>
 8008a06:	b92a      	cbnz	r2, 8008a14 <_realloc_r+0x24>
 8008a08:	f7ff fd24 	bl	8008454 <_free_r>
 8008a0c:	4625      	mov	r5, r4
 8008a0e:	4628      	mov	r0, r5
 8008a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a14:	f000 fc5c 	bl	80092d0 <_malloc_usable_size_r>
 8008a18:	4284      	cmp	r4, r0
 8008a1a:	4607      	mov	r7, r0
 8008a1c:	d802      	bhi.n	8008a24 <_realloc_r+0x34>
 8008a1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a22:	d812      	bhi.n	8008a4a <_realloc_r+0x5a>
 8008a24:	4621      	mov	r1, r4
 8008a26:	4640      	mov	r0, r8
 8008a28:	f7ff fd80 	bl	800852c <_malloc_r>
 8008a2c:	4605      	mov	r5, r0
 8008a2e:	2800      	cmp	r0, #0
 8008a30:	d0ed      	beq.n	8008a0e <_realloc_r+0x1e>
 8008a32:	42bc      	cmp	r4, r7
 8008a34:	4622      	mov	r2, r4
 8008a36:	4631      	mov	r1, r6
 8008a38:	bf28      	it	cs
 8008a3a:	463a      	movcs	r2, r7
 8008a3c:	f7ff f824 	bl	8007a88 <memcpy>
 8008a40:	4631      	mov	r1, r6
 8008a42:	4640      	mov	r0, r8
 8008a44:	f7ff fd06 	bl	8008454 <_free_r>
 8008a48:	e7e1      	b.n	8008a0e <_realloc_r+0x1e>
 8008a4a:	4635      	mov	r5, r6
 8008a4c:	e7df      	b.n	8008a0e <_realloc_r+0x1e>

08008a4e <__sfputc_r>:
 8008a4e:	6893      	ldr	r3, [r2, #8]
 8008a50:	3b01      	subs	r3, #1
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	b410      	push	{r4}
 8008a56:	6093      	str	r3, [r2, #8]
 8008a58:	da08      	bge.n	8008a6c <__sfputc_r+0x1e>
 8008a5a:	6994      	ldr	r4, [r2, #24]
 8008a5c:	42a3      	cmp	r3, r4
 8008a5e:	db01      	blt.n	8008a64 <__sfputc_r+0x16>
 8008a60:	290a      	cmp	r1, #10
 8008a62:	d103      	bne.n	8008a6c <__sfputc_r+0x1e>
 8008a64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a68:	f000 b94a 	b.w	8008d00 <__swbuf_r>
 8008a6c:	6813      	ldr	r3, [r2, #0]
 8008a6e:	1c58      	adds	r0, r3, #1
 8008a70:	6010      	str	r0, [r2, #0]
 8008a72:	7019      	strb	r1, [r3, #0]
 8008a74:	4608      	mov	r0, r1
 8008a76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <__sfputs_r>:
 8008a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a7e:	4606      	mov	r6, r0
 8008a80:	460f      	mov	r7, r1
 8008a82:	4614      	mov	r4, r2
 8008a84:	18d5      	adds	r5, r2, r3
 8008a86:	42ac      	cmp	r4, r5
 8008a88:	d101      	bne.n	8008a8e <__sfputs_r+0x12>
 8008a8a:	2000      	movs	r0, #0
 8008a8c:	e007      	b.n	8008a9e <__sfputs_r+0x22>
 8008a8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a92:	463a      	mov	r2, r7
 8008a94:	4630      	mov	r0, r6
 8008a96:	f7ff ffda 	bl	8008a4e <__sfputc_r>
 8008a9a:	1c43      	adds	r3, r0, #1
 8008a9c:	d1f3      	bne.n	8008a86 <__sfputs_r+0xa>
 8008a9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008aa0 <_vfiprintf_r>:
 8008aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aa4:	460d      	mov	r5, r1
 8008aa6:	b09d      	sub	sp, #116	; 0x74
 8008aa8:	4614      	mov	r4, r2
 8008aaa:	4698      	mov	r8, r3
 8008aac:	4606      	mov	r6, r0
 8008aae:	b118      	cbz	r0, 8008ab8 <_vfiprintf_r+0x18>
 8008ab0:	6983      	ldr	r3, [r0, #24]
 8008ab2:	b90b      	cbnz	r3, 8008ab8 <_vfiprintf_r+0x18>
 8008ab4:	f000 fb06 	bl	80090c4 <__sinit>
 8008ab8:	4b89      	ldr	r3, [pc, #548]	; (8008ce0 <_vfiprintf_r+0x240>)
 8008aba:	429d      	cmp	r5, r3
 8008abc:	d11b      	bne.n	8008af6 <_vfiprintf_r+0x56>
 8008abe:	6875      	ldr	r5, [r6, #4]
 8008ac0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ac2:	07d9      	lsls	r1, r3, #31
 8008ac4:	d405      	bmi.n	8008ad2 <_vfiprintf_r+0x32>
 8008ac6:	89ab      	ldrh	r3, [r5, #12]
 8008ac8:	059a      	lsls	r2, r3, #22
 8008aca:	d402      	bmi.n	8008ad2 <_vfiprintf_r+0x32>
 8008acc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ace:	f000 fb97 	bl	8009200 <__retarget_lock_acquire_recursive>
 8008ad2:	89ab      	ldrh	r3, [r5, #12]
 8008ad4:	071b      	lsls	r3, r3, #28
 8008ad6:	d501      	bpl.n	8008adc <_vfiprintf_r+0x3c>
 8008ad8:	692b      	ldr	r3, [r5, #16]
 8008ada:	b9eb      	cbnz	r3, 8008b18 <_vfiprintf_r+0x78>
 8008adc:	4629      	mov	r1, r5
 8008ade:	4630      	mov	r0, r6
 8008ae0:	f000 f960 	bl	8008da4 <__swsetup_r>
 8008ae4:	b1c0      	cbz	r0, 8008b18 <_vfiprintf_r+0x78>
 8008ae6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ae8:	07dc      	lsls	r4, r3, #31
 8008aea:	d50e      	bpl.n	8008b0a <_vfiprintf_r+0x6a>
 8008aec:	f04f 30ff 	mov.w	r0, #4294967295
 8008af0:	b01d      	add	sp, #116	; 0x74
 8008af2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008af6:	4b7b      	ldr	r3, [pc, #492]	; (8008ce4 <_vfiprintf_r+0x244>)
 8008af8:	429d      	cmp	r5, r3
 8008afa:	d101      	bne.n	8008b00 <_vfiprintf_r+0x60>
 8008afc:	68b5      	ldr	r5, [r6, #8]
 8008afe:	e7df      	b.n	8008ac0 <_vfiprintf_r+0x20>
 8008b00:	4b79      	ldr	r3, [pc, #484]	; (8008ce8 <_vfiprintf_r+0x248>)
 8008b02:	429d      	cmp	r5, r3
 8008b04:	bf08      	it	eq
 8008b06:	68f5      	ldreq	r5, [r6, #12]
 8008b08:	e7da      	b.n	8008ac0 <_vfiprintf_r+0x20>
 8008b0a:	89ab      	ldrh	r3, [r5, #12]
 8008b0c:	0598      	lsls	r0, r3, #22
 8008b0e:	d4ed      	bmi.n	8008aec <_vfiprintf_r+0x4c>
 8008b10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008b12:	f000 fb76 	bl	8009202 <__retarget_lock_release_recursive>
 8008b16:	e7e9      	b.n	8008aec <_vfiprintf_r+0x4c>
 8008b18:	2300      	movs	r3, #0
 8008b1a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b1c:	2320      	movs	r3, #32
 8008b1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008b22:	f8cd 800c 	str.w	r8, [sp, #12]
 8008b26:	2330      	movs	r3, #48	; 0x30
 8008b28:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8008cec <_vfiprintf_r+0x24c>
 8008b2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008b30:	f04f 0901 	mov.w	r9, #1
 8008b34:	4623      	mov	r3, r4
 8008b36:	469a      	mov	sl, r3
 8008b38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b3c:	b10a      	cbz	r2, 8008b42 <_vfiprintf_r+0xa2>
 8008b3e:	2a25      	cmp	r2, #37	; 0x25
 8008b40:	d1f9      	bne.n	8008b36 <_vfiprintf_r+0x96>
 8008b42:	ebba 0b04 	subs.w	fp, sl, r4
 8008b46:	d00b      	beq.n	8008b60 <_vfiprintf_r+0xc0>
 8008b48:	465b      	mov	r3, fp
 8008b4a:	4622      	mov	r2, r4
 8008b4c:	4629      	mov	r1, r5
 8008b4e:	4630      	mov	r0, r6
 8008b50:	f7ff ff94 	bl	8008a7c <__sfputs_r>
 8008b54:	3001      	adds	r0, #1
 8008b56:	f000 80aa 	beq.w	8008cae <_vfiprintf_r+0x20e>
 8008b5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008b5c:	445a      	add	r2, fp
 8008b5e:	9209      	str	r2, [sp, #36]	; 0x24
 8008b60:	f89a 3000 	ldrb.w	r3, [sl]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	f000 80a2 	beq.w	8008cae <_vfiprintf_r+0x20e>
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008b74:	f10a 0a01 	add.w	sl, sl, #1
 8008b78:	9304      	str	r3, [sp, #16]
 8008b7a:	9307      	str	r3, [sp, #28]
 8008b7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008b80:	931a      	str	r3, [sp, #104]	; 0x68
 8008b82:	4654      	mov	r4, sl
 8008b84:	2205      	movs	r2, #5
 8008b86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b8a:	4858      	ldr	r0, [pc, #352]	; (8008cec <_vfiprintf_r+0x24c>)
 8008b8c:	f7f7 fb48 	bl	8000220 <memchr>
 8008b90:	9a04      	ldr	r2, [sp, #16]
 8008b92:	b9d8      	cbnz	r0, 8008bcc <_vfiprintf_r+0x12c>
 8008b94:	06d1      	lsls	r1, r2, #27
 8008b96:	bf44      	itt	mi
 8008b98:	2320      	movmi	r3, #32
 8008b9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008b9e:	0713      	lsls	r3, r2, #28
 8008ba0:	bf44      	itt	mi
 8008ba2:	232b      	movmi	r3, #43	; 0x2b
 8008ba4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008ba8:	f89a 3000 	ldrb.w	r3, [sl]
 8008bac:	2b2a      	cmp	r3, #42	; 0x2a
 8008bae:	d015      	beq.n	8008bdc <_vfiprintf_r+0x13c>
 8008bb0:	9a07      	ldr	r2, [sp, #28]
 8008bb2:	4654      	mov	r4, sl
 8008bb4:	2000      	movs	r0, #0
 8008bb6:	f04f 0c0a 	mov.w	ip, #10
 8008bba:	4621      	mov	r1, r4
 8008bbc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008bc0:	3b30      	subs	r3, #48	; 0x30
 8008bc2:	2b09      	cmp	r3, #9
 8008bc4:	d94e      	bls.n	8008c64 <_vfiprintf_r+0x1c4>
 8008bc6:	b1b0      	cbz	r0, 8008bf6 <_vfiprintf_r+0x156>
 8008bc8:	9207      	str	r2, [sp, #28]
 8008bca:	e014      	b.n	8008bf6 <_vfiprintf_r+0x156>
 8008bcc:	eba0 0308 	sub.w	r3, r0, r8
 8008bd0:	fa09 f303 	lsl.w	r3, r9, r3
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	9304      	str	r3, [sp, #16]
 8008bd8:	46a2      	mov	sl, r4
 8008bda:	e7d2      	b.n	8008b82 <_vfiprintf_r+0xe2>
 8008bdc:	9b03      	ldr	r3, [sp, #12]
 8008bde:	1d19      	adds	r1, r3, #4
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	9103      	str	r1, [sp, #12]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	bfbb      	ittet	lt
 8008be8:	425b      	neglt	r3, r3
 8008bea:	f042 0202 	orrlt.w	r2, r2, #2
 8008bee:	9307      	strge	r3, [sp, #28]
 8008bf0:	9307      	strlt	r3, [sp, #28]
 8008bf2:	bfb8      	it	lt
 8008bf4:	9204      	strlt	r2, [sp, #16]
 8008bf6:	7823      	ldrb	r3, [r4, #0]
 8008bf8:	2b2e      	cmp	r3, #46	; 0x2e
 8008bfa:	d10c      	bne.n	8008c16 <_vfiprintf_r+0x176>
 8008bfc:	7863      	ldrb	r3, [r4, #1]
 8008bfe:	2b2a      	cmp	r3, #42	; 0x2a
 8008c00:	d135      	bne.n	8008c6e <_vfiprintf_r+0x1ce>
 8008c02:	9b03      	ldr	r3, [sp, #12]
 8008c04:	1d1a      	adds	r2, r3, #4
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	9203      	str	r2, [sp, #12]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	bfb8      	it	lt
 8008c0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008c12:	3402      	adds	r4, #2
 8008c14:	9305      	str	r3, [sp, #20]
 8008c16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8008cfc <_vfiprintf_r+0x25c>
 8008c1a:	7821      	ldrb	r1, [r4, #0]
 8008c1c:	2203      	movs	r2, #3
 8008c1e:	4650      	mov	r0, sl
 8008c20:	f7f7 fafe 	bl	8000220 <memchr>
 8008c24:	b140      	cbz	r0, 8008c38 <_vfiprintf_r+0x198>
 8008c26:	2340      	movs	r3, #64	; 0x40
 8008c28:	eba0 000a 	sub.w	r0, r0, sl
 8008c2c:	fa03 f000 	lsl.w	r0, r3, r0
 8008c30:	9b04      	ldr	r3, [sp, #16]
 8008c32:	4303      	orrs	r3, r0
 8008c34:	3401      	adds	r4, #1
 8008c36:	9304      	str	r3, [sp, #16]
 8008c38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c3c:	482c      	ldr	r0, [pc, #176]	; (8008cf0 <_vfiprintf_r+0x250>)
 8008c3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008c42:	2206      	movs	r2, #6
 8008c44:	f7f7 faec 	bl	8000220 <memchr>
 8008c48:	2800      	cmp	r0, #0
 8008c4a:	d03f      	beq.n	8008ccc <_vfiprintf_r+0x22c>
 8008c4c:	4b29      	ldr	r3, [pc, #164]	; (8008cf4 <_vfiprintf_r+0x254>)
 8008c4e:	bb1b      	cbnz	r3, 8008c98 <_vfiprintf_r+0x1f8>
 8008c50:	9b03      	ldr	r3, [sp, #12]
 8008c52:	3307      	adds	r3, #7
 8008c54:	f023 0307 	bic.w	r3, r3, #7
 8008c58:	3308      	adds	r3, #8
 8008c5a:	9303      	str	r3, [sp, #12]
 8008c5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c5e:	443b      	add	r3, r7
 8008c60:	9309      	str	r3, [sp, #36]	; 0x24
 8008c62:	e767      	b.n	8008b34 <_vfiprintf_r+0x94>
 8008c64:	fb0c 3202 	mla	r2, ip, r2, r3
 8008c68:	460c      	mov	r4, r1
 8008c6a:	2001      	movs	r0, #1
 8008c6c:	e7a5      	b.n	8008bba <_vfiprintf_r+0x11a>
 8008c6e:	2300      	movs	r3, #0
 8008c70:	3401      	adds	r4, #1
 8008c72:	9305      	str	r3, [sp, #20]
 8008c74:	4619      	mov	r1, r3
 8008c76:	f04f 0c0a 	mov.w	ip, #10
 8008c7a:	4620      	mov	r0, r4
 8008c7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c80:	3a30      	subs	r2, #48	; 0x30
 8008c82:	2a09      	cmp	r2, #9
 8008c84:	d903      	bls.n	8008c8e <_vfiprintf_r+0x1ee>
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d0c5      	beq.n	8008c16 <_vfiprintf_r+0x176>
 8008c8a:	9105      	str	r1, [sp, #20]
 8008c8c:	e7c3      	b.n	8008c16 <_vfiprintf_r+0x176>
 8008c8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8008c92:	4604      	mov	r4, r0
 8008c94:	2301      	movs	r3, #1
 8008c96:	e7f0      	b.n	8008c7a <_vfiprintf_r+0x1da>
 8008c98:	ab03      	add	r3, sp, #12
 8008c9a:	9300      	str	r3, [sp, #0]
 8008c9c:	462a      	mov	r2, r5
 8008c9e:	4b16      	ldr	r3, [pc, #88]	; (8008cf8 <_vfiprintf_r+0x258>)
 8008ca0:	a904      	add	r1, sp, #16
 8008ca2:	4630      	mov	r0, r6
 8008ca4:	f7fc f83c 	bl	8004d20 <_printf_float>
 8008ca8:	4607      	mov	r7, r0
 8008caa:	1c78      	adds	r0, r7, #1
 8008cac:	d1d6      	bne.n	8008c5c <_vfiprintf_r+0x1bc>
 8008cae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008cb0:	07d9      	lsls	r1, r3, #31
 8008cb2:	d405      	bmi.n	8008cc0 <_vfiprintf_r+0x220>
 8008cb4:	89ab      	ldrh	r3, [r5, #12]
 8008cb6:	059a      	lsls	r2, r3, #22
 8008cb8:	d402      	bmi.n	8008cc0 <_vfiprintf_r+0x220>
 8008cba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cbc:	f000 faa1 	bl	8009202 <__retarget_lock_release_recursive>
 8008cc0:	89ab      	ldrh	r3, [r5, #12]
 8008cc2:	065b      	lsls	r3, r3, #25
 8008cc4:	f53f af12 	bmi.w	8008aec <_vfiprintf_r+0x4c>
 8008cc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008cca:	e711      	b.n	8008af0 <_vfiprintf_r+0x50>
 8008ccc:	ab03      	add	r3, sp, #12
 8008cce:	9300      	str	r3, [sp, #0]
 8008cd0:	462a      	mov	r2, r5
 8008cd2:	4b09      	ldr	r3, [pc, #36]	; (8008cf8 <_vfiprintf_r+0x258>)
 8008cd4:	a904      	add	r1, sp, #16
 8008cd6:	4630      	mov	r0, r6
 8008cd8:	f7fc fac6 	bl	8005268 <_printf_i>
 8008cdc:	e7e4      	b.n	8008ca8 <_vfiprintf_r+0x208>
 8008cde:	bf00      	nop
 8008ce0:	0800996c 	.word	0x0800996c
 8008ce4:	0800998c 	.word	0x0800998c
 8008ce8:	0800994c 	.word	0x0800994c
 8008cec:	080098fc 	.word	0x080098fc
 8008cf0:	08009906 	.word	0x08009906
 8008cf4:	08004d21 	.word	0x08004d21
 8008cf8:	08008a7d 	.word	0x08008a7d
 8008cfc:	08009902 	.word	0x08009902

08008d00 <__swbuf_r>:
 8008d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d02:	460e      	mov	r6, r1
 8008d04:	4614      	mov	r4, r2
 8008d06:	4605      	mov	r5, r0
 8008d08:	b118      	cbz	r0, 8008d12 <__swbuf_r+0x12>
 8008d0a:	6983      	ldr	r3, [r0, #24]
 8008d0c:	b90b      	cbnz	r3, 8008d12 <__swbuf_r+0x12>
 8008d0e:	f000 f9d9 	bl	80090c4 <__sinit>
 8008d12:	4b21      	ldr	r3, [pc, #132]	; (8008d98 <__swbuf_r+0x98>)
 8008d14:	429c      	cmp	r4, r3
 8008d16:	d12b      	bne.n	8008d70 <__swbuf_r+0x70>
 8008d18:	686c      	ldr	r4, [r5, #4]
 8008d1a:	69a3      	ldr	r3, [r4, #24]
 8008d1c:	60a3      	str	r3, [r4, #8]
 8008d1e:	89a3      	ldrh	r3, [r4, #12]
 8008d20:	071a      	lsls	r2, r3, #28
 8008d22:	d52f      	bpl.n	8008d84 <__swbuf_r+0x84>
 8008d24:	6923      	ldr	r3, [r4, #16]
 8008d26:	b36b      	cbz	r3, 8008d84 <__swbuf_r+0x84>
 8008d28:	6923      	ldr	r3, [r4, #16]
 8008d2a:	6820      	ldr	r0, [r4, #0]
 8008d2c:	1ac0      	subs	r0, r0, r3
 8008d2e:	6963      	ldr	r3, [r4, #20]
 8008d30:	b2f6      	uxtb	r6, r6
 8008d32:	4283      	cmp	r3, r0
 8008d34:	4637      	mov	r7, r6
 8008d36:	dc04      	bgt.n	8008d42 <__swbuf_r+0x42>
 8008d38:	4621      	mov	r1, r4
 8008d3a:	4628      	mov	r0, r5
 8008d3c:	f000 f92e 	bl	8008f9c <_fflush_r>
 8008d40:	bb30      	cbnz	r0, 8008d90 <__swbuf_r+0x90>
 8008d42:	68a3      	ldr	r3, [r4, #8]
 8008d44:	3b01      	subs	r3, #1
 8008d46:	60a3      	str	r3, [r4, #8]
 8008d48:	6823      	ldr	r3, [r4, #0]
 8008d4a:	1c5a      	adds	r2, r3, #1
 8008d4c:	6022      	str	r2, [r4, #0]
 8008d4e:	701e      	strb	r6, [r3, #0]
 8008d50:	6963      	ldr	r3, [r4, #20]
 8008d52:	3001      	adds	r0, #1
 8008d54:	4283      	cmp	r3, r0
 8008d56:	d004      	beq.n	8008d62 <__swbuf_r+0x62>
 8008d58:	89a3      	ldrh	r3, [r4, #12]
 8008d5a:	07db      	lsls	r3, r3, #31
 8008d5c:	d506      	bpl.n	8008d6c <__swbuf_r+0x6c>
 8008d5e:	2e0a      	cmp	r6, #10
 8008d60:	d104      	bne.n	8008d6c <__swbuf_r+0x6c>
 8008d62:	4621      	mov	r1, r4
 8008d64:	4628      	mov	r0, r5
 8008d66:	f000 f919 	bl	8008f9c <_fflush_r>
 8008d6a:	b988      	cbnz	r0, 8008d90 <__swbuf_r+0x90>
 8008d6c:	4638      	mov	r0, r7
 8008d6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d70:	4b0a      	ldr	r3, [pc, #40]	; (8008d9c <__swbuf_r+0x9c>)
 8008d72:	429c      	cmp	r4, r3
 8008d74:	d101      	bne.n	8008d7a <__swbuf_r+0x7a>
 8008d76:	68ac      	ldr	r4, [r5, #8]
 8008d78:	e7cf      	b.n	8008d1a <__swbuf_r+0x1a>
 8008d7a:	4b09      	ldr	r3, [pc, #36]	; (8008da0 <__swbuf_r+0xa0>)
 8008d7c:	429c      	cmp	r4, r3
 8008d7e:	bf08      	it	eq
 8008d80:	68ec      	ldreq	r4, [r5, #12]
 8008d82:	e7ca      	b.n	8008d1a <__swbuf_r+0x1a>
 8008d84:	4621      	mov	r1, r4
 8008d86:	4628      	mov	r0, r5
 8008d88:	f000 f80c 	bl	8008da4 <__swsetup_r>
 8008d8c:	2800      	cmp	r0, #0
 8008d8e:	d0cb      	beq.n	8008d28 <__swbuf_r+0x28>
 8008d90:	f04f 37ff 	mov.w	r7, #4294967295
 8008d94:	e7ea      	b.n	8008d6c <__swbuf_r+0x6c>
 8008d96:	bf00      	nop
 8008d98:	0800996c 	.word	0x0800996c
 8008d9c:	0800998c 	.word	0x0800998c
 8008da0:	0800994c 	.word	0x0800994c

08008da4 <__swsetup_r>:
 8008da4:	4b32      	ldr	r3, [pc, #200]	; (8008e70 <__swsetup_r+0xcc>)
 8008da6:	b570      	push	{r4, r5, r6, lr}
 8008da8:	681d      	ldr	r5, [r3, #0]
 8008daa:	4606      	mov	r6, r0
 8008dac:	460c      	mov	r4, r1
 8008dae:	b125      	cbz	r5, 8008dba <__swsetup_r+0x16>
 8008db0:	69ab      	ldr	r3, [r5, #24]
 8008db2:	b913      	cbnz	r3, 8008dba <__swsetup_r+0x16>
 8008db4:	4628      	mov	r0, r5
 8008db6:	f000 f985 	bl	80090c4 <__sinit>
 8008dba:	4b2e      	ldr	r3, [pc, #184]	; (8008e74 <__swsetup_r+0xd0>)
 8008dbc:	429c      	cmp	r4, r3
 8008dbe:	d10f      	bne.n	8008de0 <__swsetup_r+0x3c>
 8008dc0:	686c      	ldr	r4, [r5, #4]
 8008dc2:	89a3      	ldrh	r3, [r4, #12]
 8008dc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008dc8:	0719      	lsls	r1, r3, #28
 8008dca:	d42c      	bmi.n	8008e26 <__swsetup_r+0x82>
 8008dcc:	06dd      	lsls	r5, r3, #27
 8008dce:	d411      	bmi.n	8008df4 <__swsetup_r+0x50>
 8008dd0:	2309      	movs	r3, #9
 8008dd2:	6033      	str	r3, [r6, #0]
 8008dd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008dd8:	81a3      	strh	r3, [r4, #12]
 8008dda:	f04f 30ff 	mov.w	r0, #4294967295
 8008dde:	e03e      	b.n	8008e5e <__swsetup_r+0xba>
 8008de0:	4b25      	ldr	r3, [pc, #148]	; (8008e78 <__swsetup_r+0xd4>)
 8008de2:	429c      	cmp	r4, r3
 8008de4:	d101      	bne.n	8008dea <__swsetup_r+0x46>
 8008de6:	68ac      	ldr	r4, [r5, #8]
 8008de8:	e7eb      	b.n	8008dc2 <__swsetup_r+0x1e>
 8008dea:	4b24      	ldr	r3, [pc, #144]	; (8008e7c <__swsetup_r+0xd8>)
 8008dec:	429c      	cmp	r4, r3
 8008dee:	bf08      	it	eq
 8008df0:	68ec      	ldreq	r4, [r5, #12]
 8008df2:	e7e6      	b.n	8008dc2 <__swsetup_r+0x1e>
 8008df4:	0758      	lsls	r0, r3, #29
 8008df6:	d512      	bpl.n	8008e1e <__swsetup_r+0x7a>
 8008df8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dfa:	b141      	cbz	r1, 8008e0e <__swsetup_r+0x6a>
 8008dfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e00:	4299      	cmp	r1, r3
 8008e02:	d002      	beq.n	8008e0a <__swsetup_r+0x66>
 8008e04:	4630      	mov	r0, r6
 8008e06:	f7ff fb25 	bl	8008454 <_free_r>
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	6363      	str	r3, [r4, #52]	; 0x34
 8008e0e:	89a3      	ldrh	r3, [r4, #12]
 8008e10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e14:	81a3      	strh	r3, [r4, #12]
 8008e16:	2300      	movs	r3, #0
 8008e18:	6063      	str	r3, [r4, #4]
 8008e1a:	6923      	ldr	r3, [r4, #16]
 8008e1c:	6023      	str	r3, [r4, #0]
 8008e1e:	89a3      	ldrh	r3, [r4, #12]
 8008e20:	f043 0308 	orr.w	r3, r3, #8
 8008e24:	81a3      	strh	r3, [r4, #12]
 8008e26:	6923      	ldr	r3, [r4, #16]
 8008e28:	b94b      	cbnz	r3, 8008e3e <__swsetup_r+0x9a>
 8008e2a:	89a3      	ldrh	r3, [r4, #12]
 8008e2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e34:	d003      	beq.n	8008e3e <__swsetup_r+0x9a>
 8008e36:	4621      	mov	r1, r4
 8008e38:	4630      	mov	r0, r6
 8008e3a:	f000 fa09 	bl	8009250 <__smakebuf_r>
 8008e3e:	89a0      	ldrh	r0, [r4, #12]
 8008e40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e44:	f010 0301 	ands.w	r3, r0, #1
 8008e48:	d00a      	beq.n	8008e60 <__swsetup_r+0xbc>
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	60a3      	str	r3, [r4, #8]
 8008e4e:	6963      	ldr	r3, [r4, #20]
 8008e50:	425b      	negs	r3, r3
 8008e52:	61a3      	str	r3, [r4, #24]
 8008e54:	6923      	ldr	r3, [r4, #16]
 8008e56:	b943      	cbnz	r3, 8008e6a <__swsetup_r+0xc6>
 8008e58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008e5c:	d1ba      	bne.n	8008dd4 <__swsetup_r+0x30>
 8008e5e:	bd70      	pop	{r4, r5, r6, pc}
 8008e60:	0781      	lsls	r1, r0, #30
 8008e62:	bf58      	it	pl
 8008e64:	6963      	ldrpl	r3, [r4, #20]
 8008e66:	60a3      	str	r3, [r4, #8]
 8008e68:	e7f4      	b.n	8008e54 <__swsetup_r+0xb0>
 8008e6a:	2000      	movs	r0, #0
 8008e6c:	e7f7      	b.n	8008e5e <__swsetup_r+0xba>
 8008e6e:	bf00      	nop
 8008e70:	2000000c 	.word	0x2000000c
 8008e74:	0800996c 	.word	0x0800996c
 8008e78:	0800998c 	.word	0x0800998c
 8008e7c:	0800994c 	.word	0x0800994c

08008e80 <abort>:
 8008e80:	b508      	push	{r3, lr}
 8008e82:	2006      	movs	r0, #6
 8008e84:	f000 fa54 	bl	8009330 <raise>
 8008e88:	2001      	movs	r0, #1
 8008e8a:	f7f8 fc2b 	bl	80016e4 <_exit>
	...

08008e90 <__sflush_r>:
 8008e90:	898a      	ldrh	r2, [r1, #12]
 8008e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e96:	4605      	mov	r5, r0
 8008e98:	0710      	lsls	r0, r2, #28
 8008e9a:	460c      	mov	r4, r1
 8008e9c:	d458      	bmi.n	8008f50 <__sflush_r+0xc0>
 8008e9e:	684b      	ldr	r3, [r1, #4]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	dc05      	bgt.n	8008eb0 <__sflush_r+0x20>
 8008ea4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	dc02      	bgt.n	8008eb0 <__sflush_r+0x20>
 8008eaa:	2000      	movs	r0, #0
 8008eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008eb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008eb2:	2e00      	cmp	r6, #0
 8008eb4:	d0f9      	beq.n	8008eaa <__sflush_r+0x1a>
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ebc:	682f      	ldr	r7, [r5, #0]
 8008ebe:	602b      	str	r3, [r5, #0]
 8008ec0:	d032      	beq.n	8008f28 <__sflush_r+0x98>
 8008ec2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ec4:	89a3      	ldrh	r3, [r4, #12]
 8008ec6:	075a      	lsls	r2, r3, #29
 8008ec8:	d505      	bpl.n	8008ed6 <__sflush_r+0x46>
 8008eca:	6863      	ldr	r3, [r4, #4]
 8008ecc:	1ac0      	subs	r0, r0, r3
 8008ece:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008ed0:	b10b      	cbz	r3, 8008ed6 <__sflush_r+0x46>
 8008ed2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008ed4:	1ac0      	subs	r0, r0, r3
 8008ed6:	2300      	movs	r3, #0
 8008ed8:	4602      	mov	r2, r0
 8008eda:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008edc:	6a21      	ldr	r1, [r4, #32]
 8008ede:	4628      	mov	r0, r5
 8008ee0:	47b0      	blx	r6
 8008ee2:	1c43      	adds	r3, r0, #1
 8008ee4:	89a3      	ldrh	r3, [r4, #12]
 8008ee6:	d106      	bne.n	8008ef6 <__sflush_r+0x66>
 8008ee8:	6829      	ldr	r1, [r5, #0]
 8008eea:	291d      	cmp	r1, #29
 8008eec:	d82c      	bhi.n	8008f48 <__sflush_r+0xb8>
 8008eee:	4a2a      	ldr	r2, [pc, #168]	; (8008f98 <__sflush_r+0x108>)
 8008ef0:	40ca      	lsrs	r2, r1
 8008ef2:	07d6      	lsls	r6, r2, #31
 8008ef4:	d528      	bpl.n	8008f48 <__sflush_r+0xb8>
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	6062      	str	r2, [r4, #4]
 8008efa:	04d9      	lsls	r1, r3, #19
 8008efc:	6922      	ldr	r2, [r4, #16]
 8008efe:	6022      	str	r2, [r4, #0]
 8008f00:	d504      	bpl.n	8008f0c <__sflush_r+0x7c>
 8008f02:	1c42      	adds	r2, r0, #1
 8008f04:	d101      	bne.n	8008f0a <__sflush_r+0x7a>
 8008f06:	682b      	ldr	r3, [r5, #0]
 8008f08:	b903      	cbnz	r3, 8008f0c <__sflush_r+0x7c>
 8008f0a:	6560      	str	r0, [r4, #84]	; 0x54
 8008f0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008f0e:	602f      	str	r7, [r5, #0]
 8008f10:	2900      	cmp	r1, #0
 8008f12:	d0ca      	beq.n	8008eaa <__sflush_r+0x1a>
 8008f14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008f18:	4299      	cmp	r1, r3
 8008f1a:	d002      	beq.n	8008f22 <__sflush_r+0x92>
 8008f1c:	4628      	mov	r0, r5
 8008f1e:	f7ff fa99 	bl	8008454 <_free_r>
 8008f22:	2000      	movs	r0, #0
 8008f24:	6360      	str	r0, [r4, #52]	; 0x34
 8008f26:	e7c1      	b.n	8008eac <__sflush_r+0x1c>
 8008f28:	6a21      	ldr	r1, [r4, #32]
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	4628      	mov	r0, r5
 8008f2e:	47b0      	blx	r6
 8008f30:	1c41      	adds	r1, r0, #1
 8008f32:	d1c7      	bne.n	8008ec4 <__sflush_r+0x34>
 8008f34:	682b      	ldr	r3, [r5, #0]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d0c4      	beq.n	8008ec4 <__sflush_r+0x34>
 8008f3a:	2b1d      	cmp	r3, #29
 8008f3c:	d001      	beq.n	8008f42 <__sflush_r+0xb2>
 8008f3e:	2b16      	cmp	r3, #22
 8008f40:	d101      	bne.n	8008f46 <__sflush_r+0xb6>
 8008f42:	602f      	str	r7, [r5, #0]
 8008f44:	e7b1      	b.n	8008eaa <__sflush_r+0x1a>
 8008f46:	89a3      	ldrh	r3, [r4, #12]
 8008f48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f4c:	81a3      	strh	r3, [r4, #12]
 8008f4e:	e7ad      	b.n	8008eac <__sflush_r+0x1c>
 8008f50:	690f      	ldr	r7, [r1, #16]
 8008f52:	2f00      	cmp	r7, #0
 8008f54:	d0a9      	beq.n	8008eaa <__sflush_r+0x1a>
 8008f56:	0793      	lsls	r3, r2, #30
 8008f58:	680e      	ldr	r6, [r1, #0]
 8008f5a:	bf08      	it	eq
 8008f5c:	694b      	ldreq	r3, [r1, #20]
 8008f5e:	600f      	str	r7, [r1, #0]
 8008f60:	bf18      	it	ne
 8008f62:	2300      	movne	r3, #0
 8008f64:	eba6 0807 	sub.w	r8, r6, r7
 8008f68:	608b      	str	r3, [r1, #8]
 8008f6a:	f1b8 0f00 	cmp.w	r8, #0
 8008f6e:	dd9c      	ble.n	8008eaa <__sflush_r+0x1a>
 8008f70:	6a21      	ldr	r1, [r4, #32]
 8008f72:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f74:	4643      	mov	r3, r8
 8008f76:	463a      	mov	r2, r7
 8008f78:	4628      	mov	r0, r5
 8008f7a:	47b0      	blx	r6
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	dc06      	bgt.n	8008f8e <__sflush_r+0xfe>
 8008f80:	89a3      	ldrh	r3, [r4, #12]
 8008f82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f86:	81a3      	strh	r3, [r4, #12]
 8008f88:	f04f 30ff 	mov.w	r0, #4294967295
 8008f8c:	e78e      	b.n	8008eac <__sflush_r+0x1c>
 8008f8e:	4407      	add	r7, r0
 8008f90:	eba8 0800 	sub.w	r8, r8, r0
 8008f94:	e7e9      	b.n	8008f6a <__sflush_r+0xda>
 8008f96:	bf00      	nop
 8008f98:	20400001 	.word	0x20400001

08008f9c <_fflush_r>:
 8008f9c:	b538      	push	{r3, r4, r5, lr}
 8008f9e:	690b      	ldr	r3, [r1, #16]
 8008fa0:	4605      	mov	r5, r0
 8008fa2:	460c      	mov	r4, r1
 8008fa4:	b913      	cbnz	r3, 8008fac <_fflush_r+0x10>
 8008fa6:	2500      	movs	r5, #0
 8008fa8:	4628      	mov	r0, r5
 8008faa:	bd38      	pop	{r3, r4, r5, pc}
 8008fac:	b118      	cbz	r0, 8008fb6 <_fflush_r+0x1a>
 8008fae:	6983      	ldr	r3, [r0, #24]
 8008fb0:	b90b      	cbnz	r3, 8008fb6 <_fflush_r+0x1a>
 8008fb2:	f000 f887 	bl	80090c4 <__sinit>
 8008fb6:	4b14      	ldr	r3, [pc, #80]	; (8009008 <_fflush_r+0x6c>)
 8008fb8:	429c      	cmp	r4, r3
 8008fba:	d11b      	bne.n	8008ff4 <_fflush_r+0x58>
 8008fbc:	686c      	ldr	r4, [r5, #4]
 8008fbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d0ef      	beq.n	8008fa6 <_fflush_r+0xa>
 8008fc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008fc8:	07d0      	lsls	r0, r2, #31
 8008fca:	d404      	bmi.n	8008fd6 <_fflush_r+0x3a>
 8008fcc:	0599      	lsls	r1, r3, #22
 8008fce:	d402      	bmi.n	8008fd6 <_fflush_r+0x3a>
 8008fd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fd2:	f000 f915 	bl	8009200 <__retarget_lock_acquire_recursive>
 8008fd6:	4628      	mov	r0, r5
 8008fd8:	4621      	mov	r1, r4
 8008fda:	f7ff ff59 	bl	8008e90 <__sflush_r>
 8008fde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008fe0:	07da      	lsls	r2, r3, #31
 8008fe2:	4605      	mov	r5, r0
 8008fe4:	d4e0      	bmi.n	8008fa8 <_fflush_r+0xc>
 8008fe6:	89a3      	ldrh	r3, [r4, #12]
 8008fe8:	059b      	lsls	r3, r3, #22
 8008fea:	d4dd      	bmi.n	8008fa8 <_fflush_r+0xc>
 8008fec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008fee:	f000 f908 	bl	8009202 <__retarget_lock_release_recursive>
 8008ff2:	e7d9      	b.n	8008fa8 <_fflush_r+0xc>
 8008ff4:	4b05      	ldr	r3, [pc, #20]	; (800900c <_fflush_r+0x70>)
 8008ff6:	429c      	cmp	r4, r3
 8008ff8:	d101      	bne.n	8008ffe <_fflush_r+0x62>
 8008ffa:	68ac      	ldr	r4, [r5, #8]
 8008ffc:	e7df      	b.n	8008fbe <_fflush_r+0x22>
 8008ffe:	4b04      	ldr	r3, [pc, #16]	; (8009010 <_fflush_r+0x74>)
 8009000:	429c      	cmp	r4, r3
 8009002:	bf08      	it	eq
 8009004:	68ec      	ldreq	r4, [r5, #12]
 8009006:	e7da      	b.n	8008fbe <_fflush_r+0x22>
 8009008:	0800996c 	.word	0x0800996c
 800900c:	0800998c 	.word	0x0800998c
 8009010:	0800994c 	.word	0x0800994c

08009014 <std>:
 8009014:	2300      	movs	r3, #0
 8009016:	b510      	push	{r4, lr}
 8009018:	4604      	mov	r4, r0
 800901a:	e9c0 3300 	strd	r3, r3, [r0]
 800901e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009022:	6083      	str	r3, [r0, #8]
 8009024:	8181      	strh	r1, [r0, #12]
 8009026:	6643      	str	r3, [r0, #100]	; 0x64
 8009028:	81c2      	strh	r2, [r0, #14]
 800902a:	6183      	str	r3, [r0, #24]
 800902c:	4619      	mov	r1, r3
 800902e:	2208      	movs	r2, #8
 8009030:	305c      	adds	r0, #92	; 0x5c
 8009032:	f7fb fdcd 	bl	8004bd0 <memset>
 8009036:	4b05      	ldr	r3, [pc, #20]	; (800904c <std+0x38>)
 8009038:	6263      	str	r3, [r4, #36]	; 0x24
 800903a:	4b05      	ldr	r3, [pc, #20]	; (8009050 <std+0x3c>)
 800903c:	62a3      	str	r3, [r4, #40]	; 0x28
 800903e:	4b05      	ldr	r3, [pc, #20]	; (8009054 <std+0x40>)
 8009040:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009042:	4b05      	ldr	r3, [pc, #20]	; (8009058 <std+0x44>)
 8009044:	6224      	str	r4, [r4, #32]
 8009046:	6323      	str	r3, [r4, #48]	; 0x30
 8009048:	bd10      	pop	{r4, pc}
 800904a:	bf00      	nop
 800904c:	08009369 	.word	0x08009369
 8009050:	0800938b 	.word	0x0800938b
 8009054:	080093c3 	.word	0x080093c3
 8009058:	080093e7 	.word	0x080093e7

0800905c <_cleanup_r>:
 800905c:	4901      	ldr	r1, [pc, #4]	; (8009064 <_cleanup_r+0x8>)
 800905e:	f000 b8af 	b.w	80091c0 <_fwalk_reent>
 8009062:	bf00      	nop
 8009064:	08008f9d 	.word	0x08008f9d

08009068 <__sfmoreglue>:
 8009068:	b570      	push	{r4, r5, r6, lr}
 800906a:	2268      	movs	r2, #104	; 0x68
 800906c:	1e4d      	subs	r5, r1, #1
 800906e:	4355      	muls	r5, r2
 8009070:	460e      	mov	r6, r1
 8009072:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009076:	f7ff fa59 	bl	800852c <_malloc_r>
 800907a:	4604      	mov	r4, r0
 800907c:	b140      	cbz	r0, 8009090 <__sfmoreglue+0x28>
 800907e:	2100      	movs	r1, #0
 8009080:	e9c0 1600 	strd	r1, r6, [r0]
 8009084:	300c      	adds	r0, #12
 8009086:	60a0      	str	r0, [r4, #8]
 8009088:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800908c:	f7fb fda0 	bl	8004bd0 <memset>
 8009090:	4620      	mov	r0, r4
 8009092:	bd70      	pop	{r4, r5, r6, pc}

08009094 <__sfp_lock_acquire>:
 8009094:	4801      	ldr	r0, [pc, #4]	; (800909c <__sfp_lock_acquire+0x8>)
 8009096:	f000 b8b3 	b.w	8009200 <__retarget_lock_acquire_recursive>
 800909a:	bf00      	nop
 800909c:	200002fd 	.word	0x200002fd

080090a0 <__sfp_lock_release>:
 80090a0:	4801      	ldr	r0, [pc, #4]	; (80090a8 <__sfp_lock_release+0x8>)
 80090a2:	f000 b8ae 	b.w	8009202 <__retarget_lock_release_recursive>
 80090a6:	bf00      	nop
 80090a8:	200002fd 	.word	0x200002fd

080090ac <__sinit_lock_acquire>:
 80090ac:	4801      	ldr	r0, [pc, #4]	; (80090b4 <__sinit_lock_acquire+0x8>)
 80090ae:	f000 b8a7 	b.w	8009200 <__retarget_lock_acquire_recursive>
 80090b2:	bf00      	nop
 80090b4:	200002fe 	.word	0x200002fe

080090b8 <__sinit_lock_release>:
 80090b8:	4801      	ldr	r0, [pc, #4]	; (80090c0 <__sinit_lock_release+0x8>)
 80090ba:	f000 b8a2 	b.w	8009202 <__retarget_lock_release_recursive>
 80090be:	bf00      	nop
 80090c0:	200002fe 	.word	0x200002fe

080090c4 <__sinit>:
 80090c4:	b510      	push	{r4, lr}
 80090c6:	4604      	mov	r4, r0
 80090c8:	f7ff fff0 	bl	80090ac <__sinit_lock_acquire>
 80090cc:	69a3      	ldr	r3, [r4, #24]
 80090ce:	b11b      	cbz	r3, 80090d8 <__sinit+0x14>
 80090d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090d4:	f7ff bff0 	b.w	80090b8 <__sinit_lock_release>
 80090d8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80090dc:	6523      	str	r3, [r4, #80]	; 0x50
 80090de:	4b13      	ldr	r3, [pc, #76]	; (800912c <__sinit+0x68>)
 80090e0:	4a13      	ldr	r2, [pc, #76]	; (8009130 <__sinit+0x6c>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	62a2      	str	r2, [r4, #40]	; 0x28
 80090e6:	42a3      	cmp	r3, r4
 80090e8:	bf04      	itt	eq
 80090ea:	2301      	moveq	r3, #1
 80090ec:	61a3      	streq	r3, [r4, #24]
 80090ee:	4620      	mov	r0, r4
 80090f0:	f000 f820 	bl	8009134 <__sfp>
 80090f4:	6060      	str	r0, [r4, #4]
 80090f6:	4620      	mov	r0, r4
 80090f8:	f000 f81c 	bl	8009134 <__sfp>
 80090fc:	60a0      	str	r0, [r4, #8]
 80090fe:	4620      	mov	r0, r4
 8009100:	f000 f818 	bl	8009134 <__sfp>
 8009104:	2200      	movs	r2, #0
 8009106:	60e0      	str	r0, [r4, #12]
 8009108:	2104      	movs	r1, #4
 800910a:	6860      	ldr	r0, [r4, #4]
 800910c:	f7ff ff82 	bl	8009014 <std>
 8009110:	68a0      	ldr	r0, [r4, #8]
 8009112:	2201      	movs	r2, #1
 8009114:	2109      	movs	r1, #9
 8009116:	f7ff ff7d 	bl	8009014 <std>
 800911a:	68e0      	ldr	r0, [r4, #12]
 800911c:	2202      	movs	r2, #2
 800911e:	2112      	movs	r1, #18
 8009120:	f7ff ff78 	bl	8009014 <std>
 8009124:	2301      	movs	r3, #1
 8009126:	61a3      	str	r3, [r4, #24]
 8009128:	e7d2      	b.n	80090d0 <__sinit+0xc>
 800912a:	bf00      	nop
 800912c:	08009504 	.word	0x08009504
 8009130:	0800905d 	.word	0x0800905d

08009134 <__sfp>:
 8009134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009136:	4607      	mov	r7, r0
 8009138:	f7ff ffac 	bl	8009094 <__sfp_lock_acquire>
 800913c:	4b1e      	ldr	r3, [pc, #120]	; (80091b8 <__sfp+0x84>)
 800913e:	681e      	ldr	r6, [r3, #0]
 8009140:	69b3      	ldr	r3, [r6, #24]
 8009142:	b913      	cbnz	r3, 800914a <__sfp+0x16>
 8009144:	4630      	mov	r0, r6
 8009146:	f7ff ffbd 	bl	80090c4 <__sinit>
 800914a:	3648      	adds	r6, #72	; 0x48
 800914c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009150:	3b01      	subs	r3, #1
 8009152:	d503      	bpl.n	800915c <__sfp+0x28>
 8009154:	6833      	ldr	r3, [r6, #0]
 8009156:	b30b      	cbz	r3, 800919c <__sfp+0x68>
 8009158:	6836      	ldr	r6, [r6, #0]
 800915a:	e7f7      	b.n	800914c <__sfp+0x18>
 800915c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009160:	b9d5      	cbnz	r5, 8009198 <__sfp+0x64>
 8009162:	4b16      	ldr	r3, [pc, #88]	; (80091bc <__sfp+0x88>)
 8009164:	60e3      	str	r3, [r4, #12]
 8009166:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800916a:	6665      	str	r5, [r4, #100]	; 0x64
 800916c:	f000 f847 	bl	80091fe <__retarget_lock_init_recursive>
 8009170:	f7ff ff96 	bl	80090a0 <__sfp_lock_release>
 8009174:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009178:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800917c:	6025      	str	r5, [r4, #0]
 800917e:	61a5      	str	r5, [r4, #24]
 8009180:	2208      	movs	r2, #8
 8009182:	4629      	mov	r1, r5
 8009184:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009188:	f7fb fd22 	bl	8004bd0 <memset>
 800918c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009190:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009194:	4620      	mov	r0, r4
 8009196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009198:	3468      	adds	r4, #104	; 0x68
 800919a:	e7d9      	b.n	8009150 <__sfp+0x1c>
 800919c:	2104      	movs	r1, #4
 800919e:	4638      	mov	r0, r7
 80091a0:	f7ff ff62 	bl	8009068 <__sfmoreglue>
 80091a4:	4604      	mov	r4, r0
 80091a6:	6030      	str	r0, [r6, #0]
 80091a8:	2800      	cmp	r0, #0
 80091aa:	d1d5      	bne.n	8009158 <__sfp+0x24>
 80091ac:	f7ff ff78 	bl	80090a0 <__sfp_lock_release>
 80091b0:	230c      	movs	r3, #12
 80091b2:	603b      	str	r3, [r7, #0]
 80091b4:	e7ee      	b.n	8009194 <__sfp+0x60>
 80091b6:	bf00      	nop
 80091b8:	08009504 	.word	0x08009504
 80091bc:	ffff0001 	.word	0xffff0001

080091c0 <_fwalk_reent>:
 80091c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091c4:	4606      	mov	r6, r0
 80091c6:	4688      	mov	r8, r1
 80091c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80091cc:	2700      	movs	r7, #0
 80091ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80091d2:	f1b9 0901 	subs.w	r9, r9, #1
 80091d6:	d505      	bpl.n	80091e4 <_fwalk_reent+0x24>
 80091d8:	6824      	ldr	r4, [r4, #0]
 80091da:	2c00      	cmp	r4, #0
 80091dc:	d1f7      	bne.n	80091ce <_fwalk_reent+0xe>
 80091de:	4638      	mov	r0, r7
 80091e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091e4:	89ab      	ldrh	r3, [r5, #12]
 80091e6:	2b01      	cmp	r3, #1
 80091e8:	d907      	bls.n	80091fa <_fwalk_reent+0x3a>
 80091ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091ee:	3301      	adds	r3, #1
 80091f0:	d003      	beq.n	80091fa <_fwalk_reent+0x3a>
 80091f2:	4629      	mov	r1, r5
 80091f4:	4630      	mov	r0, r6
 80091f6:	47c0      	blx	r8
 80091f8:	4307      	orrs	r7, r0
 80091fa:	3568      	adds	r5, #104	; 0x68
 80091fc:	e7e9      	b.n	80091d2 <_fwalk_reent+0x12>

080091fe <__retarget_lock_init_recursive>:
 80091fe:	4770      	bx	lr

08009200 <__retarget_lock_acquire_recursive>:
 8009200:	4770      	bx	lr

08009202 <__retarget_lock_release_recursive>:
 8009202:	4770      	bx	lr

08009204 <__swhatbuf_r>:
 8009204:	b570      	push	{r4, r5, r6, lr}
 8009206:	460e      	mov	r6, r1
 8009208:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800920c:	2900      	cmp	r1, #0
 800920e:	b096      	sub	sp, #88	; 0x58
 8009210:	4614      	mov	r4, r2
 8009212:	461d      	mov	r5, r3
 8009214:	da08      	bge.n	8009228 <__swhatbuf_r+0x24>
 8009216:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800921a:	2200      	movs	r2, #0
 800921c:	602a      	str	r2, [r5, #0]
 800921e:	061a      	lsls	r2, r3, #24
 8009220:	d410      	bmi.n	8009244 <__swhatbuf_r+0x40>
 8009222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009226:	e00e      	b.n	8009246 <__swhatbuf_r+0x42>
 8009228:	466a      	mov	r2, sp
 800922a:	f000 f903 	bl	8009434 <_fstat_r>
 800922e:	2800      	cmp	r0, #0
 8009230:	dbf1      	blt.n	8009216 <__swhatbuf_r+0x12>
 8009232:	9a01      	ldr	r2, [sp, #4]
 8009234:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009238:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800923c:	425a      	negs	r2, r3
 800923e:	415a      	adcs	r2, r3
 8009240:	602a      	str	r2, [r5, #0]
 8009242:	e7ee      	b.n	8009222 <__swhatbuf_r+0x1e>
 8009244:	2340      	movs	r3, #64	; 0x40
 8009246:	2000      	movs	r0, #0
 8009248:	6023      	str	r3, [r4, #0]
 800924a:	b016      	add	sp, #88	; 0x58
 800924c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009250 <__smakebuf_r>:
 8009250:	898b      	ldrh	r3, [r1, #12]
 8009252:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009254:	079d      	lsls	r5, r3, #30
 8009256:	4606      	mov	r6, r0
 8009258:	460c      	mov	r4, r1
 800925a:	d507      	bpl.n	800926c <__smakebuf_r+0x1c>
 800925c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009260:	6023      	str	r3, [r4, #0]
 8009262:	6123      	str	r3, [r4, #16]
 8009264:	2301      	movs	r3, #1
 8009266:	6163      	str	r3, [r4, #20]
 8009268:	b002      	add	sp, #8
 800926a:	bd70      	pop	{r4, r5, r6, pc}
 800926c:	ab01      	add	r3, sp, #4
 800926e:	466a      	mov	r2, sp
 8009270:	f7ff ffc8 	bl	8009204 <__swhatbuf_r>
 8009274:	9900      	ldr	r1, [sp, #0]
 8009276:	4605      	mov	r5, r0
 8009278:	4630      	mov	r0, r6
 800927a:	f7ff f957 	bl	800852c <_malloc_r>
 800927e:	b948      	cbnz	r0, 8009294 <__smakebuf_r+0x44>
 8009280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009284:	059a      	lsls	r2, r3, #22
 8009286:	d4ef      	bmi.n	8009268 <__smakebuf_r+0x18>
 8009288:	f023 0303 	bic.w	r3, r3, #3
 800928c:	f043 0302 	orr.w	r3, r3, #2
 8009290:	81a3      	strh	r3, [r4, #12]
 8009292:	e7e3      	b.n	800925c <__smakebuf_r+0xc>
 8009294:	4b0d      	ldr	r3, [pc, #52]	; (80092cc <__smakebuf_r+0x7c>)
 8009296:	62b3      	str	r3, [r6, #40]	; 0x28
 8009298:	89a3      	ldrh	r3, [r4, #12]
 800929a:	6020      	str	r0, [r4, #0]
 800929c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092a0:	81a3      	strh	r3, [r4, #12]
 80092a2:	9b00      	ldr	r3, [sp, #0]
 80092a4:	6163      	str	r3, [r4, #20]
 80092a6:	9b01      	ldr	r3, [sp, #4]
 80092a8:	6120      	str	r0, [r4, #16]
 80092aa:	b15b      	cbz	r3, 80092c4 <__smakebuf_r+0x74>
 80092ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80092b0:	4630      	mov	r0, r6
 80092b2:	f000 f8d1 	bl	8009458 <_isatty_r>
 80092b6:	b128      	cbz	r0, 80092c4 <__smakebuf_r+0x74>
 80092b8:	89a3      	ldrh	r3, [r4, #12]
 80092ba:	f023 0303 	bic.w	r3, r3, #3
 80092be:	f043 0301 	orr.w	r3, r3, #1
 80092c2:	81a3      	strh	r3, [r4, #12]
 80092c4:	89a0      	ldrh	r0, [r4, #12]
 80092c6:	4305      	orrs	r5, r0
 80092c8:	81a5      	strh	r5, [r4, #12]
 80092ca:	e7cd      	b.n	8009268 <__smakebuf_r+0x18>
 80092cc:	0800905d 	.word	0x0800905d

080092d0 <_malloc_usable_size_r>:
 80092d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80092d4:	1f18      	subs	r0, r3, #4
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	bfbc      	itt	lt
 80092da:	580b      	ldrlt	r3, [r1, r0]
 80092dc:	18c0      	addlt	r0, r0, r3
 80092de:	4770      	bx	lr

080092e0 <_raise_r>:
 80092e0:	291f      	cmp	r1, #31
 80092e2:	b538      	push	{r3, r4, r5, lr}
 80092e4:	4604      	mov	r4, r0
 80092e6:	460d      	mov	r5, r1
 80092e8:	d904      	bls.n	80092f4 <_raise_r+0x14>
 80092ea:	2316      	movs	r3, #22
 80092ec:	6003      	str	r3, [r0, #0]
 80092ee:	f04f 30ff 	mov.w	r0, #4294967295
 80092f2:	bd38      	pop	{r3, r4, r5, pc}
 80092f4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80092f6:	b112      	cbz	r2, 80092fe <_raise_r+0x1e>
 80092f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80092fc:	b94b      	cbnz	r3, 8009312 <_raise_r+0x32>
 80092fe:	4620      	mov	r0, r4
 8009300:	f000 f830 	bl	8009364 <_getpid_r>
 8009304:	462a      	mov	r2, r5
 8009306:	4601      	mov	r1, r0
 8009308:	4620      	mov	r0, r4
 800930a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800930e:	f000 b817 	b.w	8009340 <_kill_r>
 8009312:	2b01      	cmp	r3, #1
 8009314:	d00a      	beq.n	800932c <_raise_r+0x4c>
 8009316:	1c59      	adds	r1, r3, #1
 8009318:	d103      	bne.n	8009322 <_raise_r+0x42>
 800931a:	2316      	movs	r3, #22
 800931c:	6003      	str	r3, [r0, #0]
 800931e:	2001      	movs	r0, #1
 8009320:	e7e7      	b.n	80092f2 <_raise_r+0x12>
 8009322:	2400      	movs	r4, #0
 8009324:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009328:	4628      	mov	r0, r5
 800932a:	4798      	blx	r3
 800932c:	2000      	movs	r0, #0
 800932e:	e7e0      	b.n	80092f2 <_raise_r+0x12>

08009330 <raise>:
 8009330:	4b02      	ldr	r3, [pc, #8]	; (800933c <raise+0xc>)
 8009332:	4601      	mov	r1, r0
 8009334:	6818      	ldr	r0, [r3, #0]
 8009336:	f7ff bfd3 	b.w	80092e0 <_raise_r>
 800933a:	bf00      	nop
 800933c:	2000000c 	.word	0x2000000c

08009340 <_kill_r>:
 8009340:	b538      	push	{r3, r4, r5, lr}
 8009342:	4d07      	ldr	r5, [pc, #28]	; (8009360 <_kill_r+0x20>)
 8009344:	2300      	movs	r3, #0
 8009346:	4604      	mov	r4, r0
 8009348:	4608      	mov	r0, r1
 800934a:	4611      	mov	r1, r2
 800934c:	602b      	str	r3, [r5, #0]
 800934e:	f7f8 f9b9 	bl	80016c4 <_kill>
 8009352:	1c43      	adds	r3, r0, #1
 8009354:	d102      	bne.n	800935c <_kill_r+0x1c>
 8009356:	682b      	ldr	r3, [r5, #0]
 8009358:	b103      	cbz	r3, 800935c <_kill_r+0x1c>
 800935a:	6023      	str	r3, [r4, #0]
 800935c:	bd38      	pop	{r3, r4, r5, pc}
 800935e:	bf00      	nop
 8009360:	200002f8 	.word	0x200002f8

08009364 <_getpid_r>:
 8009364:	f7f8 b9a6 	b.w	80016b4 <_getpid>

08009368 <__sread>:
 8009368:	b510      	push	{r4, lr}
 800936a:	460c      	mov	r4, r1
 800936c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009370:	f000 f894 	bl	800949c <_read_r>
 8009374:	2800      	cmp	r0, #0
 8009376:	bfab      	itete	ge
 8009378:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800937a:	89a3      	ldrhlt	r3, [r4, #12]
 800937c:	181b      	addge	r3, r3, r0
 800937e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009382:	bfac      	ite	ge
 8009384:	6563      	strge	r3, [r4, #84]	; 0x54
 8009386:	81a3      	strhlt	r3, [r4, #12]
 8009388:	bd10      	pop	{r4, pc}

0800938a <__swrite>:
 800938a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800938e:	461f      	mov	r7, r3
 8009390:	898b      	ldrh	r3, [r1, #12]
 8009392:	05db      	lsls	r3, r3, #23
 8009394:	4605      	mov	r5, r0
 8009396:	460c      	mov	r4, r1
 8009398:	4616      	mov	r6, r2
 800939a:	d505      	bpl.n	80093a8 <__swrite+0x1e>
 800939c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093a0:	2302      	movs	r3, #2
 80093a2:	2200      	movs	r2, #0
 80093a4:	f000 f868 	bl	8009478 <_lseek_r>
 80093a8:	89a3      	ldrh	r3, [r4, #12]
 80093aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80093b2:	81a3      	strh	r3, [r4, #12]
 80093b4:	4632      	mov	r2, r6
 80093b6:	463b      	mov	r3, r7
 80093b8:	4628      	mov	r0, r5
 80093ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093be:	f000 b817 	b.w	80093f0 <_write_r>

080093c2 <__sseek>:
 80093c2:	b510      	push	{r4, lr}
 80093c4:	460c      	mov	r4, r1
 80093c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093ca:	f000 f855 	bl	8009478 <_lseek_r>
 80093ce:	1c43      	adds	r3, r0, #1
 80093d0:	89a3      	ldrh	r3, [r4, #12]
 80093d2:	bf15      	itete	ne
 80093d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80093d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80093da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80093de:	81a3      	strheq	r3, [r4, #12]
 80093e0:	bf18      	it	ne
 80093e2:	81a3      	strhne	r3, [r4, #12]
 80093e4:	bd10      	pop	{r4, pc}

080093e6 <__sclose>:
 80093e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093ea:	f000 b813 	b.w	8009414 <_close_r>
	...

080093f0 <_write_r>:
 80093f0:	b538      	push	{r3, r4, r5, lr}
 80093f2:	4d07      	ldr	r5, [pc, #28]	; (8009410 <_write_r+0x20>)
 80093f4:	4604      	mov	r4, r0
 80093f6:	4608      	mov	r0, r1
 80093f8:	4611      	mov	r1, r2
 80093fa:	2200      	movs	r2, #0
 80093fc:	602a      	str	r2, [r5, #0]
 80093fe:	461a      	mov	r2, r3
 8009400:	f7f8 f997 	bl	8001732 <_write>
 8009404:	1c43      	adds	r3, r0, #1
 8009406:	d102      	bne.n	800940e <_write_r+0x1e>
 8009408:	682b      	ldr	r3, [r5, #0]
 800940a:	b103      	cbz	r3, 800940e <_write_r+0x1e>
 800940c:	6023      	str	r3, [r4, #0]
 800940e:	bd38      	pop	{r3, r4, r5, pc}
 8009410:	200002f8 	.word	0x200002f8

08009414 <_close_r>:
 8009414:	b538      	push	{r3, r4, r5, lr}
 8009416:	4d06      	ldr	r5, [pc, #24]	; (8009430 <_close_r+0x1c>)
 8009418:	2300      	movs	r3, #0
 800941a:	4604      	mov	r4, r0
 800941c:	4608      	mov	r0, r1
 800941e:	602b      	str	r3, [r5, #0]
 8009420:	f7f8 f9a3 	bl	800176a <_close>
 8009424:	1c43      	adds	r3, r0, #1
 8009426:	d102      	bne.n	800942e <_close_r+0x1a>
 8009428:	682b      	ldr	r3, [r5, #0]
 800942a:	b103      	cbz	r3, 800942e <_close_r+0x1a>
 800942c:	6023      	str	r3, [r4, #0]
 800942e:	bd38      	pop	{r3, r4, r5, pc}
 8009430:	200002f8 	.word	0x200002f8

08009434 <_fstat_r>:
 8009434:	b538      	push	{r3, r4, r5, lr}
 8009436:	4d07      	ldr	r5, [pc, #28]	; (8009454 <_fstat_r+0x20>)
 8009438:	2300      	movs	r3, #0
 800943a:	4604      	mov	r4, r0
 800943c:	4608      	mov	r0, r1
 800943e:	4611      	mov	r1, r2
 8009440:	602b      	str	r3, [r5, #0]
 8009442:	f7f8 f99e 	bl	8001782 <_fstat>
 8009446:	1c43      	adds	r3, r0, #1
 8009448:	d102      	bne.n	8009450 <_fstat_r+0x1c>
 800944a:	682b      	ldr	r3, [r5, #0]
 800944c:	b103      	cbz	r3, 8009450 <_fstat_r+0x1c>
 800944e:	6023      	str	r3, [r4, #0]
 8009450:	bd38      	pop	{r3, r4, r5, pc}
 8009452:	bf00      	nop
 8009454:	200002f8 	.word	0x200002f8

08009458 <_isatty_r>:
 8009458:	b538      	push	{r3, r4, r5, lr}
 800945a:	4d06      	ldr	r5, [pc, #24]	; (8009474 <_isatty_r+0x1c>)
 800945c:	2300      	movs	r3, #0
 800945e:	4604      	mov	r4, r0
 8009460:	4608      	mov	r0, r1
 8009462:	602b      	str	r3, [r5, #0]
 8009464:	f7f8 f99d 	bl	80017a2 <_isatty>
 8009468:	1c43      	adds	r3, r0, #1
 800946a:	d102      	bne.n	8009472 <_isatty_r+0x1a>
 800946c:	682b      	ldr	r3, [r5, #0]
 800946e:	b103      	cbz	r3, 8009472 <_isatty_r+0x1a>
 8009470:	6023      	str	r3, [r4, #0]
 8009472:	bd38      	pop	{r3, r4, r5, pc}
 8009474:	200002f8 	.word	0x200002f8

08009478 <_lseek_r>:
 8009478:	b538      	push	{r3, r4, r5, lr}
 800947a:	4d07      	ldr	r5, [pc, #28]	; (8009498 <_lseek_r+0x20>)
 800947c:	4604      	mov	r4, r0
 800947e:	4608      	mov	r0, r1
 8009480:	4611      	mov	r1, r2
 8009482:	2200      	movs	r2, #0
 8009484:	602a      	str	r2, [r5, #0]
 8009486:	461a      	mov	r2, r3
 8009488:	f7f8 f996 	bl	80017b8 <_lseek>
 800948c:	1c43      	adds	r3, r0, #1
 800948e:	d102      	bne.n	8009496 <_lseek_r+0x1e>
 8009490:	682b      	ldr	r3, [r5, #0]
 8009492:	b103      	cbz	r3, 8009496 <_lseek_r+0x1e>
 8009494:	6023      	str	r3, [r4, #0]
 8009496:	bd38      	pop	{r3, r4, r5, pc}
 8009498:	200002f8 	.word	0x200002f8

0800949c <_read_r>:
 800949c:	b538      	push	{r3, r4, r5, lr}
 800949e:	4d07      	ldr	r5, [pc, #28]	; (80094bc <_read_r+0x20>)
 80094a0:	4604      	mov	r4, r0
 80094a2:	4608      	mov	r0, r1
 80094a4:	4611      	mov	r1, r2
 80094a6:	2200      	movs	r2, #0
 80094a8:	602a      	str	r2, [r5, #0]
 80094aa:	461a      	mov	r2, r3
 80094ac:	f7f8 f924 	bl	80016f8 <_read>
 80094b0:	1c43      	adds	r3, r0, #1
 80094b2:	d102      	bne.n	80094ba <_read_r+0x1e>
 80094b4:	682b      	ldr	r3, [r5, #0]
 80094b6:	b103      	cbz	r3, 80094ba <_read_r+0x1e>
 80094b8:	6023      	str	r3, [r4, #0]
 80094ba:	bd38      	pop	{r3, r4, r5, pc}
 80094bc:	200002f8 	.word	0x200002f8

080094c0 <_init>:
 80094c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094c2:	bf00      	nop
 80094c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094c6:	bc08      	pop	{r3}
 80094c8:	469e      	mov	lr, r3
 80094ca:	4770      	bx	lr

080094cc <_fini>:
 80094cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094ce:	bf00      	nop
 80094d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094d2:	bc08      	pop	{r3}
 80094d4:	469e      	mov	lr, r3
 80094d6:	4770      	bx	lr
