
photoresistor_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007830  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000404  08007a00  08007a00  00017a00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e04  08007e04  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007e04  08007e04  00017e04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e0c  08007e0c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e0c  08007e0c  00017e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e10  08007e10  00017e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007e14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  200001e0  08007ff4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000300  08007ff4  00020300  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b409  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cfa  00000000  00000000  0002b619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008f8  00000000  00000000  0002d318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000840  00000000  00000000  0002dc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000231ce  00000000  00000000  0002e450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb53  00000000  00000000  0005161e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6612  00000000  00000000  0005d171  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00133783  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035b0  00000000  00000000  001337d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080079e8 	.word	0x080079e8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	080079e8 	.word	0x080079e8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	0000      	movs	r0, r0
	...

08000f90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000f94:	b0a1      	sub	sp, #132	; 0x84
 8000f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	char msg[100];
	uint16_t rawValues[NUMBER_OF_SENSORS];
 8000f98:	4b6d      	ldr	r3, [pc, #436]	; (8001150 <main+0x1c0>)
 8000f9a:	881e      	ldrh	r6, [r3, #0]
 8000f9c:	4633      	mov	r3, r6
 8000f9e:	3b01      	subs	r3, #1
 8000fa0:	673b      	str	r3, [r7, #112]	; 0x70
 8000fa2:	b2b3      	uxth	r3, r6
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	469a      	mov	sl, r3
 8000fa8:	4693      	mov	fp, r2
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	f04f 0300 	mov.w	r3, #0
 8000fb2:	ea4f 130b 	mov.w	r3, fp, lsl #4
 8000fb6:	ea43 731a 	orr.w	r3, r3, sl, lsr #28
 8000fba:	ea4f 120a 	mov.w	r2, sl, lsl #4
 8000fbe:	b2b3      	uxth	r3, r6
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	4611      	mov	r1, r2
 8000fc6:	f04f 0200 	mov.w	r2, #0
 8000fca:	f04f 0300 	mov.w	r3, #0
 8000fce:	010b      	lsls	r3, r1, #4
 8000fd0:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8000fd4:	0102      	lsls	r2, r0, #4
 8000fd6:	4633      	mov	r3, r6
 8000fd8:	005b      	lsls	r3, r3, #1
 8000fda:	3307      	adds	r3, #7
 8000fdc:	08db      	lsrs	r3, r3, #3
 8000fde:	00db      	lsls	r3, r3, #3
 8000fe0:	ebad 0d03 	sub.w	sp, sp, r3
 8000fe4:	466b      	mov	r3, sp
 8000fe6:	3301      	adds	r3, #1
 8000fe8:	085b      	lsrs	r3, r3, #1
 8000fea:	005b      	lsls	r3, r3, #1
 8000fec:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fee:	f000 fc83 	bl	80018f8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ff2:	f000 f8b7 	bl	8001164 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff6:	f000 f9cd 	bl	8001394 <MX_GPIO_Init>
  MX_DMA_Init();
 8000ffa:	f000 f9ab 	bl	8001354 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000ffe:	f000 f97f 	bl	8001300 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8001002:	f000 f91d 	bl	8001240 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)rawValues, NUMBER_OF_SENSORS);
 8001006:	4b52      	ldr	r3, [pc, #328]	; (8001150 <main+0x1c0>)
 8001008:	881b      	ldrh	r3, [r3, #0]
 800100a:	461a      	mov	r2, r3
 800100c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800100e:	4851      	ldr	r0, [pc, #324]	; (8001154 <main+0x1c4>)
 8001010:	f000 fd28 	bl	8001a64 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
 8001014:	466b      	mov	r3, sp
 8001016:	469a      	mov	sl, r3
	  float voltages[NUMBER_OF_SENSORS];
 8001018:	4b4d      	ldr	r3, [pc, #308]	; (8001150 <main+0x1c0>)
 800101a:	8819      	ldrh	r1, [r3, #0]
 800101c:	460b      	mov	r3, r1
 800101e:	3b01      	subs	r3, #1
 8001020:	66bb      	str	r3, [r7, #104]	; 0x68
 8001022:	b28b      	uxth	r3, r1
 8001024:	2200      	movs	r2, #0
 8001026:	461c      	mov	r4, r3
 8001028:	4615      	mov	r5, r2
 800102a:	f04f 0200 	mov.w	r2, #0
 800102e:	f04f 0300 	mov.w	r3, #0
 8001032:	016b      	lsls	r3, r5, #5
 8001034:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8001038:	0162      	lsls	r2, r4, #5
 800103a:	b28b      	uxth	r3, r1
 800103c:	2200      	movs	r2, #0
 800103e:	4698      	mov	r8, r3
 8001040:	4691      	mov	r9, r2
 8001042:	f04f 0200 	mov.w	r2, #0
 8001046:	f04f 0300 	mov.w	r3, #0
 800104a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 800104e:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8001052:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8001056:	460b      	mov	r3, r1
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	3307      	adds	r3, #7
 800105c:	08db      	lsrs	r3, r3, #3
 800105e:	00db      	lsls	r3, r3, #3
 8001060:	ebad 0d03 	sub.w	sp, sp, r3
 8001064:	466b      	mov	r3, sp
 8001066:	3303      	adds	r3, #3
 8001068:	089b      	lsrs	r3, r3, #2
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	667b      	str	r3, [r7, #100]	; 0x64
	  for (int sensor_id = 0; sensor_id < NUMBER_OF_SENSORS; sensor_id++)
 800106e:	2300      	movs	r3, #0
 8001070:	677b      	str	r3, [r7, #116]	; 0x74
 8001072:	e023      	b.n	80010bc <main+0x12c>
	  {
		  voltages[sensor_id] = rawValues[sensor_id] * 3.3/ 4095;
 8001074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001076:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001078:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff fa71 	bl	8000564 <__aeabi_i2d>
 8001082:	a32f      	add	r3, pc, #188	; (adr r3, 8001140 <main+0x1b0>)
 8001084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001088:	f7ff fad6 	bl	8000638 <__aeabi_dmul>
 800108c:	4602      	mov	r2, r0
 800108e:	460b      	mov	r3, r1
 8001090:	4610      	mov	r0, r2
 8001092:	4619      	mov	r1, r3
 8001094:	a32c      	add	r3, pc, #176	; (adr r3, 8001148 <main+0x1b8>)
 8001096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800109a:	f7ff fbf7 	bl	800088c <__aeabi_ddiv>
 800109e:	4602      	mov	r2, r0
 80010a0:	460b      	mov	r3, r1
 80010a2:	4610      	mov	r0, r2
 80010a4:	4619      	mov	r1, r3
 80010a6:	f7ff fd9f 	bl	8000be8 <__aeabi_d2f>
 80010aa:	4601      	mov	r1, r0
 80010ac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80010ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	4413      	add	r3, r2
 80010b4:	6019      	str	r1, [r3, #0]
	  for (int sensor_id = 0; sensor_id < NUMBER_OF_SENSORS; sensor_id++)
 80010b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80010b8:	3301      	adds	r3, #1
 80010ba:	677b      	str	r3, [r7, #116]	; 0x74
 80010bc:	4b24      	ldr	r3, [pc, #144]	; (8001150 <main+0x1c0>)
 80010be:	881b      	ldrh	r3, [r3, #0]
 80010c0:	461a      	mov	r2, r3
 80010c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80010c4:	4293      	cmp	r3, r2
 80010c6:	dbd5      	blt.n	8001074 <main+0xe4>

	  }

	  int bytes_num = 0; //number of bytes that are written in the buffer
 80010c8:	2300      	movs	r3, #0
 80010ca:	67bb      	str	r3, [r7, #120]	; 0x78
	  for (int sensor_id = 0; sensor_id < NUMBER_OF_SENSORS; sensor_id++)
 80010cc:	2300      	movs	r3, #0
 80010ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80010d0:	e017      	b.n	8001102 <main+0x172>
	  {
		  bytes_num += sprintf(msg+bytes_num, "%.4f, ", voltages[sensor_id]);
 80010d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80010d4:	463a      	mov	r2, r7
 80010d6:	18d6      	adds	r6, r2, r3
 80010d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80010da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	4413      	add	r3, r2
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fa50 	bl	8000588 <__aeabi_f2d>
 80010e8:	4602      	mov	r2, r0
 80010ea:	460b      	mov	r3, r1
 80010ec:	491a      	ldr	r1, [pc, #104]	; (8001158 <main+0x1c8>)
 80010ee:	4630      	mov	r0, r6
 80010f0:	f004 fa00 	bl	80054f4 <siprintf>
 80010f4:	4602      	mov	r2, r0
 80010f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80010f8:	4413      	add	r3, r2
 80010fa:	67bb      	str	r3, [r7, #120]	; 0x78
	  for (int sensor_id = 0; sensor_id < NUMBER_OF_SENSORS; sensor_id++)
 80010fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80010fe:	3301      	adds	r3, #1
 8001100:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001102:	4b13      	ldr	r3, [pc, #76]	; (8001150 <main+0x1c0>)
 8001104:	881b      	ldrh	r3, [r3, #0]
 8001106:	461a      	mov	r2, r3
 8001108:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800110a:	4293      	cmp	r3, r2
 800110c:	dbe1      	blt.n	80010d2 <main+0x142>

	  }
	  bytes_num += sprintf(msg+bytes_num, "\n");
 800110e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001110:	463a      	mov	r2, r7
 8001112:	4413      	add	r3, r2
 8001114:	4911      	ldr	r1, [pc, #68]	; (800115c <main+0x1cc>)
 8001116:	4618      	mov	r0, r3
 8001118:	f004 f9ec 	bl	80054f4 <siprintf>
 800111c:	4602      	mov	r2, r0
 800111e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001120:	4413      	add	r3, r2
 8001122:	67bb      	str	r3, [r7, #120]	; 0x78
	  HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001124:	463b      	mov	r3, r7
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff f872 	bl	8000210 <strlen>
 800112c:	4603      	mov	r3, r0
 800112e:	b29a      	uxth	r2, r3
 8001130:	4639      	mov	r1, r7
 8001132:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001136:	480a      	ldr	r0, [pc, #40]	; (8001160 <main+0x1d0>)
 8001138:	f002 fd79 	bl	8003c2e <HAL_UART_Transmit>
 800113c:	46d5      	mov	sp, sl
  {
 800113e:	e769      	b.n	8001014 <main+0x84>
 8001140:	66666666 	.word	0x66666666
 8001144:	400a6666 	.word	0x400a6666
 8001148:	00000000 	.word	0x00000000
 800114c:	40affe00 	.word	0x40affe00
 8001150:	20000000 	.word	0x20000000
 8001154:	200001fc 	.word	0x200001fc
 8001158:	08007a00 	.word	0x08007a00
 800115c:	08007a08 	.word	0x08007a08
 8001160:	200002a4 	.word	0x200002a4

08001164 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b094      	sub	sp, #80	; 0x50
 8001168:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	2234      	movs	r2, #52	; 0x34
 8001170:	2100      	movs	r1, #0
 8001172:	4618      	mov	r0, r3
 8001174:	f003 fd4c 	bl	8004c10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001178:	f107 0308 	add.w	r3, r7, #8
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001188:	2300      	movs	r3, #0
 800118a:	607b      	str	r3, [r7, #4]
 800118c:	4b2a      	ldr	r3, [pc, #168]	; (8001238 <SystemClock_Config+0xd4>)
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	4a29      	ldr	r2, [pc, #164]	; (8001238 <SystemClock_Config+0xd4>)
 8001192:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001196:	6413      	str	r3, [r2, #64]	; 0x40
 8001198:	4b27      	ldr	r3, [pc, #156]	; (8001238 <SystemClock_Config+0xd4>)
 800119a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80011a4:	2300      	movs	r3, #0
 80011a6:	603b      	str	r3, [r7, #0]
 80011a8:	4b24      	ldr	r3, [pc, #144]	; (800123c <SystemClock_Config+0xd8>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011b0:	4a22      	ldr	r2, [pc, #136]	; (800123c <SystemClock_Config+0xd8>)
 80011b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011b6:	6013      	str	r3, [r2, #0]
 80011b8:	4b20      	ldr	r3, [pc, #128]	; (800123c <SystemClock_Config+0xd8>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011c0:	603b      	str	r3, [r7, #0]
 80011c2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011c4:	2302      	movs	r3, #2
 80011c6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011c8:	2301      	movs	r3, #1
 80011ca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011cc:	2310      	movs	r3, #16
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d0:	2302      	movs	r3, #2
 80011d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011d4:	2300      	movs	r3, #0
 80011d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80011d8:	2310      	movs	r3, #16
 80011da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011e0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80011e2:	2304      	movs	r3, #4
 80011e4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80011e6:	2302      	movs	r3, #2
 80011e8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80011ea:	2302      	movs	r3, #2
 80011ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ee:	f107 031c 	add.w	r3, r7, #28
 80011f2:	4618      	mov	r0, r3
 80011f4:	f002 fa30 	bl	8003658 <HAL_RCC_OscConfig>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80011fe:	f000 f945 	bl	800148c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001202:	230f      	movs	r3, #15
 8001204:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001206:	2302      	movs	r3, #2
 8001208:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800120a:	2300      	movs	r3, #0
 800120c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800120e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001212:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001218:	f107 0308 	add.w	r3, r7, #8
 800121c:	2102      	movs	r1, #2
 800121e:	4618      	mov	r0, r3
 8001220:	f001 fed0 	bl	8002fc4 <HAL_RCC_ClockConfig>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800122a:	f000 f92f 	bl	800148c <Error_Handler>
  }
}
 800122e:	bf00      	nop
 8001230:	3750      	adds	r7, #80	; 0x50
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	40023800 	.word	0x40023800
 800123c:	40007000 	.word	0x40007000

08001240 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001246:	463b      	mov	r3, r7
 8001248:	2200      	movs	r2, #0
 800124a:	601a      	str	r2, [r3, #0]
 800124c:	605a      	str	r2, [r3, #4]
 800124e:	609a      	str	r2, [r3, #8]
 8001250:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */
  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001252:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <MX_ADC1_Init+0xb4>)
 8001254:	4a28      	ldr	r2, [pc, #160]	; (80012f8 <MX_ADC1_Init+0xb8>)
 8001256:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV6;
 8001258:	4b26      	ldr	r3, [pc, #152]	; (80012f4 <MX_ADC1_Init+0xb4>)
 800125a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800125e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001260:	4b24      	ldr	r3, [pc, #144]	; (80012f4 <MX_ADC1_Init+0xb4>)
 8001262:	2200      	movs	r2, #0
 8001264:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001266:	4b23      	ldr	r3, [pc, #140]	; (80012f4 <MX_ADC1_Init+0xb4>)
 8001268:	2201      	movs	r2, #1
 800126a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800126c:	4b21      	ldr	r3, [pc, #132]	; (80012f4 <MX_ADC1_Init+0xb4>)
 800126e:	2201      	movs	r2, #1
 8001270:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001272:	4b20      	ldr	r3, [pc, #128]	; (80012f4 <MX_ADC1_Init+0xb4>)
 8001274:	2200      	movs	r2, #0
 8001276:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800127a:	4b1e      	ldr	r3, [pc, #120]	; (80012f4 <MX_ADC1_Init+0xb4>)
 800127c:	2200      	movs	r2, #0
 800127e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001280:	4b1c      	ldr	r3, [pc, #112]	; (80012f4 <MX_ADC1_Init+0xb4>)
 8001282:	4a1e      	ldr	r2, [pc, #120]	; (80012fc <MX_ADC1_Init+0xbc>)
 8001284:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001286:	4b1b      	ldr	r3, [pc, #108]	; (80012f4 <MX_ADC1_Init+0xb4>)
 8001288:	2200      	movs	r2, #0
 800128a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800128c:	4b19      	ldr	r3, [pc, #100]	; (80012f4 <MX_ADC1_Init+0xb4>)
 800128e:	2202      	movs	r2, #2
 8001290:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001292:	4b18      	ldr	r3, [pc, #96]	; (80012f4 <MX_ADC1_Init+0xb4>)
 8001294:	2201      	movs	r2, #1
 8001296:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800129a:	4b16      	ldr	r3, [pc, #88]	; (80012f4 <MX_ADC1_Init+0xb4>)
 800129c:	2201      	movs	r2, #1
 800129e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012a0:	4814      	ldr	r0, [pc, #80]	; (80012f4 <MX_ADC1_Init+0xb4>)
 80012a2:	f000 fb9b 	bl	80019dc <HAL_ADC_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80012ac:	f000 f8ee 	bl	800148c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80012b0:	230a      	movs	r3, #10
 80012b2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012b4:	2301      	movs	r3, #1
 80012b6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80012b8:	2303      	movs	r3, #3
 80012ba:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012bc:	463b      	mov	r3, r7
 80012be:	4619      	mov	r1, r3
 80012c0:	480c      	ldr	r0, [pc, #48]	; (80012f4 <MX_ADC1_Init+0xb4>)
 80012c2:	f000 fcf3 	bl	8001cac <HAL_ADC_ConfigChannel>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80012cc:	f000 f8de 	bl	800148c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80012d0:	230b      	movs	r3, #11
 80012d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80012d4:	2302      	movs	r3, #2
 80012d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012d8:	463b      	mov	r3, r7
 80012da:	4619      	mov	r1, r3
 80012dc:	4805      	ldr	r0, [pc, #20]	; (80012f4 <MX_ADC1_Init+0xb4>)
 80012de:	f000 fce5 	bl	8001cac <HAL_ADC_ConfigChannel>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80012e8:	f000 f8d0 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */
  /* USER CODE END ADC1_Init 2 */

}
 80012ec:	bf00      	nop
 80012ee:	3710      	adds	r7, #16
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	200001fc 	.word	0x200001fc
 80012f8:	40012000 	.word	0x40012000
 80012fc:	0f000001 	.word	0x0f000001

08001300 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <MX_USART2_UART_Init+0x4c>)
 8001306:	4a12      	ldr	r2, [pc, #72]	; (8001350 <MX_USART2_UART_Init+0x50>)
 8001308:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <MX_USART2_UART_Init+0x4c>)
 800130c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001310:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001312:	4b0e      	ldr	r3, [pc, #56]	; (800134c <MX_USART2_UART_Init+0x4c>)
 8001314:	2200      	movs	r2, #0
 8001316:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <MX_USART2_UART_Init+0x4c>)
 800131a:	2200      	movs	r2, #0
 800131c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800131e:	4b0b      	ldr	r3, [pc, #44]	; (800134c <MX_USART2_UART_Init+0x4c>)
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <MX_USART2_UART_Init+0x4c>)
 8001326:	220c      	movs	r2, #12
 8001328:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800132a:	4b08      	ldr	r3, [pc, #32]	; (800134c <MX_USART2_UART_Init+0x4c>)
 800132c:	2200      	movs	r2, #0
 800132e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001330:	4b06      	ldr	r3, [pc, #24]	; (800134c <MX_USART2_UART_Init+0x4c>)
 8001332:	2200      	movs	r2, #0
 8001334:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001336:	4805      	ldr	r0, [pc, #20]	; (800134c <MX_USART2_UART_Init+0x4c>)
 8001338:	f002 fc2c 	bl	8003b94 <HAL_UART_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001342:	f000 f8a3 	bl	800148c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200002a4 	.word	0x200002a4
 8001350:	40004400 	.word	0x40004400

08001354 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800135a:	2300      	movs	r3, #0
 800135c:	607b      	str	r3, [r7, #4]
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_DMA_Init+0x3c>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	4a0b      	ldr	r2, [pc, #44]	; (8001390 <MX_DMA_Init+0x3c>)
 8001364:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001368:	6313      	str	r3, [r2, #48]	; 0x30
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_DMA_Init+0x3c>)
 800136c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001372:	607b      	str	r3, [r7, #4]
 8001374:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001376:	2200      	movs	r2, #0
 8001378:	2100      	movs	r1, #0
 800137a:	2038      	movs	r0, #56	; 0x38
 800137c:	f001 f821 	bl	80023c2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001380:	2038      	movs	r0, #56	; 0x38
 8001382:	f001 f83a 	bl	80023fa <HAL_NVIC_EnableIRQ>

}
 8001386:	bf00      	nop
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800

08001394 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08a      	sub	sp, #40	; 0x28
 8001398:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139a:	f107 0314 	add.w	r3, r7, #20
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
 80013a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	4b2d      	ldr	r3, [pc, #180]	; (8001464 <MX_GPIO_Init+0xd0>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a2c      	ldr	r2, [pc, #176]	; (8001464 <MX_GPIO_Init+0xd0>)
 80013b4:	f043 0304 	orr.w	r3, r3, #4
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b2a      	ldr	r3, [pc, #168]	; (8001464 <MX_GPIO_Init+0xd0>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0304 	and.w	r3, r3, #4
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4b26      	ldr	r3, [pc, #152]	; (8001464 <MX_GPIO_Init+0xd0>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a25      	ldr	r2, [pc, #148]	; (8001464 <MX_GPIO_Init+0xd0>)
 80013d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b23      	ldr	r3, [pc, #140]	; (8001464 <MX_GPIO_Init+0xd0>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	60bb      	str	r3, [r7, #8]
 80013e6:	4b1f      	ldr	r3, [pc, #124]	; (8001464 <MX_GPIO_Init+0xd0>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ea:	4a1e      	ldr	r2, [pc, #120]	; (8001464 <MX_GPIO_Init+0xd0>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6313      	str	r3, [r2, #48]	; 0x30
 80013f2:	4b1c      	ldr	r3, [pc, #112]	; (8001464 <MX_GPIO_Init+0xd0>)
 80013f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	60bb      	str	r3, [r7, #8]
 80013fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]
 8001402:	4b18      	ldr	r3, [pc, #96]	; (8001464 <MX_GPIO_Init+0xd0>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a17      	ldr	r2, [pc, #92]	; (8001464 <MX_GPIO_Init+0xd0>)
 8001408:	f043 0302 	orr.w	r3, r3, #2
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b15      	ldr	r3, [pc, #84]	; (8001464 <MX_GPIO_Init+0xd0>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0302 	and.w	r3, r3, #2
 8001416:	607b      	str	r3, [r7, #4]
 8001418:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800141a:	2200      	movs	r2, #0
 800141c:	2120      	movs	r1, #32
 800141e:	4812      	ldr	r0, [pc, #72]	; (8001468 <MX_GPIO_Init+0xd4>)
 8001420:	f001 fd9c 	bl	8002f5c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001424:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001428:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800142a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800142e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001434:	f107 0314 	add.w	r3, r7, #20
 8001438:	4619      	mov	r1, r3
 800143a:	480c      	ldr	r0, [pc, #48]	; (800146c <MX_GPIO_Init+0xd8>)
 800143c:	f001 fbfa 	bl	8002c34 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001440:	2320      	movs	r3, #32
 8001442:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001444:	2301      	movs	r3, #1
 8001446:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001448:	2300      	movs	r3, #0
 800144a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144c:	2300      	movs	r3, #0
 800144e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001450:	f107 0314 	add.w	r3, r7, #20
 8001454:	4619      	mov	r1, r3
 8001456:	4804      	ldr	r0, [pc, #16]	; (8001468 <MX_GPIO_Init+0xd4>)
 8001458:	f001 fbec 	bl	8002c34 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800145c:	bf00      	nop
 800145e:	3728      	adds	r7, #40	; 0x28
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40023800 	.word	0x40023800
 8001468:	40020000 	.word	0x40020000
 800146c:	40020800 	.word	0x40020800

08001470 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001478:	2120      	movs	r1, #32
 800147a:	4803      	ldr	r0, [pc, #12]	; (8001488 <HAL_ADC_ConvCpltCallback+0x18>)
 800147c:	f001 fd87 	bl	8002f8e <HAL_GPIO_TogglePin>
}
 8001480:	bf00      	nop
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40020000 	.word	0x40020000

0800148c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001490:	b672      	cpsid	i
}
 8001492:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001494:	e7fe      	b.n	8001494 <Error_Handler+0x8>
	...

08001498 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	607b      	str	r3, [r7, #4]
 80014a2:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <HAL_MspInit+0x4c>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	4a0f      	ldr	r2, [pc, #60]	; (80014e4 <HAL_MspInit+0x4c>)
 80014a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014ac:	6453      	str	r3, [r2, #68]	; 0x44
 80014ae:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <HAL_MspInit+0x4c>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	603b      	str	r3, [r7, #0]
 80014be:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <HAL_MspInit+0x4c>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	4a08      	ldr	r2, [pc, #32]	; (80014e4 <HAL_MspInit+0x4c>)
 80014c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ca:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <HAL_MspInit+0x4c>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d2:	603b      	str	r3, [r7, #0]
 80014d4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014d6:	2007      	movs	r0, #7
 80014d8:	f000 ff68 	bl	80023ac <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014dc:	bf00      	nop
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40023800 	.word	0x40023800

080014e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b08a      	sub	sp, #40	; 0x28
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f0:	f107 0314 	add.w	r3, r7, #20
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
 80014fc:	60da      	str	r2, [r3, #12]
 80014fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	4a2f      	ldr	r2, [pc, #188]	; (80015c4 <HAL_ADC_MspInit+0xdc>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d157      	bne.n	80015ba <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	613b      	str	r3, [r7, #16]
 800150e:	4b2e      	ldr	r3, [pc, #184]	; (80015c8 <HAL_ADC_MspInit+0xe0>)
 8001510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001512:	4a2d      	ldr	r2, [pc, #180]	; (80015c8 <HAL_ADC_MspInit+0xe0>)
 8001514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001518:	6453      	str	r3, [r2, #68]	; 0x44
 800151a:	4b2b      	ldr	r3, [pc, #172]	; (80015c8 <HAL_ADC_MspInit+0xe0>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001522:	613b      	str	r3, [r7, #16]
 8001524:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	60fb      	str	r3, [r7, #12]
 800152a:	4b27      	ldr	r3, [pc, #156]	; (80015c8 <HAL_ADC_MspInit+0xe0>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	4a26      	ldr	r2, [pc, #152]	; (80015c8 <HAL_ADC_MspInit+0xe0>)
 8001530:	f043 0304 	orr.w	r3, r3, #4
 8001534:	6313      	str	r3, [r2, #48]	; 0x30
 8001536:	4b24      	ldr	r3, [pc, #144]	; (80015c8 <HAL_ADC_MspInit+0xe0>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	f003 0304 	and.w	r3, r3, #4
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001542:	2303      	movs	r3, #3
 8001544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001546:	2303      	movs	r3, #3
 8001548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800154e:	f107 0314 	add.w	r3, r7, #20
 8001552:	4619      	mov	r1, r3
 8001554:	481d      	ldr	r0, [pc, #116]	; (80015cc <HAL_ADC_MspInit+0xe4>)
 8001556:	f001 fb6d 	bl	8002c34 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800155a:	4b1d      	ldr	r3, [pc, #116]	; (80015d0 <HAL_ADC_MspInit+0xe8>)
 800155c:	4a1d      	ldr	r2, [pc, #116]	; (80015d4 <HAL_ADC_MspInit+0xec>)
 800155e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001560:	4b1b      	ldr	r3, [pc, #108]	; (80015d0 <HAL_ADC_MspInit+0xe8>)
 8001562:	2200      	movs	r2, #0
 8001564:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001566:	4b1a      	ldr	r3, [pc, #104]	; (80015d0 <HAL_ADC_MspInit+0xe8>)
 8001568:	2200      	movs	r2, #0
 800156a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800156c:	4b18      	ldr	r3, [pc, #96]	; (80015d0 <HAL_ADC_MspInit+0xe8>)
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001572:	4b17      	ldr	r3, [pc, #92]	; (80015d0 <HAL_ADC_MspInit+0xe8>)
 8001574:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001578:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800157a:	4b15      	ldr	r3, [pc, #84]	; (80015d0 <HAL_ADC_MspInit+0xe8>)
 800157c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001580:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001582:	4b13      	ldr	r3, [pc, #76]	; (80015d0 <HAL_ADC_MspInit+0xe8>)
 8001584:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001588:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800158a:	4b11      	ldr	r3, [pc, #68]	; (80015d0 <HAL_ADC_MspInit+0xe8>)
 800158c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001590:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001592:	4b0f      	ldr	r3, [pc, #60]	; (80015d0 <HAL_ADC_MspInit+0xe8>)
 8001594:	2200      	movs	r2, #0
 8001596:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001598:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <HAL_ADC_MspInit+0xe8>)
 800159a:	2200      	movs	r2, #0
 800159c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800159e:	480c      	ldr	r0, [pc, #48]	; (80015d0 <HAL_ADC_MspInit+0xe8>)
 80015a0:	f000 ff46 	bl	8002430 <HAL_DMA_Init>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80015aa:	f7ff ff6f 	bl	800148c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a07      	ldr	r2, [pc, #28]	; (80015d0 <HAL_ADC_MspInit+0xe8>)
 80015b2:	639a      	str	r2, [r3, #56]	; 0x38
 80015b4:	4a06      	ldr	r2, [pc, #24]	; (80015d0 <HAL_ADC_MspInit+0xe8>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80015ba:	bf00      	nop
 80015bc:	3728      	adds	r7, #40	; 0x28
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40012000 	.word	0x40012000
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40020800 	.word	0x40020800
 80015d0:	20000244 	.word	0x20000244
 80015d4:	40026410 	.word	0x40026410

080015d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b08a      	sub	sp, #40	; 0x28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
 80015e8:	605a      	str	r2, [r3, #4]
 80015ea:	609a      	str	r2, [r3, #8]
 80015ec:	60da      	str	r2, [r3, #12]
 80015ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a1d      	ldr	r2, [pc, #116]	; (800166c <HAL_UART_MspInit+0x94>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d133      	bne.n	8001662 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	613b      	str	r3, [r7, #16]
 80015fe:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <HAL_UART_MspInit+0x98>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	4a1b      	ldr	r2, [pc, #108]	; (8001670 <HAL_UART_MspInit+0x98>)
 8001604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001608:	6413      	str	r3, [r2, #64]	; 0x40
 800160a:	4b19      	ldr	r3, [pc, #100]	; (8001670 <HAL_UART_MspInit+0x98>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60fb      	str	r3, [r7, #12]
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <HAL_UART_MspInit+0x98>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a14      	ldr	r2, [pc, #80]	; (8001670 <HAL_UART_MspInit+0x98>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b12      	ldr	r3, [pc, #72]	; (8001670 <HAL_UART_MspInit+0x98>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001632:	230c      	movs	r3, #12
 8001634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001636:	2302      	movs	r3, #2
 8001638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163e:	2303      	movs	r3, #3
 8001640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001642:	2307      	movs	r3, #7
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	4809      	ldr	r0, [pc, #36]	; (8001674 <HAL_UART_MspInit+0x9c>)
 800164e:	f001 faf1 	bl	8002c34 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	2026      	movs	r0, #38	; 0x26
 8001658:	f000 feb3 	bl	80023c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800165c:	2026      	movs	r0, #38	; 0x26
 800165e:	f000 fecc 	bl	80023fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001662:	bf00      	nop
 8001664:	3728      	adds	r7, #40	; 0x28
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40004400 	.word	0x40004400
 8001670:	40023800 	.word	0x40023800
 8001674:	40020000 	.word	0x40020000

08001678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800167c:	e7fe      	b.n	800167c <NMI_Handler+0x4>

0800167e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001682:	e7fe      	b.n	8001682 <HardFault_Handler+0x4>

08001684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <MemManage_Handler+0x4>

0800168a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800168e:	e7fe      	b.n	800168e <BusFault_Handler+0x4>

08001690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001694:	e7fe      	b.n	8001694 <UsageFault_Handler+0x4>

08001696 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016c4:	f000 f96a 	bl	800199c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}

080016cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80016d0:	4802      	ldr	r0, [pc, #8]	; (80016dc <USART2_IRQHandler+0x10>)
 80016d2:	f002 fb3f 	bl	8003d54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200002a4 	.word	0x200002a4

080016e0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016e4:	4802      	ldr	r0, [pc, #8]	; (80016f0 <DMA2_Stream0_IRQHandler+0x10>)
 80016e6:	f001 f83b 	bl	8002760 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000244 	.word	0x20000244

080016f4 <_getpid>:
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	2301      	movs	r3, #1
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <_kill>:
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
 800170e:	f003 fa55 	bl	8004bbc <__errno>
 8001712:	4603      	mov	r3, r0
 8001714:	2216      	movs	r2, #22
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800171c:	4618      	mov	r0, r3
 800171e:	3708      	adds	r7, #8
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <_exit>:
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff ffe7 	bl	8001704 <_kill>
 8001736:	e7fe      	b.n	8001736 <_exit+0x12>

08001738 <_read>:
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	e00a      	b.n	8001760 <_read+0x28>
 800174a:	f3af 8000 	nop.w
 800174e:	4601      	mov	r1, r0
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	1c5a      	adds	r2, r3, #1
 8001754:	60ba      	str	r2, [r7, #8]
 8001756:	b2ca      	uxtb	r2, r1
 8001758:	701a      	strb	r2, [r3, #0]
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	3301      	adds	r3, #1
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	429a      	cmp	r2, r3
 8001766:	dbf0      	blt.n	800174a <_read+0x12>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	4618      	mov	r0, r3
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <_write>:
 8001772:	b580      	push	{r7, lr}
 8001774:	b086      	sub	sp, #24
 8001776:	af00      	add	r7, sp, #0
 8001778:	60f8      	str	r0, [r7, #12]
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	607a      	str	r2, [r7, #4]
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	e009      	b.n	8001798 <_write+0x26>
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	60ba      	str	r2, [r7, #8]
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f3af 8000 	nop.w
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	3301      	adds	r3, #1
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	429a      	cmp	r2, r3
 800179e:	dbf1      	blt.n	8001784 <_write+0x12>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	4618      	mov	r0, r3
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <_close>:
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017b6:	4618      	mov	r0, r3
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <_fstat>:
 80017c2:	b480      	push	{r7}
 80017c4:	b083      	sub	sp, #12
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
 80017ca:	6039      	str	r1, [r7, #0]
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	2300      	movs	r3, #0
 80017d6:	4618      	mov	r0, r3
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <_isatty>:
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
 80017ea:	2301      	movs	r3, #1
 80017ec:	4618      	mov	r0, r3
 80017ee:	370c      	adds	r7, #12
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr

080017f8 <_lseek>:
 80017f8:	b480      	push	{r7}
 80017fa:	b085      	sub	sp, #20
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	60f8      	str	r0, [r7, #12]
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
 8001804:	2300      	movs	r3, #0
 8001806:	4618      	mov	r0, r3
 8001808:	3714      	adds	r7, #20
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
	...

08001814 <_sbrk>:
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	4a14      	ldr	r2, [pc, #80]	; (8001870 <_sbrk+0x5c>)
 800181e:	4b15      	ldr	r3, [pc, #84]	; (8001874 <_sbrk+0x60>)
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	613b      	str	r3, [r7, #16]
 8001828:	4b13      	ldr	r3, [pc, #76]	; (8001878 <_sbrk+0x64>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d102      	bne.n	8001836 <_sbrk+0x22>
 8001830:	4b11      	ldr	r3, [pc, #68]	; (8001878 <_sbrk+0x64>)
 8001832:	4a12      	ldr	r2, [pc, #72]	; (800187c <_sbrk+0x68>)
 8001834:	601a      	str	r2, [r3, #0]
 8001836:	4b10      	ldr	r3, [pc, #64]	; (8001878 <_sbrk+0x64>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4413      	add	r3, r2
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	429a      	cmp	r2, r3
 8001842:	d207      	bcs.n	8001854 <_sbrk+0x40>
 8001844:	f003 f9ba 	bl	8004bbc <__errno>
 8001848:	4603      	mov	r3, r0
 800184a:	220c      	movs	r2, #12
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001852:	e009      	b.n	8001868 <_sbrk+0x54>
 8001854:	4b08      	ldr	r3, [pc, #32]	; (8001878 <_sbrk+0x64>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	60fb      	str	r3, [r7, #12]
 800185a:	4b07      	ldr	r3, [pc, #28]	; (8001878 <_sbrk+0x64>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	4413      	add	r3, r2
 8001862:	4a05      	ldr	r2, [pc, #20]	; (8001878 <_sbrk+0x64>)
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	4618      	mov	r0, r3
 800186a:	3718      	adds	r7, #24
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	20020000 	.word	0x20020000
 8001874:	00000400 	.word	0x00000400
 8001878:	200002e8 	.word	0x200002e8
 800187c:	20000300 	.word	0x20000300

08001880 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001884:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <SystemInit+0x20>)
 8001886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800188a:	4a05      	ldr	r2, [pc, #20]	; (80018a0 <SystemInit+0x20>)
 800188c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001890:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	e000ed00 	.word	0xe000ed00

080018a4 <Reset_Handler>:
 80018a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018dc <LoopFillZerobss+0x12>
 80018a8:	480d      	ldr	r0, [pc, #52]	; (80018e0 <LoopFillZerobss+0x16>)
 80018aa:	490e      	ldr	r1, [pc, #56]	; (80018e4 <LoopFillZerobss+0x1a>)
 80018ac:	4a0e      	ldr	r2, [pc, #56]	; (80018e8 <LoopFillZerobss+0x1e>)
 80018ae:	2300      	movs	r3, #0
 80018b0:	e002      	b.n	80018b8 <LoopCopyDataInit>

080018b2 <CopyDataInit>:
 80018b2:	58d4      	ldr	r4, [r2, r3]
 80018b4:	50c4      	str	r4, [r0, r3]
 80018b6:	3304      	adds	r3, #4

080018b8 <LoopCopyDataInit>:
 80018b8:	18c4      	adds	r4, r0, r3
 80018ba:	428c      	cmp	r4, r1
 80018bc:	d3f9      	bcc.n	80018b2 <CopyDataInit>
 80018be:	4a0b      	ldr	r2, [pc, #44]	; (80018ec <LoopFillZerobss+0x22>)
 80018c0:	4c0b      	ldr	r4, [pc, #44]	; (80018f0 <LoopFillZerobss+0x26>)
 80018c2:	2300      	movs	r3, #0
 80018c4:	e001      	b.n	80018ca <LoopFillZerobss>

080018c6 <FillZerobss>:
 80018c6:	6013      	str	r3, [r2, #0]
 80018c8:	3204      	adds	r2, #4

080018ca <LoopFillZerobss>:
 80018ca:	42a2      	cmp	r2, r4
 80018cc:	d3fb      	bcc.n	80018c6 <FillZerobss>
 80018ce:	f7ff ffd7 	bl	8001880 <SystemInit>
 80018d2:	f003 f979 	bl	8004bc8 <__libc_init_array>
 80018d6:	f7ff fb5b 	bl	8000f90 <main>
 80018da:	4770      	bx	lr
 80018dc:	20020000 	.word	0x20020000
 80018e0:	20000000 	.word	0x20000000
 80018e4:	200001e0 	.word	0x200001e0
 80018e8:	08007e14 	.word	0x08007e14
 80018ec:	200001e0 	.word	0x200001e0
 80018f0:	20000300 	.word	0x20000300

080018f4 <ADC_IRQHandler>:
 80018f4:	e7fe      	b.n	80018f4 <ADC_IRQHandler>
	...

080018f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018fc:	4b0e      	ldr	r3, [pc, #56]	; (8001938 <HAL_Init+0x40>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a0d      	ldr	r2, [pc, #52]	; (8001938 <HAL_Init+0x40>)
 8001902:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001906:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001908:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <HAL_Init+0x40>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a0a      	ldr	r2, [pc, #40]	; (8001938 <HAL_Init+0x40>)
 800190e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001912:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001914:	4b08      	ldr	r3, [pc, #32]	; (8001938 <HAL_Init+0x40>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a07      	ldr	r2, [pc, #28]	; (8001938 <HAL_Init+0x40>)
 800191a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800191e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001920:	2003      	movs	r0, #3
 8001922:	f000 fd43 	bl	80023ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001926:	2000      	movs	r0, #0
 8001928:	f000 f808 	bl	800193c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800192c:	f7ff fdb4 	bl	8001498 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	bd80      	pop	{r7, pc}
 8001936:	bf00      	nop
 8001938:	40023c00 	.word	0x40023c00

0800193c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001944:	4b12      	ldr	r3, [pc, #72]	; (8001990 <HAL_InitTick+0x54>)
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	4b12      	ldr	r3, [pc, #72]	; (8001994 <HAL_InitTick+0x58>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	4619      	mov	r1, r3
 800194e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001952:	fbb3 f3f1 	udiv	r3, r3, r1
 8001956:	fbb2 f3f3 	udiv	r3, r2, r3
 800195a:	4618      	mov	r0, r3
 800195c:	f000 fd5b 	bl	8002416 <HAL_SYSTICK_Config>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d001      	beq.n	800196a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e00e      	b.n	8001988 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2b0f      	cmp	r3, #15
 800196e:	d80a      	bhi.n	8001986 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001970:	2200      	movs	r2, #0
 8001972:	6879      	ldr	r1, [r7, #4]
 8001974:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001978:	f000 fd23 	bl	80023c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800197c:	4a06      	ldr	r2, [pc, #24]	; (8001998 <HAL_InitTick+0x5c>)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001982:	2300      	movs	r3, #0
 8001984:	e000      	b.n	8001988 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
}
 8001988:	4618      	mov	r0, r3
 800198a:	3708      	adds	r7, #8
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000004 	.word	0x20000004
 8001994:	2000000c 	.word	0x2000000c
 8001998:	20000008 	.word	0x20000008

0800199c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019a0:	4b06      	ldr	r3, [pc, #24]	; (80019bc <HAL_IncTick+0x20>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	461a      	mov	r2, r3
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_IncTick+0x24>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4413      	add	r3, r2
 80019ac:	4a04      	ldr	r2, [pc, #16]	; (80019c0 <HAL_IncTick+0x24>)
 80019ae:	6013      	str	r3, [r2, #0]
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	2000000c 	.word	0x2000000c
 80019c0:	200002ec 	.word	0x200002ec

080019c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019c4:	b480      	push	{r7}
 80019c6:	af00      	add	r7, sp, #0
  return uwTick;
 80019c8:	4b03      	ldr	r3, [pc, #12]	; (80019d8 <HAL_GetTick+0x14>)
 80019ca:	681b      	ldr	r3, [r3, #0]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	200002ec 	.word	0x200002ec

080019dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b084      	sub	sp, #16
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019e4:	2300      	movs	r3, #0
 80019e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e033      	b.n	8001a5a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d109      	bne.n	8001a0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f7ff fd74 	bl	80014e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	f003 0310 	and.w	r3, r3, #16
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d118      	bne.n	8001a4c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a22:	f023 0302 	bic.w	r3, r3, #2
 8001a26:	f043 0202 	orr.w	r2, r3, #2
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f000 fa6e 	bl	8001f10 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2200      	movs	r2, #0
 8001a38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f023 0303 	bic.w	r3, r3, #3
 8001a42:	f043 0201 	orr.w	r2, r3, #1
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	641a      	str	r2, [r3, #64]	; 0x40
 8001a4a:	e001      	b.n	8001a50 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}
	...

08001a64 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b086      	sub	sp, #24
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	60f8      	str	r0, [r7, #12]
 8001a6c:	60b9      	str	r1, [r7, #8]
 8001a6e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001a70:	2300      	movs	r3, #0
 8001a72:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d101      	bne.n	8001a82 <HAL_ADC_Start_DMA+0x1e>
 8001a7e:	2302      	movs	r3, #2
 8001a80:	e0e9      	b.n	8001c56 <HAL_ADC_Start_DMA+0x1f2>
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b01      	cmp	r3, #1
 8001a96:	d018      	beq.n	8001aca <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	689a      	ldr	r2, [r3, #8]
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f042 0201 	orr.w	r2, r2, #1
 8001aa6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001aa8:	4b6d      	ldr	r3, [pc, #436]	; (8001c60 <HAL_ADC_Start_DMA+0x1fc>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a6d      	ldr	r2, [pc, #436]	; (8001c64 <HAL_ADC_Start_DMA+0x200>)
 8001aae:	fba2 2303 	umull	r2, r3, r2, r3
 8001ab2:	0c9a      	lsrs	r2, r3, #18
 8001ab4:	4613      	mov	r3, r2
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	4413      	add	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001abc:	e002      	b.n	8001ac4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1f9      	bne.n	8001abe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ad4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ad8:	d107      	bne.n	8001aea <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ae8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	f040 80a1 	bne.w	8001c3c <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b02:	f023 0301 	bic.w	r3, r3, #1
 8001b06:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d007      	beq.n	8001b2c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b24:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b38:	d106      	bne.n	8001b48 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3e:	f023 0206 	bic.w	r2, r3, #6
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	645a      	str	r2, [r3, #68]	; 0x44
 8001b46:	e002      	b.n	8001b4e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b56:	4b44      	ldr	r3, [pc, #272]	; (8001c68 <HAL_ADC_Start_DMA+0x204>)
 8001b58:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b5e:	4a43      	ldr	r2, [pc, #268]	; (8001c6c <HAL_ADC_Start_DMA+0x208>)
 8001b60:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b66:	4a42      	ldr	r2, [pc, #264]	; (8001c70 <HAL_ADC_Start_DMA+0x20c>)
 8001b68:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6e:	4a41      	ldr	r2, [pc, #260]	; (8001c74 <HAL_ADC_Start_DMA+0x210>)
 8001b70:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b7a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001b8a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689a      	ldr	r2, [r3, #8]
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b9a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	334c      	adds	r3, #76	; 0x4c
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	68ba      	ldr	r2, [r7, #8]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f000 fcee 	bl	800258c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 031f 	and.w	r3, r3, #31
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d12a      	bne.n	8001c12 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a2d      	ldr	r2, [pc, #180]	; (8001c78 <HAL_ADC_Start_DMA+0x214>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d015      	beq.n	8001bf2 <HAL_ADC_Start_DMA+0x18e>
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a2c      	ldr	r2, [pc, #176]	; (8001c7c <HAL_ADC_Start_DMA+0x218>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d105      	bne.n	8001bdc <HAL_ADC_Start_DMA+0x178>
 8001bd0:	4b25      	ldr	r3, [pc, #148]	; (8001c68 <HAL_ADC_Start_DMA+0x204>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 031f 	and.w	r3, r3, #31
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d00a      	beq.n	8001bf2 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a27      	ldr	r2, [pc, #156]	; (8001c80 <HAL_ADC_Start_DMA+0x21c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d136      	bne.n	8001c54 <HAL_ADC_Start_DMA+0x1f0>
 8001be6:	4b20      	ldr	r3, [pc, #128]	; (8001c68 <HAL_ADC_Start_DMA+0x204>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f003 0310 	and.w	r3, r3, #16
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d130      	bne.n	8001c54 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d129      	bne.n	8001c54 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	689a      	ldr	r2, [r3, #8]
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c0e:	609a      	str	r2, [r3, #8]
 8001c10:	e020      	b.n	8001c54 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a18      	ldr	r2, [pc, #96]	; (8001c78 <HAL_ADC_Start_DMA+0x214>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d11b      	bne.n	8001c54 <HAL_ADC_Start_DMA+0x1f0>
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d114      	bne.n	8001c54 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001c38:	609a      	str	r2, [r3, #8]
 8001c3a:	e00b      	b.n	8001c54 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c40:	f043 0210 	orr.w	r2, r3, #16
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4c:	f043 0201 	orr.w	r2, r3, #1
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3718      	adds	r7, #24
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	20000004 	.word	0x20000004
 8001c64:	431bde83 	.word	0x431bde83
 8001c68:	40012300 	.word	0x40012300
 8001c6c:	08002109 	.word	0x08002109
 8001c70:	080021c3 	.word	0x080021c3
 8001c74:	080021df 	.word	0x080021df
 8001c78:	40012000 	.word	0x40012000
 8001c7c:	40012100 	.word	0x40012100
 8001c80:	40012200 	.word	0x40012200

08001c84 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c84:	b480      	push	{r7}
 8001c86:	b083      	sub	sp, #12
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001ca0:	bf00      	nop
 8001ca2:	370c      	adds	r7, #12
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d101      	bne.n	8001cc8 <HAL_ADC_ConfigChannel+0x1c>
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	e113      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x244>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b09      	cmp	r3, #9
 8001cd6:	d925      	bls.n	8001d24 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	68d9      	ldr	r1, [r3, #12]
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	4413      	add	r3, r2
 8001cec:	3b1e      	subs	r3, #30
 8001cee:	2207      	movs	r2, #7
 8001cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf4:	43da      	mvns	r2, r3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	400a      	ands	r2, r1
 8001cfc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	68d9      	ldr	r1, [r3, #12]
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	b29b      	uxth	r3, r3
 8001d0e:	4618      	mov	r0, r3
 8001d10:	4603      	mov	r3, r0
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4403      	add	r3, r0
 8001d16:	3b1e      	subs	r3, #30
 8001d18:	409a      	lsls	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	e022      	b.n	8001d6a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6919      	ldr	r1, [r3, #16]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	b29b      	uxth	r3, r3
 8001d30:	461a      	mov	r2, r3
 8001d32:	4613      	mov	r3, r2
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	4413      	add	r3, r2
 8001d38:	2207      	movs	r2, #7
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43da      	mvns	r2, r3
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	400a      	ands	r2, r1
 8001d46:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	6919      	ldr	r1, [r3, #16]
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	4618      	mov	r0, r3
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	4403      	add	r3, r0
 8001d60:	409a      	lsls	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	430a      	orrs	r2, r1
 8001d68:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	2b06      	cmp	r3, #6
 8001d70:	d824      	bhi.n	8001dbc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	4613      	mov	r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	4413      	add	r3, r2
 8001d82:	3b05      	subs	r3, #5
 8001d84:	221f      	movs	r2, #31
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	43da      	mvns	r2, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	400a      	ands	r2, r1
 8001d92:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	4618      	mov	r0, r3
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685a      	ldr	r2, [r3, #4]
 8001da6:	4613      	mov	r3, r2
 8001da8:	009b      	lsls	r3, r3, #2
 8001daa:	4413      	add	r3, r2
 8001dac:	3b05      	subs	r3, #5
 8001dae:	fa00 f203 	lsl.w	r2, r0, r3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	635a      	str	r2, [r3, #52]	; 0x34
 8001dba:	e04c      	b.n	8001e56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2b0c      	cmp	r3, #12
 8001dc2:	d824      	bhi.n	8001e0e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	3b23      	subs	r3, #35	; 0x23
 8001dd6:	221f      	movs	r2, #31
 8001dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ddc:	43da      	mvns	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	400a      	ands	r2, r1
 8001de4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	b29b      	uxth	r3, r3
 8001df2:	4618      	mov	r0, r3
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	3b23      	subs	r3, #35	; 0x23
 8001e00:	fa00 f203 	lsl.w	r2, r0, r3
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	430a      	orrs	r2, r1
 8001e0a:	631a      	str	r2, [r3, #48]	; 0x30
 8001e0c:	e023      	b.n	8001e56 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3b41      	subs	r3, #65	; 0x41
 8001e20:	221f      	movs	r2, #31
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43da      	mvns	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	400a      	ands	r2, r1
 8001e2e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	4613      	mov	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	3b41      	subs	r3, #65	; 0x41
 8001e4a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e56:	4b29      	ldr	r3, [pc, #164]	; (8001efc <HAL_ADC_ConfigChannel+0x250>)
 8001e58:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a28      	ldr	r2, [pc, #160]	; (8001f00 <HAL_ADC_ConfigChannel+0x254>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d10f      	bne.n	8001e84 <HAL_ADC_ConfigChannel+0x1d8>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	2b12      	cmp	r3, #18
 8001e6a:	d10b      	bne.n	8001e84 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a1d      	ldr	r2, [pc, #116]	; (8001f00 <HAL_ADC_ConfigChannel+0x254>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d12b      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x23a>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a1c      	ldr	r2, [pc, #112]	; (8001f04 <HAL_ADC_ConfigChannel+0x258>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d003      	beq.n	8001ea0 <HAL_ADC_ConfigChannel+0x1f4>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2b11      	cmp	r3, #17
 8001e9e:	d122      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a11      	ldr	r2, [pc, #68]	; (8001f04 <HAL_ADC_ConfigChannel+0x258>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d111      	bne.n	8001ee6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ec2:	4b11      	ldr	r3, [pc, #68]	; (8001f08 <HAL_ADC_ConfigChannel+0x25c>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a11      	ldr	r2, [pc, #68]	; (8001f0c <HAL_ADC_ConfigChannel+0x260>)
 8001ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8001ecc:	0c9a      	lsrs	r2, r3, #18
 8001ece:	4613      	mov	r3, r2
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	4413      	add	r3, r2
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ed8:	e002      	b.n	8001ee0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	3b01      	subs	r3, #1
 8001ede:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f9      	bne.n	8001eda <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001eee:	2300      	movs	r3, #0
}
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efa:	4770      	bx	lr
 8001efc:	40012300 	.word	0x40012300
 8001f00:	40012000 	.word	0x40012000
 8001f04:	10000012 	.word	0x10000012
 8001f08:	20000004 	.word	0x20000004
 8001f0c:	431bde83 	.word	0x431bde83

08001f10 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f18:	4b79      	ldr	r3, [pc, #484]	; (8002100 <ADC_Init+0x1f0>)
 8001f1a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	685a      	ldr	r2, [r3, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	431a      	orrs	r2, r3
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	685a      	ldr	r2, [r3, #4]
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f44:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	6859      	ldr	r1, [r3, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	021a      	lsls	r2, r3, #8
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	430a      	orrs	r2, r1
 8001f58:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	685a      	ldr	r2, [r3, #4]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f68:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	6859      	ldr	r1, [r3, #4]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6899      	ldr	r1, [r3, #8]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68da      	ldr	r2, [r3, #12]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa2:	4a58      	ldr	r2, [pc, #352]	; (8002104 <ADC_Init+0x1f4>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d022      	beq.n	8001fee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	689a      	ldr	r2, [r3, #8]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fb6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	6899      	ldr	r1, [r3, #8]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fd8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	6899      	ldr	r1, [r3, #8]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	430a      	orrs	r2, r1
 8001fea:	609a      	str	r2, [r3, #8]
 8001fec:	e00f      	b.n	800200e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689a      	ldr	r2, [r3, #8]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ffc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800200c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 0202 	bic.w	r2, r2, #2
 800201c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	6899      	ldr	r1, [r3, #8]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	7e1b      	ldrb	r3, [r3, #24]
 8002028:	005a      	lsls	r2, r3, #1
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d01b      	beq.n	8002074 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800204a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800205a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	6859      	ldr	r1, [r3, #4]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002066:	3b01      	subs	r3, #1
 8002068:	035a      	lsls	r2, r3, #13
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	430a      	orrs	r2, r1
 8002070:	605a      	str	r2, [r3, #4]
 8002072:	e007      	b.n	8002084 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	685a      	ldr	r2, [r3, #4]
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002082:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002092:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	3b01      	subs	r3, #1
 80020a0:	051a      	lsls	r2, r3, #20
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	430a      	orrs	r2, r1
 80020a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	689a      	ldr	r2, [r3, #8]
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80020b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6899      	ldr	r1, [r3, #8]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80020c6:	025a      	lsls	r2, r3, #9
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	430a      	orrs	r2, r1
 80020ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	689a      	ldr	r2, [r3, #8]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	6899      	ldr	r1, [r3, #8]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	695b      	ldr	r3, [r3, #20]
 80020ea:	029a      	lsls	r2, r3, #10
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	609a      	str	r2, [r3, #8]
}
 80020f4:	bf00      	nop
 80020f6:	3714      	adds	r7, #20
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	40012300 	.word	0x40012300
 8002104:	0f000001 	.word	0x0f000001

08002108 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002114:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800211e:	2b00      	cmp	r3, #0
 8002120:	d13c      	bne.n	800219c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002138:	2b00      	cmp	r3, #0
 800213a:	d12b      	bne.n	8002194 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002140:	2b00      	cmp	r3, #0
 8002142:	d127      	bne.n	8002194 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800214e:	2b00      	cmp	r3, #0
 8002150:	d006      	beq.n	8002160 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800215c:	2b00      	cmp	r3, #0
 800215e:	d119      	bne.n	8002194 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0220 	bic.w	r2, r2, #32
 800216e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002180:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d105      	bne.n	8002194 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218c:	f043 0201 	orr.w	r2, r3, #1
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f7ff f96b 	bl	8001470 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800219a:	e00e      	b.n	80021ba <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d003      	beq.n	80021b0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80021a8:	68f8      	ldr	r0, [r7, #12]
 80021aa:	f7ff fd75 	bl	8001c98 <HAL_ADC_ErrorCallback>
}
 80021ae:	e004      	b.n	80021ba <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	4798      	blx	r3
}
 80021ba:	bf00      	nop
 80021bc:	3710      	adds	r7, #16
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b084      	sub	sp, #16
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ce:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f7ff fd57 	bl	8001c84 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021d6:	bf00      	nop
 80021d8:	3710      	adds	r7, #16
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b084      	sub	sp, #16
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021ea:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2240      	movs	r2, #64	; 0x40
 80021f0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f6:	f043 0204 	orr.w	r2, r3, #4
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80021fe:	68f8      	ldr	r0, [r7, #12]
 8002200:	f7ff fd4a 	bl	8001c98 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002204:	bf00      	nop
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}

0800220c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800221c:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <__NVIC_SetPriorityGrouping+0x44>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002222:	68ba      	ldr	r2, [r7, #8]
 8002224:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002228:	4013      	ands	r3, r2
 800222a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002234:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002238:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800223c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800223e:	4a04      	ldr	r2, [pc, #16]	; (8002250 <__NVIC_SetPriorityGrouping+0x44>)
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	60d3      	str	r3, [r2, #12]
}
 8002244:	bf00      	nop
 8002246:	3714      	adds	r7, #20
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	e000ed00 	.word	0xe000ed00

08002254 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002258:	4b04      	ldr	r3, [pc, #16]	; (800226c <__NVIC_GetPriorityGrouping+0x18>)
 800225a:	68db      	ldr	r3, [r3, #12]
 800225c:	0a1b      	lsrs	r3, r3, #8
 800225e:	f003 0307 	and.w	r3, r3, #7
}
 8002262:	4618      	mov	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	e000ed00 	.word	0xe000ed00

08002270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	4603      	mov	r3, r0
 8002278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227e:	2b00      	cmp	r3, #0
 8002280:	db0b      	blt.n	800229a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	f003 021f 	and.w	r2, r3, #31
 8002288:	4907      	ldr	r1, [pc, #28]	; (80022a8 <__NVIC_EnableIRQ+0x38>)
 800228a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228e:	095b      	lsrs	r3, r3, #5
 8002290:	2001      	movs	r0, #1
 8002292:	fa00 f202 	lsl.w	r2, r0, r2
 8002296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800229a:	bf00      	nop
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	e000e100 	.word	0xe000e100

080022ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	4603      	mov	r3, r0
 80022b4:	6039      	str	r1, [r7, #0]
 80022b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	db0a      	blt.n	80022d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	b2da      	uxtb	r2, r3
 80022c4:	490c      	ldr	r1, [pc, #48]	; (80022f8 <__NVIC_SetPriority+0x4c>)
 80022c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ca:	0112      	lsls	r2, r2, #4
 80022cc:	b2d2      	uxtb	r2, r2
 80022ce:	440b      	add	r3, r1
 80022d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d4:	e00a      	b.n	80022ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	b2da      	uxtb	r2, r3
 80022da:	4908      	ldr	r1, [pc, #32]	; (80022fc <__NVIC_SetPriority+0x50>)
 80022dc:	79fb      	ldrb	r3, [r7, #7]
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	3b04      	subs	r3, #4
 80022e4:	0112      	lsls	r2, r2, #4
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	440b      	add	r3, r1
 80022ea:	761a      	strb	r2, [r3, #24]
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr
 80022f8:	e000e100 	.word	0xe000e100
 80022fc:	e000ed00 	.word	0xe000ed00

08002300 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002300:	b480      	push	{r7}
 8002302:	b089      	sub	sp, #36	; 0x24
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f003 0307 	and.w	r3, r3, #7
 8002312:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f1c3 0307 	rsb	r3, r3, #7
 800231a:	2b04      	cmp	r3, #4
 800231c:	bf28      	it	cs
 800231e:	2304      	movcs	r3, #4
 8002320:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	3304      	adds	r3, #4
 8002326:	2b06      	cmp	r3, #6
 8002328:	d902      	bls.n	8002330 <NVIC_EncodePriority+0x30>
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	3b03      	subs	r3, #3
 800232e:	e000      	b.n	8002332 <NVIC_EncodePriority+0x32>
 8002330:	2300      	movs	r3, #0
 8002332:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002334:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	fa02 f303 	lsl.w	r3, r2, r3
 800233e:	43da      	mvns	r2, r3
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	401a      	ands	r2, r3
 8002344:	697b      	ldr	r3, [r7, #20]
 8002346:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002348:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	fa01 f303 	lsl.w	r3, r1, r3
 8002352:	43d9      	mvns	r1, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002358:	4313      	orrs	r3, r2
         );
}
 800235a:	4618      	mov	r0, r3
 800235c:	3724      	adds	r7, #36	; 0x24
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
	...

08002368 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b082      	sub	sp, #8
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3b01      	subs	r3, #1
 8002374:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002378:	d301      	bcc.n	800237e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800237a:	2301      	movs	r3, #1
 800237c:	e00f      	b.n	800239e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800237e:	4a0a      	ldr	r2, [pc, #40]	; (80023a8 <SysTick_Config+0x40>)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3b01      	subs	r3, #1
 8002384:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002386:	210f      	movs	r1, #15
 8002388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800238c:	f7ff ff8e 	bl	80022ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002390:	4b05      	ldr	r3, [pc, #20]	; (80023a8 <SysTick_Config+0x40>)
 8002392:	2200      	movs	r2, #0
 8002394:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002396:	4b04      	ldr	r3, [pc, #16]	; (80023a8 <SysTick_Config+0x40>)
 8002398:	2207      	movs	r2, #7
 800239a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	e000e010 	.word	0xe000e010

080023ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b4:	6878      	ldr	r0, [r7, #4]
 80023b6:	f7ff ff29 	bl	800220c <__NVIC_SetPriorityGrouping>
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b086      	sub	sp, #24
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	4603      	mov	r3, r0
 80023ca:	60b9      	str	r1, [r7, #8]
 80023cc:	607a      	str	r2, [r7, #4]
 80023ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023d0:	2300      	movs	r3, #0
 80023d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023d4:	f7ff ff3e 	bl	8002254 <__NVIC_GetPriorityGrouping>
 80023d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	68b9      	ldr	r1, [r7, #8]
 80023de:	6978      	ldr	r0, [r7, #20]
 80023e0:	f7ff ff8e 	bl	8002300 <NVIC_EncodePriority>
 80023e4:	4602      	mov	r2, r0
 80023e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ea:	4611      	mov	r1, r2
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7ff ff5d 	bl	80022ac <__NVIC_SetPriority>
}
 80023f2:	bf00      	nop
 80023f4:	3718      	adds	r7, #24
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}

080023fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b082      	sub	sp, #8
 80023fe:	af00      	add	r7, sp, #0
 8002400:	4603      	mov	r3, r0
 8002402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002408:	4618      	mov	r0, r3
 800240a:	f7ff ff31 	bl	8002270 <__NVIC_EnableIRQ>
}
 800240e:	bf00      	nop
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}

08002416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002416:	b580      	push	{r7, lr}
 8002418:	b082      	sub	sp, #8
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7ff ffa2 	bl	8002368 <SysTick_Config>
 8002424:	4603      	mov	r3, r0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}
	...

08002430 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800243c:	f7ff fac2 	bl	80019c4 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d101      	bne.n	800244c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e099      	b.n	8002580 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 0201 	bic.w	r2, r2, #1
 800246a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800246c:	e00f      	b.n	800248e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800246e:	f7ff faa9 	bl	80019c4 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	2b05      	cmp	r3, #5
 800247a:	d908      	bls.n	800248e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2220      	movs	r2, #32
 8002480:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2203      	movs	r2, #3
 8002486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e078      	b.n	8002580 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0301 	and.w	r3, r3, #1
 8002498:	2b00      	cmp	r3, #0
 800249a:	d1e8      	bne.n	800246e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80024a4:	697a      	ldr	r2, [r7, #20]
 80024a6:	4b38      	ldr	r3, [pc, #224]	; (8002588 <HAL_DMA_Init+0x158>)
 80024a8:	4013      	ands	r3, r2
 80024aa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685a      	ldr	r2, [r3, #4]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	691b      	ldr	r3, [r3, #16]
 80024c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a1b      	ldr	r3, [r3, #32]
 80024d8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	4313      	orrs	r3, r2
 80024de:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	d107      	bne.n	80024f8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f0:	4313      	orrs	r3, r2
 80024f2:	697a      	ldr	r2, [r7, #20]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002508:	697b      	ldr	r3, [r7, #20]
 800250a:	f023 0307 	bic.w	r3, r3, #7
 800250e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002514:	697a      	ldr	r2, [r7, #20]
 8002516:	4313      	orrs	r3, r2
 8002518:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800251e:	2b04      	cmp	r3, #4
 8002520:	d117      	bne.n	8002552 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	4313      	orrs	r3, r2
 800252a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002530:	2b00      	cmp	r3, #0
 8002532:	d00e      	beq.n	8002552 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 fb01 	bl	8002b3c <DMA_CheckFifoParam>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d008      	beq.n	8002552 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2240      	movs	r2, #64	; 0x40
 8002544:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2201      	movs	r2, #1
 800254a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800254e:	2301      	movs	r3, #1
 8002550:	e016      	b.n	8002580 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	f000 fab8 	bl	8002ad0 <DMA_CalcBaseAndBitshift>
 8002560:	4603      	mov	r3, r0
 8002562:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002568:	223f      	movs	r2, #63	; 0x3f
 800256a:	409a      	lsls	r2, r3
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2200      	movs	r2, #0
 8002574:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3718      	adds	r7, #24
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}
 8002588:	f010803f 	.word	0xf010803f

0800258c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b086      	sub	sp, #24
 8002590:	af00      	add	r7, sp, #0
 8002592:	60f8      	str	r0, [r7, #12]
 8002594:	60b9      	str	r1, [r7, #8]
 8002596:	607a      	str	r2, [r7, #4]
 8002598:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_DMA_Start_IT+0x26>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e040      	b.n	8002634 <HAL_DMA_Start_IT+0xa8>
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d12f      	bne.n	8002626 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2202      	movs	r2, #2
 80025ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2200      	movs	r2, #0
 80025d2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	68b9      	ldr	r1, [r7, #8]
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f000 fa4a 	bl	8002a74 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e4:	223f      	movs	r2, #63	; 0x3f
 80025e6:	409a      	lsls	r2, r3
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681a      	ldr	r2, [r3, #0]
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f042 0216 	orr.w	r2, r2, #22
 80025fa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002600:	2b00      	cmp	r3, #0
 8002602:	d007      	beq.n	8002614 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f042 0208 	orr.w	r2, r2, #8
 8002612:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0201 	orr.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]
 8002624:	e005      	b.n	8002632 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800262e:	2302      	movs	r3, #2
 8002630:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002632:	7dfb      	ldrb	r3, [r7, #23]
}
 8002634:	4618      	mov	r0, r3
 8002636:	3718      	adds	r7, #24
 8002638:	46bd      	mov	sp, r7
 800263a:	bd80      	pop	{r7, pc}

0800263c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b084      	sub	sp, #16
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002648:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800264a:	f7ff f9bb 	bl	80019c4 <HAL_GetTick>
 800264e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d008      	beq.n	800266e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2280      	movs	r2, #128	; 0x80
 8002660:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e052      	b.n	8002714 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0216 	bic.w	r2, r2, #22
 800267c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	695a      	ldr	r2, [r3, #20]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800268c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	2b00      	cmp	r3, #0
 8002694:	d103      	bne.n	800269e <HAL_DMA_Abort+0x62>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800269a:	2b00      	cmp	r3, #0
 800269c:	d007      	beq.n	80026ae <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0208 	bic.w	r2, r2, #8
 80026ac:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f022 0201 	bic.w	r2, r2, #1
 80026bc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026be:	e013      	b.n	80026e8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026c0:	f7ff f980 	bl	80019c4 <HAL_GetTick>
 80026c4:	4602      	mov	r2, r0
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	1ad3      	subs	r3, r2, r3
 80026ca:	2b05      	cmp	r3, #5
 80026cc:	d90c      	bls.n	80026e8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2220      	movs	r2, #32
 80026d2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2203      	movs	r2, #3
 80026d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80026e4:	2303      	movs	r3, #3
 80026e6:	e015      	b.n	8002714 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d1e4      	bne.n	80026c0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026fa:	223f      	movs	r2, #63	; 0x3f
 80026fc:	409a      	lsls	r2, r3
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2201      	movs	r2, #1
 8002706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	2200      	movs	r2, #0
 800270e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
}
 8002714:	4618      	mov	r0, r3
 8002716:	3710      	adds	r7, #16
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800272a:	b2db      	uxtb	r3, r3
 800272c:	2b02      	cmp	r3, #2
 800272e:	d004      	beq.n	800273a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2280      	movs	r2, #128	; 0x80
 8002734:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e00c      	b.n	8002754 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2205      	movs	r2, #5
 800273e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f022 0201 	bic.w	r2, r2, #1
 8002750:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b086      	sub	sp, #24
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002768:	2300      	movs	r3, #0
 800276a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800276c:	4b8e      	ldr	r3, [pc, #568]	; (80029a8 <HAL_DMA_IRQHandler+0x248>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a8e      	ldr	r2, [pc, #568]	; (80029ac <HAL_DMA_IRQHandler+0x24c>)
 8002772:	fba2 2303 	umull	r2, r3, r2, r3
 8002776:	0a9b      	lsrs	r3, r3, #10
 8002778:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800277e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800278a:	2208      	movs	r2, #8
 800278c:	409a      	lsls	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	4013      	ands	r3, r2
 8002792:	2b00      	cmp	r3, #0
 8002794:	d01a      	beq.n	80027cc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0304 	and.w	r3, r3, #4
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d013      	beq.n	80027cc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0204 	bic.w	r2, r2, #4
 80027b2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b8:	2208      	movs	r2, #8
 80027ba:	409a      	lsls	r2, r3
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027c4:	f043 0201 	orr.w	r2, r3, #1
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d0:	2201      	movs	r2, #1
 80027d2:	409a      	lsls	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	4013      	ands	r3, r2
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d012      	beq.n	8002802 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00b      	beq.n	8002802 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ee:	2201      	movs	r2, #1
 80027f0:	409a      	lsls	r2, r3
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027fa:	f043 0202 	orr.w	r2, r3, #2
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002806:	2204      	movs	r2, #4
 8002808:	409a      	lsls	r2, r3
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4013      	ands	r3, r2
 800280e:	2b00      	cmp	r3, #0
 8002810:	d012      	beq.n	8002838 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d00b      	beq.n	8002838 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002824:	2204      	movs	r2, #4
 8002826:	409a      	lsls	r2, r3
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002830:	f043 0204 	orr.w	r2, r3, #4
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800283c:	2210      	movs	r2, #16
 800283e:	409a      	lsls	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4013      	ands	r3, r2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d043      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0308 	and.w	r3, r3, #8
 8002852:	2b00      	cmp	r3, #0
 8002854:	d03c      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800285a:	2210      	movs	r2, #16
 800285c:	409a      	lsls	r2, r3
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d018      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d108      	bne.n	8002890 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	2b00      	cmp	r3, #0
 8002884:	d024      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	4798      	blx	r3
 800288e:	e01f      	b.n	80028d0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002894:	2b00      	cmp	r3, #0
 8002896:	d01b      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	4798      	blx	r3
 80028a0:	e016      	b.n	80028d0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d107      	bne.n	80028c0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f022 0208 	bic.w	r2, r2, #8
 80028be:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d003      	beq.n	80028d0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028d4:	2220      	movs	r2, #32
 80028d6:	409a      	lsls	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	4013      	ands	r3, r2
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 808f 	beq.w	8002a00 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0310 	and.w	r3, r3, #16
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 8087 	beq.w	8002a00 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f6:	2220      	movs	r2, #32
 80028f8:	409a      	lsls	r2, r3
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002904:	b2db      	uxtb	r3, r3
 8002906:	2b05      	cmp	r3, #5
 8002908:	d136      	bne.n	8002978 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 0216 	bic.w	r2, r2, #22
 8002918:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	695a      	ldr	r2, [r3, #20]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002928:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292e:	2b00      	cmp	r3, #0
 8002930:	d103      	bne.n	800293a <HAL_DMA_IRQHandler+0x1da>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002936:	2b00      	cmp	r3, #0
 8002938:	d007      	beq.n	800294a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0208 	bic.w	r2, r2, #8
 8002948:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294e:	223f      	movs	r2, #63	; 0x3f
 8002950:	409a      	lsls	r2, r3
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2201      	movs	r2, #1
 800295a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2200      	movs	r2, #0
 8002962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800296a:	2b00      	cmp	r3, #0
 800296c:	d07e      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	4798      	blx	r3
        }
        return;
 8002976:	e079      	b.n	8002a6c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d01d      	beq.n	80029c2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10d      	bne.n	80029b0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002998:	2b00      	cmp	r3, #0
 800299a:	d031      	beq.n	8002a00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	4798      	blx	r3
 80029a4:	e02c      	b.n	8002a00 <HAL_DMA_IRQHandler+0x2a0>
 80029a6:	bf00      	nop
 80029a8:	20000004 	.word	0x20000004
 80029ac:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d023      	beq.n	8002a00 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	4798      	blx	r3
 80029c0:	e01e      	b.n	8002a00 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d10f      	bne.n	80029f0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f022 0210 	bic.w	r2, r2, #16
 80029de:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d003      	beq.n	8002a00 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029fc:	6878      	ldr	r0, [r7, #4]
 80029fe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d032      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d022      	beq.n	8002a5a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2205      	movs	r2, #5
 8002a18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0201 	bic.w	r2, r2, #1
 8002a2a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	3301      	adds	r3, #1
 8002a30:	60bb      	str	r3, [r7, #8]
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d307      	bcc.n	8002a48 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d1f2      	bne.n	8002a2c <HAL_DMA_IRQHandler+0x2cc>
 8002a46:	e000      	b.n	8002a4a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a48:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d005      	beq.n	8002a6e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	4798      	blx	r3
 8002a6a:	e000      	b.n	8002a6e <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a6c:	bf00      	nop
    }
  }
}
 8002a6e:	3718      	adds	r7, #24
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b085      	sub	sp, #20
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	60f8      	str	r0, [r7, #12]
 8002a7c:	60b9      	str	r1, [r7, #8]
 8002a7e:	607a      	str	r2, [r7, #4]
 8002a80:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	681a      	ldr	r2, [r3, #0]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a90:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2b40      	cmp	r3, #64	; 0x40
 8002aa0:	d108      	bne.n	8002ab4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002ab2:	e007      	b.n	8002ac4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	60da      	str	r2, [r3, #12]
}
 8002ac4:	bf00      	nop
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	3b10      	subs	r3, #16
 8002ae0:	4a14      	ldr	r2, [pc, #80]	; (8002b34 <DMA_CalcBaseAndBitshift+0x64>)
 8002ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ae6:	091b      	lsrs	r3, r3, #4
 8002ae8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002aea:	4a13      	ldr	r2, [pc, #76]	; (8002b38 <DMA_CalcBaseAndBitshift+0x68>)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	4413      	add	r3, r2
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	461a      	mov	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2b03      	cmp	r3, #3
 8002afc:	d909      	bls.n	8002b12 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b06:	f023 0303 	bic.w	r3, r3, #3
 8002b0a:	1d1a      	adds	r2, r3, #4
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	659a      	str	r2, [r3, #88]	; 0x58
 8002b10:	e007      	b.n	8002b22 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002b1a:	f023 0303 	bic.w	r3, r3, #3
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3714      	adds	r7, #20
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
 8002b32:	bf00      	nop
 8002b34:	aaaaaaab 	.word	0xaaaaaaab
 8002b38:	08007a24 	.word	0x08007a24

08002b3c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b44:	2300      	movs	r3, #0
 8002b46:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d11f      	bne.n	8002b96 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	2b03      	cmp	r3, #3
 8002b5a:	d856      	bhi.n	8002c0a <DMA_CheckFifoParam+0xce>
 8002b5c:	a201      	add	r2, pc, #4	; (adr r2, 8002b64 <DMA_CheckFifoParam+0x28>)
 8002b5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b62:	bf00      	nop
 8002b64:	08002b75 	.word	0x08002b75
 8002b68:	08002b87 	.word	0x08002b87
 8002b6c:	08002b75 	.word	0x08002b75
 8002b70:	08002c0b 	.word	0x08002c0b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d046      	beq.n	8002c0e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b80:	2301      	movs	r3, #1
 8002b82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b84:	e043      	b.n	8002c0e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b8a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b8e:	d140      	bne.n	8002c12 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b94:	e03d      	b.n	8002c12 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b9e:	d121      	bne.n	8002be4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	2b03      	cmp	r3, #3
 8002ba4:	d837      	bhi.n	8002c16 <DMA_CheckFifoParam+0xda>
 8002ba6:	a201      	add	r2, pc, #4	; (adr r2, 8002bac <DMA_CheckFifoParam+0x70>)
 8002ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bac:	08002bbd 	.word	0x08002bbd
 8002bb0:	08002bc3 	.word	0x08002bc3
 8002bb4:	08002bbd 	.word	0x08002bbd
 8002bb8:	08002bd5 	.word	0x08002bd5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	73fb      	strb	r3, [r7, #15]
      break;
 8002bc0:	e030      	b.n	8002c24 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d025      	beq.n	8002c1a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bd2:	e022      	b.n	8002c1a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bdc:	d11f      	bne.n	8002c1e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002be2:	e01c      	b.n	8002c1e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d903      	bls.n	8002bf2 <DMA_CheckFifoParam+0xb6>
 8002bea:	68bb      	ldr	r3, [r7, #8]
 8002bec:	2b03      	cmp	r3, #3
 8002bee:	d003      	beq.n	8002bf8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002bf0:	e018      	b.n	8002c24 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	73fb      	strb	r3, [r7, #15]
      break;
 8002bf6:	e015      	b.n	8002c24 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bfc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d00e      	beq.n	8002c22 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	73fb      	strb	r3, [r7, #15]
      break;
 8002c08:	e00b      	b.n	8002c22 <DMA_CheckFifoParam+0xe6>
      break;
 8002c0a:	bf00      	nop
 8002c0c:	e00a      	b.n	8002c24 <DMA_CheckFifoParam+0xe8>
      break;
 8002c0e:	bf00      	nop
 8002c10:	e008      	b.n	8002c24 <DMA_CheckFifoParam+0xe8>
      break;
 8002c12:	bf00      	nop
 8002c14:	e006      	b.n	8002c24 <DMA_CheckFifoParam+0xe8>
      break;
 8002c16:	bf00      	nop
 8002c18:	e004      	b.n	8002c24 <DMA_CheckFifoParam+0xe8>
      break;
 8002c1a:	bf00      	nop
 8002c1c:	e002      	b.n	8002c24 <DMA_CheckFifoParam+0xe8>
      break;   
 8002c1e:	bf00      	nop
 8002c20:	e000      	b.n	8002c24 <DMA_CheckFifoParam+0xe8>
      break;
 8002c22:	bf00      	nop
    }
  } 
  
  return status; 
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c26:	4618      	mov	r0, r3
 8002c28:	3714      	adds	r7, #20
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop

08002c34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b089      	sub	sp, #36	; 0x24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c46:	2300      	movs	r3, #0
 8002c48:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61fb      	str	r3, [r7, #28]
 8002c4e:	e165      	b.n	8002f1c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c50:	2201      	movs	r2, #1
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	fa02 f303 	lsl.w	r3, r2, r3
 8002c58:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	697a      	ldr	r2, [r7, #20]
 8002c60:	4013      	ands	r3, r2
 8002c62:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	f040 8154 	bne.w	8002f16 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f003 0303 	and.w	r3, r3, #3
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d005      	beq.n	8002c86 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d130      	bne.n	8002ce8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	2203      	movs	r2, #3
 8002c92:	fa02 f303 	lsl.w	r3, r2, r3
 8002c96:	43db      	mvns	r3, r3
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	68da      	ldr	r2, [r3, #12]
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	005b      	lsls	r3, r3, #1
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	091b      	lsrs	r3, r3, #4
 8002cd2:	f003 0201 	and.w	r2, r3, #1
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cdc:	69ba      	ldr	r2, [r7, #24]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 0303 	and.w	r3, r3, #3
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d017      	beq.n	8002d24 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	2203      	movs	r2, #3
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	43db      	mvns	r3, r3
 8002d06:	69ba      	ldr	r2, [r7, #24]
 8002d08:	4013      	ands	r3, r2
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	005b      	lsls	r3, r3, #1
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	69ba      	ldr	r2, [r7, #24]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f003 0303 	and.w	r3, r3, #3
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	d123      	bne.n	8002d78 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	08da      	lsrs	r2, r3, #3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3208      	adds	r2, #8
 8002d38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	f003 0307 	and.w	r3, r3, #7
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	220f      	movs	r2, #15
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4013      	ands	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	691a      	ldr	r2, [r3, #16]
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f003 0307 	and.w	r3, r3, #7
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	08da      	lsrs	r2, r3, #3
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	3208      	adds	r2, #8
 8002d72:	69b9      	ldr	r1, [r7, #24]
 8002d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	005b      	lsls	r3, r3, #1
 8002d82:	2203      	movs	r2, #3
 8002d84:	fa02 f303 	lsl.w	r3, r2, r3
 8002d88:	43db      	mvns	r3, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4013      	ands	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	f003 0203 	and.w	r2, r3, #3
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 80ae 	beq.w	8002f16 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	4b5d      	ldr	r3, [pc, #372]	; (8002f34 <HAL_GPIO_Init+0x300>)
 8002dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc2:	4a5c      	ldr	r2, [pc, #368]	; (8002f34 <HAL_GPIO_Init+0x300>)
 8002dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8002dca:	4b5a      	ldr	r3, [pc, #360]	; (8002f34 <HAL_GPIO_Init+0x300>)
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dd2:	60fb      	str	r3, [r7, #12]
 8002dd4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dd6:	4a58      	ldr	r2, [pc, #352]	; (8002f38 <HAL_GPIO_Init+0x304>)
 8002dd8:	69fb      	ldr	r3, [r7, #28]
 8002dda:	089b      	lsrs	r3, r3, #2
 8002ddc:	3302      	adds	r3, #2
 8002dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	f003 0303 	and.w	r3, r3, #3
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	220f      	movs	r2, #15
 8002dee:	fa02 f303 	lsl.w	r3, r2, r3
 8002df2:	43db      	mvns	r3, r3
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4013      	ands	r3, r2
 8002df8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a4f      	ldr	r2, [pc, #316]	; (8002f3c <HAL_GPIO_Init+0x308>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d025      	beq.n	8002e4e <HAL_GPIO_Init+0x21a>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a4e      	ldr	r2, [pc, #312]	; (8002f40 <HAL_GPIO_Init+0x30c>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d01f      	beq.n	8002e4a <HAL_GPIO_Init+0x216>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a4d      	ldr	r2, [pc, #308]	; (8002f44 <HAL_GPIO_Init+0x310>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d019      	beq.n	8002e46 <HAL_GPIO_Init+0x212>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a4c      	ldr	r2, [pc, #304]	; (8002f48 <HAL_GPIO_Init+0x314>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d013      	beq.n	8002e42 <HAL_GPIO_Init+0x20e>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a4b      	ldr	r2, [pc, #300]	; (8002f4c <HAL_GPIO_Init+0x318>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d00d      	beq.n	8002e3e <HAL_GPIO_Init+0x20a>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a4a      	ldr	r2, [pc, #296]	; (8002f50 <HAL_GPIO_Init+0x31c>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d007      	beq.n	8002e3a <HAL_GPIO_Init+0x206>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a49      	ldr	r2, [pc, #292]	; (8002f54 <HAL_GPIO_Init+0x320>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d101      	bne.n	8002e36 <HAL_GPIO_Init+0x202>
 8002e32:	2306      	movs	r3, #6
 8002e34:	e00c      	b.n	8002e50 <HAL_GPIO_Init+0x21c>
 8002e36:	2307      	movs	r3, #7
 8002e38:	e00a      	b.n	8002e50 <HAL_GPIO_Init+0x21c>
 8002e3a:	2305      	movs	r3, #5
 8002e3c:	e008      	b.n	8002e50 <HAL_GPIO_Init+0x21c>
 8002e3e:	2304      	movs	r3, #4
 8002e40:	e006      	b.n	8002e50 <HAL_GPIO_Init+0x21c>
 8002e42:	2303      	movs	r3, #3
 8002e44:	e004      	b.n	8002e50 <HAL_GPIO_Init+0x21c>
 8002e46:	2302      	movs	r3, #2
 8002e48:	e002      	b.n	8002e50 <HAL_GPIO_Init+0x21c>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <HAL_GPIO_Init+0x21c>
 8002e4e:	2300      	movs	r3, #0
 8002e50:	69fa      	ldr	r2, [r7, #28]
 8002e52:	f002 0203 	and.w	r2, r2, #3
 8002e56:	0092      	lsls	r2, r2, #2
 8002e58:	4093      	lsls	r3, r2
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e60:	4935      	ldr	r1, [pc, #212]	; (8002f38 <HAL_GPIO_Init+0x304>)
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	089b      	lsrs	r3, r3, #2
 8002e66:	3302      	adds	r3, #2
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e6e:	4b3a      	ldr	r3, [pc, #232]	; (8002f58 <HAL_GPIO_Init+0x324>)
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	43db      	mvns	r3, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e92:	4a31      	ldr	r2, [pc, #196]	; (8002f58 <HAL_GPIO_Init+0x324>)
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e98:	4b2f      	ldr	r3, [pc, #188]	; (8002f58 <HAL_GPIO_Init+0x324>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d003      	beq.n	8002ebc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ebc:	4a26      	ldr	r2, [pc, #152]	; (8002f58 <HAL_GPIO_Init+0x324>)
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ec2:	4b25      	ldr	r3, [pc, #148]	; (8002f58 <HAL_GPIO_Init+0x324>)
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	43db      	mvns	r3, r3
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	4013      	ands	r3, r2
 8002ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d003      	beq.n	8002ee6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002ede:	69ba      	ldr	r2, [r7, #24]
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ee6:	4a1c      	ldr	r2, [pc, #112]	; (8002f58 <HAL_GPIO_Init+0x324>)
 8002ee8:	69bb      	ldr	r3, [r7, #24]
 8002eea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002eec:	4b1a      	ldr	r3, [pc, #104]	; (8002f58 <HAL_GPIO_Init+0x324>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f10:	4a11      	ldr	r2, [pc, #68]	; (8002f58 <HAL_GPIO_Init+0x324>)
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	61fb      	str	r3, [r7, #28]
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	2b0f      	cmp	r3, #15
 8002f20:	f67f ae96 	bls.w	8002c50 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f24:	bf00      	nop
 8002f26:	bf00      	nop
 8002f28:	3724      	adds	r7, #36	; 0x24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	40023800 	.word	0x40023800
 8002f38:	40013800 	.word	0x40013800
 8002f3c:	40020000 	.word	0x40020000
 8002f40:	40020400 	.word	0x40020400
 8002f44:	40020800 	.word	0x40020800
 8002f48:	40020c00 	.word	0x40020c00
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	40021400 	.word	0x40021400
 8002f54:	40021800 	.word	0x40021800
 8002f58:	40013c00 	.word	0x40013c00

08002f5c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b083      	sub	sp, #12
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	460b      	mov	r3, r1
 8002f66:	807b      	strh	r3, [r7, #2]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f6c:	787b      	ldrb	r3, [r7, #1]
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d003      	beq.n	8002f7a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f72:	887a      	ldrh	r2, [r7, #2]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f78:	e003      	b.n	8002f82 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f7a:	887b      	ldrh	r3, [r7, #2]
 8002f7c:	041a      	lsls	r2, r3, #16
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	619a      	str	r2, [r3, #24]
}
 8002f82:	bf00      	nop
 8002f84:	370c      	adds	r7, #12
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr

08002f8e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b085      	sub	sp, #20
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
 8002f96:	460b      	mov	r3, r1
 8002f98:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	695b      	ldr	r3, [r3, #20]
 8002f9e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002fa0:	887a      	ldrh	r2, [r7, #2]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	041a      	lsls	r2, r3, #16
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	43d9      	mvns	r1, r3
 8002fac:	887b      	ldrh	r3, [r7, #2]
 8002fae:	400b      	ands	r3, r1
 8002fb0:	431a      	orrs	r2, r3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	619a      	str	r2, [r3, #24]
}
 8002fb6:	bf00      	nop
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
	...

08002fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0cc      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fd8:	4b68      	ldr	r3, [pc, #416]	; (800317c <HAL_RCC_ClockConfig+0x1b8>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 030f 	and.w	r3, r3, #15
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d90c      	bls.n	8003000 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe6:	4b65      	ldr	r3, [pc, #404]	; (800317c <HAL_RCC_ClockConfig+0x1b8>)
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fee:	4b63      	ldr	r3, [pc, #396]	; (800317c <HAL_RCC_ClockConfig+0x1b8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 030f 	and.w	r3, r3, #15
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d001      	beq.n	8003000 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e0b8      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d020      	beq.n	800304e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003018:	4b59      	ldr	r3, [pc, #356]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	4a58      	ldr	r2, [pc, #352]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003022:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003030:	4b53      	ldr	r3, [pc, #332]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	4a52      	ldr	r2, [pc, #328]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800303a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800303c:	4b50      	ldr	r3, [pc, #320]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	494d      	ldr	r1, [pc, #308]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800304a:	4313      	orrs	r3, r2
 800304c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d044      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d107      	bne.n	8003072 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003062:	4b47      	ldr	r3, [pc, #284]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d119      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e07f      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b02      	cmp	r3, #2
 8003078:	d003      	beq.n	8003082 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800307e:	2b03      	cmp	r3, #3
 8003080:	d107      	bne.n	8003092 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003082:	4b3f      	ldr	r3, [pc, #252]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d109      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e06f      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003092:	4b3b      	ldr	r3, [pc, #236]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e067      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030a2:	4b37      	ldr	r3, [pc, #220]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f023 0203 	bic.w	r2, r3, #3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	4934      	ldr	r1, [pc, #208]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030b4:	f7fe fc86 	bl	80019c4 <HAL_GetTick>
 80030b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ba:	e00a      	b.n	80030d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030bc:	f7fe fc82 	bl	80019c4 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e04f      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d2:	4b2b      	ldr	r3, [pc, #172]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 020c 	and.w	r2, r3, #12
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d1eb      	bne.n	80030bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030e4:	4b25      	ldr	r3, [pc, #148]	; (800317c <HAL_RCC_ClockConfig+0x1b8>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 030f 	and.w	r3, r3, #15
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d20c      	bcs.n	800310c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f2:	4b22      	ldr	r3, [pc, #136]	; (800317c <HAL_RCC_ClockConfig+0x1b8>)
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fa:	4b20      	ldr	r3, [pc, #128]	; (800317c <HAL_RCC_ClockConfig+0x1b8>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 030f 	and.w	r3, r3, #15
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e032      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d008      	beq.n	800312a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003118:	4b19      	ldr	r3, [pc, #100]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	4916      	ldr	r1, [pc, #88]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	4313      	orrs	r3, r2
 8003128:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b00      	cmp	r3, #0
 8003134:	d009      	beq.n	800314a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003136:	4b12      	ldr	r3, [pc, #72]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	490e      	ldr	r1, [pc, #56]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	4313      	orrs	r3, r2
 8003148:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800314a:	f000 f855 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 800314e:	4602      	mov	r2, r0
 8003150:	4b0b      	ldr	r3, [pc, #44]	; (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	091b      	lsrs	r3, r3, #4
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	490a      	ldr	r1, [pc, #40]	; (8003184 <HAL_RCC_ClockConfig+0x1c0>)
 800315c:	5ccb      	ldrb	r3, [r1, r3]
 800315e:	fa22 f303 	lsr.w	r3, r2, r3
 8003162:	4a09      	ldr	r2, [pc, #36]	; (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003166:	4b09      	ldr	r3, [pc, #36]	; (800318c <HAL_RCC_ClockConfig+0x1c8>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f7fe fbe6 	bl	800193c <HAL_InitTick>

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40023c00 	.word	0x40023c00
 8003180:	40023800 	.word	0x40023800
 8003184:	08007a0c 	.word	0x08007a0c
 8003188:	20000004 	.word	0x20000004
 800318c:	20000008 	.word	0x20000008

08003190 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003190:	b480      	push	{r7}
 8003192:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003194:	4b03      	ldr	r3, [pc, #12]	; (80031a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003196:	681b      	ldr	r3, [r3, #0]
}
 8003198:	4618      	mov	r0, r3
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
 80031a2:	bf00      	nop
 80031a4:	20000004 	.word	0x20000004

080031a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031ac:	f7ff fff0 	bl	8003190 <HAL_RCC_GetHCLKFreq>
 80031b0:	4602      	mov	r2, r0
 80031b2:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	0a9b      	lsrs	r3, r3, #10
 80031b8:	f003 0307 	and.w	r3, r3, #7
 80031bc:	4903      	ldr	r1, [pc, #12]	; (80031cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031be:	5ccb      	ldrb	r3, [r1, r3]
 80031c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	40023800 	.word	0x40023800
 80031cc:	08007a1c 	.word	0x08007a1c

080031d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031d4:	f7ff ffdc 	bl	8003190 <HAL_RCC_GetHCLKFreq>
 80031d8:	4602      	mov	r2, r0
 80031da:	4b05      	ldr	r3, [pc, #20]	; (80031f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	0b5b      	lsrs	r3, r3, #13
 80031e0:	f003 0307 	and.w	r3, r3, #7
 80031e4:	4903      	ldr	r1, [pc, #12]	; (80031f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031e6:	5ccb      	ldrb	r3, [r1, r3]
 80031e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40023800 	.word	0x40023800
 80031f4:	08007a1c 	.word	0x08007a1c

080031f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031fc:	b0ae      	sub	sp, #184	; 0xb8
 80031fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003206:	2300      	movs	r3, #0
 8003208:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800320c:	2300      	movs	r3, #0
 800320e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003218:	2300      	movs	r3, #0
 800321a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800321e:	4bcb      	ldr	r3, [pc, #812]	; (800354c <HAL_RCC_GetSysClockFreq+0x354>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	f003 030c 	and.w	r3, r3, #12
 8003226:	2b0c      	cmp	r3, #12
 8003228:	f200 8206 	bhi.w	8003638 <HAL_RCC_GetSysClockFreq+0x440>
 800322c:	a201      	add	r2, pc, #4	; (adr r2, 8003234 <HAL_RCC_GetSysClockFreq+0x3c>)
 800322e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003232:	bf00      	nop
 8003234:	08003269 	.word	0x08003269
 8003238:	08003639 	.word	0x08003639
 800323c:	08003639 	.word	0x08003639
 8003240:	08003639 	.word	0x08003639
 8003244:	08003271 	.word	0x08003271
 8003248:	08003639 	.word	0x08003639
 800324c:	08003639 	.word	0x08003639
 8003250:	08003639 	.word	0x08003639
 8003254:	08003279 	.word	0x08003279
 8003258:	08003639 	.word	0x08003639
 800325c:	08003639 	.word	0x08003639
 8003260:	08003639 	.word	0x08003639
 8003264:	08003469 	.word	0x08003469
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003268:	4bb9      	ldr	r3, [pc, #740]	; (8003550 <HAL_RCC_GetSysClockFreq+0x358>)
 800326a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800326e:	e1e7      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003270:	4bb8      	ldr	r3, [pc, #736]	; (8003554 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003272:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003276:	e1e3      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003278:	4bb4      	ldr	r3, [pc, #720]	; (800354c <HAL_RCC_GetSysClockFreq+0x354>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003280:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003284:	4bb1      	ldr	r3, [pc, #708]	; (800354c <HAL_RCC_GetSysClockFreq+0x354>)
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d071      	beq.n	8003374 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003290:	4bae      	ldr	r3, [pc, #696]	; (800354c <HAL_RCC_GetSysClockFreq+0x354>)
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	099b      	lsrs	r3, r3, #6
 8003296:	2200      	movs	r2, #0
 8003298:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800329c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80032a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032ac:	2300      	movs	r3, #0
 80032ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80032b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80032b6:	4622      	mov	r2, r4
 80032b8:	462b      	mov	r3, r5
 80032ba:	f04f 0000 	mov.w	r0, #0
 80032be:	f04f 0100 	mov.w	r1, #0
 80032c2:	0159      	lsls	r1, r3, #5
 80032c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032c8:	0150      	lsls	r0, r2, #5
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	4621      	mov	r1, r4
 80032d0:	1a51      	subs	r1, r2, r1
 80032d2:	6439      	str	r1, [r7, #64]	; 0x40
 80032d4:	4629      	mov	r1, r5
 80032d6:	eb63 0301 	sbc.w	r3, r3, r1
 80032da:	647b      	str	r3, [r7, #68]	; 0x44
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	f04f 0300 	mov.w	r3, #0
 80032e4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80032e8:	4649      	mov	r1, r9
 80032ea:	018b      	lsls	r3, r1, #6
 80032ec:	4641      	mov	r1, r8
 80032ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032f2:	4641      	mov	r1, r8
 80032f4:	018a      	lsls	r2, r1, #6
 80032f6:	4641      	mov	r1, r8
 80032f8:	1a51      	subs	r1, r2, r1
 80032fa:	63b9      	str	r1, [r7, #56]	; 0x38
 80032fc:	4649      	mov	r1, r9
 80032fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003302:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003304:	f04f 0200 	mov.w	r2, #0
 8003308:	f04f 0300 	mov.w	r3, #0
 800330c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003310:	4649      	mov	r1, r9
 8003312:	00cb      	lsls	r3, r1, #3
 8003314:	4641      	mov	r1, r8
 8003316:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800331a:	4641      	mov	r1, r8
 800331c:	00ca      	lsls	r2, r1, #3
 800331e:	4610      	mov	r0, r2
 8003320:	4619      	mov	r1, r3
 8003322:	4603      	mov	r3, r0
 8003324:	4622      	mov	r2, r4
 8003326:	189b      	adds	r3, r3, r2
 8003328:	633b      	str	r3, [r7, #48]	; 0x30
 800332a:	462b      	mov	r3, r5
 800332c:	460a      	mov	r2, r1
 800332e:	eb42 0303 	adc.w	r3, r2, r3
 8003332:	637b      	str	r3, [r7, #52]	; 0x34
 8003334:	f04f 0200 	mov.w	r2, #0
 8003338:	f04f 0300 	mov.w	r3, #0
 800333c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003340:	4629      	mov	r1, r5
 8003342:	024b      	lsls	r3, r1, #9
 8003344:	4621      	mov	r1, r4
 8003346:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800334a:	4621      	mov	r1, r4
 800334c:	024a      	lsls	r2, r1, #9
 800334e:	4610      	mov	r0, r2
 8003350:	4619      	mov	r1, r3
 8003352:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003356:	2200      	movs	r2, #0
 8003358:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800335c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003360:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003364:	f7fd fc90 	bl	8000c88 <__aeabi_uldivmod>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	4613      	mov	r3, r2
 800336e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003372:	e067      	b.n	8003444 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003374:	4b75      	ldr	r3, [pc, #468]	; (800354c <HAL_RCC_GetSysClockFreq+0x354>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	099b      	lsrs	r3, r3, #6
 800337a:	2200      	movs	r2, #0
 800337c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003380:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003384:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003388:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800338c:	67bb      	str	r3, [r7, #120]	; 0x78
 800338e:	2300      	movs	r3, #0
 8003390:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003392:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003396:	4622      	mov	r2, r4
 8003398:	462b      	mov	r3, r5
 800339a:	f04f 0000 	mov.w	r0, #0
 800339e:	f04f 0100 	mov.w	r1, #0
 80033a2:	0159      	lsls	r1, r3, #5
 80033a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033a8:	0150      	lsls	r0, r2, #5
 80033aa:	4602      	mov	r2, r0
 80033ac:	460b      	mov	r3, r1
 80033ae:	4621      	mov	r1, r4
 80033b0:	1a51      	subs	r1, r2, r1
 80033b2:	62b9      	str	r1, [r7, #40]	; 0x28
 80033b4:	4629      	mov	r1, r5
 80033b6:	eb63 0301 	sbc.w	r3, r3, r1
 80033ba:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	f04f 0300 	mov.w	r3, #0
 80033c4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80033c8:	4649      	mov	r1, r9
 80033ca:	018b      	lsls	r3, r1, #6
 80033cc:	4641      	mov	r1, r8
 80033ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033d2:	4641      	mov	r1, r8
 80033d4:	018a      	lsls	r2, r1, #6
 80033d6:	4641      	mov	r1, r8
 80033d8:	ebb2 0a01 	subs.w	sl, r2, r1
 80033dc:	4649      	mov	r1, r9
 80033de:	eb63 0b01 	sbc.w	fp, r3, r1
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	f04f 0300 	mov.w	r3, #0
 80033ea:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033ee:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033f2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033f6:	4692      	mov	sl, r2
 80033f8:	469b      	mov	fp, r3
 80033fa:	4623      	mov	r3, r4
 80033fc:	eb1a 0303 	adds.w	r3, sl, r3
 8003400:	623b      	str	r3, [r7, #32]
 8003402:	462b      	mov	r3, r5
 8003404:	eb4b 0303 	adc.w	r3, fp, r3
 8003408:	627b      	str	r3, [r7, #36]	; 0x24
 800340a:	f04f 0200 	mov.w	r2, #0
 800340e:	f04f 0300 	mov.w	r3, #0
 8003412:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003416:	4629      	mov	r1, r5
 8003418:	028b      	lsls	r3, r1, #10
 800341a:	4621      	mov	r1, r4
 800341c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003420:	4621      	mov	r1, r4
 8003422:	028a      	lsls	r2, r1, #10
 8003424:	4610      	mov	r0, r2
 8003426:	4619      	mov	r1, r3
 8003428:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800342c:	2200      	movs	r2, #0
 800342e:	673b      	str	r3, [r7, #112]	; 0x70
 8003430:	677a      	str	r2, [r7, #116]	; 0x74
 8003432:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003436:	f7fd fc27 	bl	8000c88 <__aeabi_uldivmod>
 800343a:	4602      	mov	r2, r0
 800343c:	460b      	mov	r3, r1
 800343e:	4613      	mov	r3, r2
 8003440:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003444:	4b41      	ldr	r3, [pc, #260]	; (800354c <HAL_RCC_GetSysClockFreq+0x354>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	0c1b      	lsrs	r3, r3, #16
 800344a:	f003 0303 	and.w	r3, r3, #3
 800344e:	3301      	adds	r3, #1
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003456:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800345a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800345e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003462:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003466:	e0eb      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003468:	4b38      	ldr	r3, [pc, #224]	; (800354c <HAL_RCC_GetSysClockFreq+0x354>)
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003470:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003474:	4b35      	ldr	r3, [pc, #212]	; (800354c <HAL_RCC_GetSysClockFreq+0x354>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d06b      	beq.n	8003558 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003480:	4b32      	ldr	r3, [pc, #200]	; (800354c <HAL_RCC_GetSysClockFreq+0x354>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	099b      	lsrs	r3, r3, #6
 8003486:	2200      	movs	r2, #0
 8003488:	66bb      	str	r3, [r7, #104]	; 0x68
 800348a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800348c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800348e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003492:	663b      	str	r3, [r7, #96]	; 0x60
 8003494:	2300      	movs	r3, #0
 8003496:	667b      	str	r3, [r7, #100]	; 0x64
 8003498:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800349c:	4622      	mov	r2, r4
 800349e:	462b      	mov	r3, r5
 80034a0:	f04f 0000 	mov.w	r0, #0
 80034a4:	f04f 0100 	mov.w	r1, #0
 80034a8:	0159      	lsls	r1, r3, #5
 80034aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034ae:	0150      	lsls	r0, r2, #5
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	4621      	mov	r1, r4
 80034b6:	1a51      	subs	r1, r2, r1
 80034b8:	61b9      	str	r1, [r7, #24]
 80034ba:	4629      	mov	r1, r5
 80034bc:	eb63 0301 	sbc.w	r3, r3, r1
 80034c0:	61fb      	str	r3, [r7, #28]
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	f04f 0300 	mov.w	r3, #0
 80034ca:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80034ce:	4659      	mov	r1, fp
 80034d0:	018b      	lsls	r3, r1, #6
 80034d2:	4651      	mov	r1, sl
 80034d4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034d8:	4651      	mov	r1, sl
 80034da:	018a      	lsls	r2, r1, #6
 80034dc:	4651      	mov	r1, sl
 80034de:	ebb2 0801 	subs.w	r8, r2, r1
 80034e2:	4659      	mov	r1, fp
 80034e4:	eb63 0901 	sbc.w	r9, r3, r1
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	f04f 0300 	mov.w	r3, #0
 80034f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034fc:	4690      	mov	r8, r2
 80034fe:	4699      	mov	r9, r3
 8003500:	4623      	mov	r3, r4
 8003502:	eb18 0303 	adds.w	r3, r8, r3
 8003506:	613b      	str	r3, [r7, #16]
 8003508:	462b      	mov	r3, r5
 800350a:	eb49 0303 	adc.w	r3, r9, r3
 800350e:	617b      	str	r3, [r7, #20]
 8003510:	f04f 0200 	mov.w	r2, #0
 8003514:	f04f 0300 	mov.w	r3, #0
 8003518:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800351c:	4629      	mov	r1, r5
 800351e:	024b      	lsls	r3, r1, #9
 8003520:	4621      	mov	r1, r4
 8003522:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003526:	4621      	mov	r1, r4
 8003528:	024a      	lsls	r2, r1, #9
 800352a:	4610      	mov	r0, r2
 800352c:	4619      	mov	r1, r3
 800352e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003532:	2200      	movs	r2, #0
 8003534:	65bb      	str	r3, [r7, #88]	; 0x58
 8003536:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003538:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800353c:	f7fd fba4 	bl	8000c88 <__aeabi_uldivmod>
 8003540:	4602      	mov	r2, r0
 8003542:	460b      	mov	r3, r1
 8003544:	4613      	mov	r3, r2
 8003546:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800354a:	e065      	b.n	8003618 <HAL_RCC_GetSysClockFreq+0x420>
 800354c:	40023800 	.word	0x40023800
 8003550:	00f42400 	.word	0x00f42400
 8003554:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003558:	4b3d      	ldr	r3, [pc, #244]	; (8003650 <HAL_RCC_GetSysClockFreq+0x458>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	099b      	lsrs	r3, r3, #6
 800355e:	2200      	movs	r2, #0
 8003560:	4618      	mov	r0, r3
 8003562:	4611      	mov	r1, r2
 8003564:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003568:	653b      	str	r3, [r7, #80]	; 0x50
 800356a:	2300      	movs	r3, #0
 800356c:	657b      	str	r3, [r7, #84]	; 0x54
 800356e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003572:	4642      	mov	r2, r8
 8003574:	464b      	mov	r3, r9
 8003576:	f04f 0000 	mov.w	r0, #0
 800357a:	f04f 0100 	mov.w	r1, #0
 800357e:	0159      	lsls	r1, r3, #5
 8003580:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003584:	0150      	lsls	r0, r2, #5
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	4641      	mov	r1, r8
 800358c:	1a51      	subs	r1, r2, r1
 800358e:	60b9      	str	r1, [r7, #8]
 8003590:	4649      	mov	r1, r9
 8003592:	eb63 0301 	sbc.w	r3, r3, r1
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	f04f 0200 	mov.w	r2, #0
 800359c:	f04f 0300 	mov.w	r3, #0
 80035a0:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80035a4:	4659      	mov	r1, fp
 80035a6:	018b      	lsls	r3, r1, #6
 80035a8:	4651      	mov	r1, sl
 80035aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035ae:	4651      	mov	r1, sl
 80035b0:	018a      	lsls	r2, r1, #6
 80035b2:	4651      	mov	r1, sl
 80035b4:	1a54      	subs	r4, r2, r1
 80035b6:	4659      	mov	r1, fp
 80035b8:	eb63 0501 	sbc.w	r5, r3, r1
 80035bc:	f04f 0200 	mov.w	r2, #0
 80035c0:	f04f 0300 	mov.w	r3, #0
 80035c4:	00eb      	lsls	r3, r5, #3
 80035c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035ca:	00e2      	lsls	r2, r4, #3
 80035cc:	4614      	mov	r4, r2
 80035ce:	461d      	mov	r5, r3
 80035d0:	4643      	mov	r3, r8
 80035d2:	18e3      	adds	r3, r4, r3
 80035d4:	603b      	str	r3, [r7, #0]
 80035d6:	464b      	mov	r3, r9
 80035d8:	eb45 0303 	adc.w	r3, r5, r3
 80035dc:	607b      	str	r3, [r7, #4]
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	f04f 0300 	mov.w	r3, #0
 80035e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035ea:	4629      	mov	r1, r5
 80035ec:	028b      	lsls	r3, r1, #10
 80035ee:	4621      	mov	r1, r4
 80035f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035f4:	4621      	mov	r1, r4
 80035f6:	028a      	lsls	r2, r1, #10
 80035f8:	4610      	mov	r0, r2
 80035fa:	4619      	mov	r1, r3
 80035fc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003600:	2200      	movs	r2, #0
 8003602:	64bb      	str	r3, [r7, #72]	; 0x48
 8003604:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003606:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800360a:	f7fd fb3d 	bl	8000c88 <__aeabi_uldivmod>
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
 8003612:	4613      	mov	r3, r2
 8003614:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003618:	4b0d      	ldr	r3, [pc, #52]	; (8003650 <HAL_RCC_GetSysClockFreq+0x458>)
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	0f1b      	lsrs	r3, r3, #28
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003626:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800362a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800362e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003632:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003636:	e003      	b.n	8003640 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003638:	4b06      	ldr	r3, [pc, #24]	; (8003654 <HAL_RCC_GetSysClockFreq+0x45c>)
 800363a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800363e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003640:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003644:	4618      	mov	r0, r3
 8003646:	37b8      	adds	r7, #184	; 0xb8
 8003648:	46bd      	mov	sp, r7
 800364a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800364e:	bf00      	nop
 8003650:	40023800 	.word	0x40023800
 8003654:	00f42400 	.word	0x00f42400

08003658 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b086      	sub	sp, #24
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e28d      	b.n	8003b86 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	f000 8083 	beq.w	800377e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003678:	4b94      	ldr	r3, [pc, #592]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f003 030c 	and.w	r3, r3, #12
 8003680:	2b04      	cmp	r3, #4
 8003682:	d019      	beq.n	80036b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003684:	4b91      	ldr	r3, [pc, #580]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800368c:	2b08      	cmp	r3, #8
 800368e:	d106      	bne.n	800369e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003690:	4b8e      	ldr	r3, [pc, #568]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003698:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800369c:	d00c      	beq.n	80036b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800369e:	4b8b      	ldr	r3, [pc, #556]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036a6:	2b0c      	cmp	r3, #12
 80036a8:	d112      	bne.n	80036d0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036aa:	4b88      	ldr	r3, [pc, #544]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036b6:	d10b      	bne.n	80036d0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036b8:	4b84      	ldr	r3, [pc, #528]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d05b      	beq.n	800377c <HAL_RCC_OscConfig+0x124>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d157      	bne.n	800377c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80036cc:	2301      	movs	r3, #1
 80036ce:	e25a      	b.n	8003b86 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d8:	d106      	bne.n	80036e8 <HAL_RCC_OscConfig+0x90>
 80036da:	4b7c      	ldr	r3, [pc, #496]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a7b      	ldr	r2, [pc, #492]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 80036e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e4:	6013      	str	r3, [r2, #0]
 80036e6:	e01d      	b.n	8003724 <HAL_RCC_OscConfig+0xcc>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036f0:	d10c      	bne.n	800370c <HAL_RCC_OscConfig+0xb4>
 80036f2:	4b76      	ldr	r3, [pc, #472]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a75      	ldr	r2, [pc, #468]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 80036f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036fc:	6013      	str	r3, [r2, #0]
 80036fe:	4b73      	ldr	r3, [pc, #460]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a72      	ldr	r2, [pc, #456]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 8003704:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003708:	6013      	str	r3, [r2, #0]
 800370a:	e00b      	b.n	8003724 <HAL_RCC_OscConfig+0xcc>
 800370c:	4b6f      	ldr	r3, [pc, #444]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a6e      	ldr	r2, [pc, #440]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 8003712:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003716:	6013      	str	r3, [r2, #0]
 8003718:	4b6c      	ldr	r3, [pc, #432]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4a6b      	ldr	r2, [pc, #428]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 800371e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003722:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d013      	beq.n	8003754 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372c:	f7fe f94a 	bl	80019c4 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003734:	f7fe f946 	bl	80019c4 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b64      	cmp	r3, #100	; 0x64
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e21f      	b.n	8003b86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003746:	4b61      	ldr	r3, [pc, #388]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d0f0      	beq.n	8003734 <HAL_RCC_OscConfig+0xdc>
 8003752:	e014      	b.n	800377e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003754:	f7fe f936 	bl	80019c4 <HAL_GetTick>
 8003758:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800375a:	e008      	b.n	800376e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800375c:	f7fe f932 	bl	80019c4 <HAL_GetTick>
 8003760:	4602      	mov	r2, r0
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	1ad3      	subs	r3, r2, r3
 8003766:	2b64      	cmp	r3, #100	; 0x64
 8003768:	d901      	bls.n	800376e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e20b      	b.n	8003b86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800376e:	4b57      	ldr	r3, [pc, #348]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1f0      	bne.n	800375c <HAL_RCC_OscConfig+0x104>
 800377a:	e000      	b.n	800377e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800377c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d06f      	beq.n	800386a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800378a:	4b50      	ldr	r3, [pc, #320]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f003 030c 	and.w	r3, r3, #12
 8003792:	2b00      	cmp	r3, #0
 8003794:	d017      	beq.n	80037c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003796:	4b4d      	ldr	r3, [pc, #308]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800379e:	2b08      	cmp	r3, #8
 80037a0:	d105      	bne.n	80037ae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037a2:	4b4a      	ldr	r3, [pc, #296]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00b      	beq.n	80037c6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037ae:	4b47      	ldr	r3, [pc, #284]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037b6:	2b0c      	cmp	r3, #12
 80037b8:	d11c      	bne.n	80037f4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037ba:	4b44      	ldr	r3, [pc, #272]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d116      	bne.n	80037f4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037c6:	4b41      	ldr	r3, [pc, #260]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d005      	beq.n	80037de <HAL_RCC_OscConfig+0x186>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d001      	beq.n	80037de <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e1d3      	b.n	8003b86 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037de:	4b3b      	ldr	r3, [pc, #236]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	00db      	lsls	r3, r3, #3
 80037ec:	4937      	ldr	r1, [pc, #220]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 80037ee:	4313      	orrs	r3, r2
 80037f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037f2:	e03a      	b.n	800386a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d020      	beq.n	800383e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037fc:	4b34      	ldr	r3, [pc, #208]	; (80038d0 <HAL_RCC_OscConfig+0x278>)
 80037fe:	2201      	movs	r2, #1
 8003800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003802:	f7fe f8df 	bl	80019c4 <HAL_GetTick>
 8003806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003808:	e008      	b.n	800381c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800380a:	f7fe f8db 	bl	80019c4 <HAL_GetTick>
 800380e:	4602      	mov	r2, r0
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	d901      	bls.n	800381c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	e1b4      	b.n	8003b86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800381c:	4b2b      	ldr	r3, [pc, #172]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d0f0      	beq.n	800380a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003828:	4b28      	ldr	r3, [pc, #160]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	691b      	ldr	r3, [r3, #16]
 8003834:	00db      	lsls	r3, r3, #3
 8003836:	4925      	ldr	r1, [pc, #148]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 8003838:	4313      	orrs	r3, r2
 800383a:	600b      	str	r3, [r1, #0]
 800383c:	e015      	b.n	800386a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800383e:	4b24      	ldr	r3, [pc, #144]	; (80038d0 <HAL_RCC_OscConfig+0x278>)
 8003840:	2200      	movs	r2, #0
 8003842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003844:	f7fe f8be 	bl	80019c4 <HAL_GetTick>
 8003848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800384c:	f7fe f8ba 	bl	80019c4 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e193      	b.n	8003b86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800385e:	4b1b      	ldr	r3, [pc, #108]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1f0      	bne.n	800384c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	2b00      	cmp	r3, #0
 8003874:	d036      	beq.n	80038e4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	695b      	ldr	r3, [r3, #20]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d016      	beq.n	80038ac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800387e:	4b15      	ldr	r3, [pc, #84]	; (80038d4 <HAL_RCC_OscConfig+0x27c>)
 8003880:	2201      	movs	r2, #1
 8003882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003884:	f7fe f89e 	bl	80019c4 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800388a:	e008      	b.n	800389e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800388c:	f7fe f89a 	bl	80019c4 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	2b02      	cmp	r3, #2
 8003898:	d901      	bls.n	800389e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e173      	b.n	8003b86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800389e:	4b0b      	ldr	r3, [pc, #44]	; (80038cc <HAL_RCC_OscConfig+0x274>)
 80038a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d0f0      	beq.n	800388c <HAL_RCC_OscConfig+0x234>
 80038aa:	e01b      	b.n	80038e4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038ac:	4b09      	ldr	r3, [pc, #36]	; (80038d4 <HAL_RCC_OscConfig+0x27c>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b2:	f7fe f887 	bl	80019c4 <HAL_GetTick>
 80038b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038b8:	e00e      	b.n	80038d8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038ba:	f7fe f883 	bl	80019c4 <HAL_GetTick>
 80038be:	4602      	mov	r2, r0
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	2b02      	cmp	r3, #2
 80038c6:	d907      	bls.n	80038d8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80038c8:	2303      	movs	r3, #3
 80038ca:	e15c      	b.n	8003b86 <HAL_RCC_OscConfig+0x52e>
 80038cc:	40023800 	.word	0x40023800
 80038d0:	42470000 	.word	0x42470000
 80038d4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038d8:	4b8a      	ldr	r3, [pc, #552]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 80038da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d1ea      	bne.n	80038ba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f003 0304 	and.w	r3, r3, #4
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 8097 	beq.w	8003a20 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038f2:	2300      	movs	r3, #0
 80038f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038f6:	4b83      	ldr	r3, [pc, #524]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 80038f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10f      	bne.n	8003922 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003902:	2300      	movs	r3, #0
 8003904:	60bb      	str	r3, [r7, #8]
 8003906:	4b7f      	ldr	r3, [pc, #508]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	4a7e      	ldr	r2, [pc, #504]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 800390c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003910:	6413      	str	r3, [r2, #64]	; 0x40
 8003912:	4b7c      	ldr	r3, [pc, #496]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391a:	60bb      	str	r3, [r7, #8]
 800391c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800391e:	2301      	movs	r3, #1
 8003920:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003922:	4b79      	ldr	r3, [pc, #484]	; (8003b08 <HAL_RCC_OscConfig+0x4b0>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392a:	2b00      	cmp	r3, #0
 800392c:	d118      	bne.n	8003960 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800392e:	4b76      	ldr	r3, [pc, #472]	; (8003b08 <HAL_RCC_OscConfig+0x4b0>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a75      	ldr	r2, [pc, #468]	; (8003b08 <HAL_RCC_OscConfig+0x4b0>)
 8003934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800393a:	f7fe f843 	bl	80019c4 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003942:	f7fe f83f 	bl	80019c4 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e118      	b.n	8003b86 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003954:	4b6c      	ldr	r3, [pc, #432]	; (8003b08 <HAL_RCC_OscConfig+0x4b0>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0f0      	beq.n	8003942 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d106      	bne.n	8003976 <HAL_RCC_OscConfig+0x31e>
 8003968:	4b66      	ldr	r3, [pc, #408]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 800396a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396c:	4a65      	ldr	r2, [pc, #404]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 800396e:	f043 0301 	orr.w	r3, r3, #1
 8003972:	6713      	str	r3, [r2, #112]	; 0x70
 8003974:	e01c      	b.n	80039b0 <HAL_RCC_OscConfig+0x358>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	2b05      	cmp	r3, #5
 800397c:	d10c      	bne.n	8003998 <HAL_RCC_OscConfig+0x340>
 800397e:	4b61      	ldr	r3, [pc, #388]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 8003980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003982:	4a60      	ldr	r2, [pc, #384]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 8003984:	f043 0304 	orr.w	r3, r3, #4
 8003988:	6713      	str	r3, [r2, #112]	; 0x70
 800398a:	4b5e      	ldr	r3, [pc, #376]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 800398c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398e:	4a5d      	ldr	r2, [pc, #372]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 8003990:	f043 0301 	orr.w	r3, r3, #1
 8003994:	6713      	str	r3, [r2, #112]	; 0x70
 8003996:	e00b      	b.n	80039b0 <HAL_RCC_OscConfig+0x358>
 8003998:	4b5a      	ldr	r3, [pc, #360]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 800399a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800399c:	4a59      	ldr	r2, [pc, #356]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 800399e:	f023 0301 	bic.w	r3, r3, #1
 80039a2:	6713      	str	r3, [r2, #112]	; 0x70
 80039a4:	4b57      	ldr	r3, [pc, #348]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 80039a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a8:	4a56      	ldr	r2, [pc, #344]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 80039aa:	f023 0304 	bic.w	r3, r3, #4
 80039ae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d015      	beq.n	80039e4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039b8:	f7fe f804 	bl	80019c4 <HAL_GetTick>
 80039bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039be:	e00a      	b.n	80039d6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039c0:	f7fe f800 	bl	80019c4 <HAL_GetTick>
 80039c4:	4602      	mov	r2, r0
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	1ad3      	subs	r3, r2, r3
 80039ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d901      	bls.n	80039d6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80039d2:	2303      	movs	r3, #3
 80039d4:	e0d7      	b.n	8003b86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d6:	4b4b      	ldr	r3, [pc, #300]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 80039d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039da:	f003 0302 	and.w	r3, r3, #2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d0ee      	beq.n	80039c0 <HAL_RCC_OscConfig+0x368>
 80039e2:	e014      	b.n	8003a0e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e4:	f7fd ffee 	bl	80019c4 <HAL_GetTick>
 80039e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ea:	e00a      	b.n	8003a02 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039ec:	f7fd ffea 	bl	80019c4 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e0c1      	b.n	8003b86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a02:	4b40      	ldr	r3, [pc, #256]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 8003a04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a06:	f003 0302 	and.w	r3, r3, #2
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d1ee      	bne.n	80039ec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a0e:	7dfb      	ldrb	r3, [r7, #23]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d105      	bne.n	8003a20 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a14:	4b3b      	ldr	r3, [pc, #236]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 8003a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a18:	4a3a      	ldr	r2, [pc, #232]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 8003a1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f000 80ad 	beq.w	8003b84 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a2a:	4b36      	ldr	r3, [pc, #216]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 030c 	and.w	r3, r3, #12
 8003a32:	2b08      	cmp	r3, #8
 8003a34:	d060      	beq.n	8003af8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	2b02      	cmp	r3, #2
 8003a3c:	d145      	bne.n	8003aca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a3e:	4b33      	ldr	r3, [pc, #204]	; (8003b0c <HAL_RCC_OscConfig+0x4b4>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a44:	f7fd ffbe 	bl	80019c4 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a4c:	f7fd ffba 	bl	80019c4 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e093      	b.n	8003b86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a5e:	4b29      	ldr	r3, [pc, #164]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f0      	bne.n	8003a4c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	69da      	ldr	r2, [r3, #28]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	019b      	lsls	r3, r3, #6
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a80:	085b      	lsrs	r3, r3, #1
 8003a82:	3b01      	subs	r3, #1
 8003a84:	041b      	lsls	r3, r3, #16
 8003a86:	431a      	orrs	r2, r3
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a8c:	061b      	lsls	r3, r3, #24
 8003a8e:	431a      	orrs	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a94:	071b      	lsls	r3, r3, #28
 8003a96:	491b      	ldr	r1, [pc, #108]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003a9c:	4b1b      	ldr	r3, [pc, #108]	; (8003b0c <HAL_RCC_OscConfig+0x4b4>)
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa2:	f7fd ff8f 	bl	80019c4 <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aa8:	e008      	b.n	8003abc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aaa:	f7fd ff8b 	bl	80019c4 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e064      	b.n	8003b86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003abc:	4b11      	ldr	r3, [pc, #68]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d0f0      	beq.n	8003aaa <HAL_RCC_OscConfig+0x452>
 8003ac8:	e05c      	b.n	8003b84 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aca:	4b10      	ldr	r3, [pc, #64]	; (8003b0c <HAL_RCC_OscConfig+0x4b4>)
 8003acc:	2200      	movs	r2, #0
 8003ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad0:	f7fd ff78 	bl	80019c4 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ad8:	f7fd ff74 	bl	80019c4 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e04d      	b.n	8003b86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aea:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <HAL_RCC_OscConfig+0x4ac>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f0      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x480>
 8003af6:	e045      	b.n	8003b84 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d107      	bne.n	8003b10 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003b00:	2301      	movs	r3, #1
 8003b02:	e040      	b.n	8003b86 <HAL_RCC_OscConfig+0x52e>
 8003b04:	40023800 	.word	0x40023800
 8003b08:	40007000 	.word	0x40007000
 8003b0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b10:	4b1f      	ldr	r3, [pc, #124]	; (8003b90 <HAL_RCC_OscConfig+0x538>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	699b      	ldr	r3, [r3, #24]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d030      	beq.n	8003b80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d129      	bne.n	8003b80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b36:	429a      	cmp	r2, r3
 8003b38:	d122      	bne.n	8003b80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b40:	4013      	ands	r3, r2
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d119      	bne.n	8003b80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b56:	085b      	lsrs	r3, r3, #1
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d10f      	bne.n	8003b80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	d107      	bne.n	8003b80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d001      	beq.n	8003b84 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e000      	b.n	8003b86 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	3718      	adds	r7, #24
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40023800 	.word	0x40023800

08003b94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e03f      	b.n	8003c26 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d106      	bne.n	8003bc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7fd fd0c 	bl	80015d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2224      	movs	r2, #36	; 0x24
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68da      	ldr	r2, [r3, #12]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bd6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f000 fd7b 	bl	80046d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	691a      	ldr	r2, [r3, #16]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695a      	ldr	r2, [r3, #20]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003bfc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68da      	ldr	r2, [r3, #12]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c0c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2220      	movs	r2, #32
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b08a      	sub	sp, #40	; 0x28
 8003c32:	af02      	add	r7, sp, #8
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	603b      	str	r3, [r7, #0]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b20      	cmp	r3, #32
 8003c4c:	d17c      	bne.n	8003d48 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <HAL_UART_Transmit+0x2c>
 8003c54:	88fb      	ldrh	r3, [r7, #6]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e075      	b.n	8003d4a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d101      	bne.n	8003c6c <HAL_UART_Transmit+0x3e>
 8003c68:	2302      	movs	r3, #2
 8003c6a:	e06e      	b.n	8003d4a <HAL_UART_Transmit+0x11c>
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	2200      	movs	r2, #0
 8003c78:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2221      	movs	r2, #33	; 0x21
 8003c7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003c82:	f7fd fe9f 	bl	80019c4 <HAL_GetTick>
 8003c86:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	88fa      	ldrh	r2, [r7, #6]
 8003c8c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	88fa      	ldrh	r2, [r7, #6]
 8003c92:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c9c:	d108      	bne.n	8003cb0 <HAL_UART_Transmit+0x82>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	691b      	ldr	r3, [r3, #16]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d104      	bne.n	8003cb0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	61bb      	str	r3, [r7, #24]
 8003cae:	e003      	b.n	8003cb8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003cc0:	e02a      	b.n	8003d18 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	2180      	movs	r1, #128	; 0x80
 8003ccc:	68f8      	ldr	r0, [r7, #12]
 8003cce:	f000 faf9 	bl	80042c4 <UART_WaitOnFlagUntilTimeout>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e036      	b.n	8003d4a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10b      	bne.n	8003cfa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	881b      	ldrh	r3, [r3, #0]
 8003ce6:	461a      	mov	r2, r3
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003cf0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	3302      	adds	r3, #2
 8003cf6:	61bb      	str	r3, [r7, #24]
 8003cf8:	e007      	b.n	8003d0a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	781a      	ldrb	r2, [r3, #0]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	3301      	adds	r3, #1
 8003d08:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d1cf      	bne.n	8003cc2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	9300      	str	r3, [sp, #0]
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	2140      	movs	r1, #64	; 0x40
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f000 fac9 	bl	80042c4 <UART_WaitOnFlagUntilTimeout>
 8003d32:	4603      	mov	r3, r0
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d001      	beq.n	8003d3c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d38:	2303      	movs	r3, #3
 8003d3a:	e006      	b.n	8003d4a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d44:	2300      	movs	r3, #0
 8003d46:	e000      	b.n	8003d4a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003d48:	2302      	movs	r3, #2
  }
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3720      	adds	r7, #32
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}
	...

08003d54 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b0ba      	sub	sp, #232	; 0xe8
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003d80:	2300      	movs	r3, #0
 8003d82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d8a:	f003 030f 	and.w	r3, r3, #15
 8003d8e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003d92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10f      	bne.n	8003dba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d9e:	f003 0320 	and.w	r3, r3, #32
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d009      	beq.n	8003dba <HAL_UART_IRQHandler+0x66>
 8003da6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003daa:	f003 0320 	and.w	r3, r3, #32
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d003      	beq.n	8003dba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	f000 fbd3 	bl	800455e <UART_Receive_IT>
      return;
 8003db8:	e256      	b.n	8004268 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003dba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 80de 	beq.w	8003f80 <HAL_UART_IRQHandler+0x22c>
 8003dc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d106      	bne.n	8003dde <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003dd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dd4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	f000 80d1 	beq.w	8003f80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003dde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003de2:	f003 0301 	and.w	r3, r3, #1
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00b      	beq.n	8003e02 <HAL_UART_IRQHandler+0xae>
 8003dea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d005      	beq.n	8003e02 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	f043 0201 	orr.w	r2, r3, #1
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e06:	f003 0304 	and.w	r3, r3, #4
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d00b      	beq.n	8003e26 <HAL_UART_IRQHandler+0xd2>
 8003e0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d005      	beq.n	8003e26 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	f043 0202 	orr.w	r2, r3, #2
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003e26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00b      	beq.n	8003e4a <HAL_UART_IRQHandler+0xf6>
 8003e32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d005      	beq.n	8003e4a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	f043 0204 	orr.w	r2, r3, #4
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e4e:	f003 0308 	and.w	r3, r3, #8
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d011      	beq.n	8003e7a <HAL_UART_IRQHandler+0x126>
 8003e56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e5a:	f003 0320 	and.w	r3, r3, #32
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d105      	bne.n	8003e6e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003e62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003e66:	f003 0301 	and.w	r3, r3, #1
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d005      	beq.n	8003e7a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	f043 0208 	orr.w	r2, r3, #8
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 81ed 	beq.w	800425e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e88:	f003 0320 	and.w	r3, r3, #32
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d008      	beq.n	8003ea2 <HAL_UART_IRQHandler+0x14e>
 8003e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e94:	f003 0320 	and.w	r3, r3, #32
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	f000 fb5e 	bl	800455e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	695b      	ldr	r3, [r3, #20]
 8003ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eac:	2b40      	cmp	r3, #64	; 0x40
 8003eae:	bf0c      	ite	eq
 8003eb0:	2301      	moveq	r3, #1
 8003eb2:	2300      	movne	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	f003 0308 	and.w	r3, r3, #8
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d103      	bne.n	8003ece <HAL_UART_IRQHandler+0x17a>
 8003ec6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d04f      	beq.n	8003f6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f000 fa66 	bl	80043a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	695b      	ldr	r3, [r3, #20]
 8003eda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ede:	2b40      	cmp	r3, #64	; 0x40
 8003ee0:	d141      	bne.n	8003f66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	3314      	adds	r3, #20
 8003ee8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003ef0:	e853 3f00 	ldrex	r3, [r3]
 8003ef4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003ef8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003efc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	3314      	adds	r3, #20
 8003f0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003f0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003f12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003f1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003f1e:	e841 2300 	strex	r3, r2, [r1]
 8003f22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003f26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1d9      	bne.n	8003ee2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d013      	beq.n	8003f5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3a:	4a7d      	ldr	r2, [pc, #500]	; (8004130 <HAL_UART_IRQHandler+0x3dc>)
 8003f3c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fe fbea 	bl	800271c <HAL_DMA_Abort_IT>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d016      	beq.n	8003f7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f58:	4610      	mov	r0, r2
 8003f5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f5c:	e00e      	b.n	8003f7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f99a 	bl	8004298 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f64:	e00a      	b.n	8003f7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003f66:	6878      	ldr	r0, [r7, #4]
 8003f68:	f000 f996 	bl	8004298 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f6c:	e006      	b.n	8003f7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 f992 	bl	8004298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003f7a:	e170      	b.n	800425e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f7c:	bf00      	nop
    return;
 8003f7e:	e16e      	b.n	800425e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f84:	2b01      	cmp	r3, #1
 8003f86:	f040 814a 	bne.w	800421e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003f8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f8e:	f003 0310 	and.w	r3, r3, #16
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 8143 	beq.w	800421e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003f98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f9c:	f003 0310 	and.w	r3, r3, #16
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	f000 813c 	beq.w	800421e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	60bb      	str	r3, [r7, #8]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	60bb      	str	r3, [r7, #8]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	60bb      	str	r3, [r7, #8]
 8003fba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fc6:	2b40      	cmp	r3, #64	; 0x40
 8003fc8:	f040 80b4 	bne.w	8004134 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003fd8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	f000 8140 	beq.w	8004262 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003fe6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003fea:	429a      	cmp	r2, r3
 8003fec:	f080 8139 	bcs.w	8004262 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ff6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004002:	f000 8088 	beq.w	8004116 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	330c      	adds	r3, #12
 800400c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004010:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004014:	e853 3f00 	ldrex	r3, [r3]
 8004018:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800401c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004020:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004024:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	330c      	adds	r3, #12
 800402e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004032:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004036:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800403a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800403e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004042:	e841 2300 	strex	r3, r2, [r1]
 8004046:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800404a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1d9      	bne.n	8004006 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	3314      	adds	r3, #20
 8004058:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800405a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800405c:	e853 3f00 	ldrex	r3, [r3]
 8004060:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004062:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004064:	f023 0301 	bic.w	r3, r3, #1
 8004068:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	3314      	adds	r3, #20
 8004072:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004076:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800407a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800407c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800407e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004082:	e841 2300 	strex	r3, r2, [r1]
 8004086:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004088:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800408a:	2b00      	cmp	r3, #0
 800408c:	d1e1      	bne.n	8004052 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	3314      	adds	r3, #20
 8004094:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004096:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004098:	e853 3f00 	ldrex	r3, [r3]
 800409c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800409e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80040a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040a4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	3314      	adds	r3, #20
 80040ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80040b2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80040b4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80040b8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80040ba:	e841 2300 	strex	r3, r2, [r1]
 80040be:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80040c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d1e3      	bne.n	800408e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2220      	movs	r2, #32
 80040ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	330c      	adds	r3, #12
 80040da:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040de:	e853 3f00 	ldrex	r3, [r3]
 80040e2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80040e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040e6:	f023 0310 	bic.w	r3, r3, #16
 80040ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	330c      	adds	r3, #12
 80040f4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80040f8:	65ba      	str	r2, [r7, #88]	; 0x58
 80040fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80040fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004100:	e841 2300 	strex	r3, r2, [r1]
 8004104:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004108:	2b00      	cmp	r3, #0
 800410a:	d1e3      	bne.n	80040d4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004110:	4618      	mov	r0, r3
 8004112:	f7fe fa93 	bl	800263c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800411e:	b29b      	uxth	r3, r3
 8004120:	1ad3      	subs	r3, r2, r3
 8004122:	b29b      	uxth	r3, r3
 8004124:	4619      	mov	r1, r3
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 f8c0 	bl	80042ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800412c:	e099      	b.n	8004262 <HAL_UART_IRQHandler+0x50e>
 800412e:	bf00      	nop
 8004130:	08004467 	.word	0x08004467
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800413c:	b29b      	uxth	r3, r3
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004148:	b29b      	uxth	r3, r3
 800414a:	2b00      	cmp	r3, #0
 800414c:	f000 808b 	beq.w	8004266 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004150:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 8086 	beq.w	8004266 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	330c      	adds	r3, #12
 8004160:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004164:	e853 3f00 	ldrex	r3, [r3]
 8004168:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800416a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800416c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004170:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	330c      	adds	r3, #12
 800417a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800417e:	647a      	str	r2, [r7, #68]	; 0x44
 8004180:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004182:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004184:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004186:	e841 2300 	strex	r3, r2, [r1]
 800418a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800418c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1e3      	bne.n	800415a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	3314      	adds	r3, #20
 8004198:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800419a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419c:	e853 3f00 	ldrex	r3, [r3]
 80041a0:	623b      	str	r3, [r7, #32]
   return(result);
 80041a2:	6a3b      	ldr	r3, [r7, #32]
 80041a4:	f023 0301 	bic.w	r3, r3, #1
 80041a8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	3314      	adds	r3, #20
 80041b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80041b6:	633a      	str	r2, [r7, #48]	; 0x30
 80041b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80041bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041be:	e841 2300 	strex	r3, r2, [r1]
 80041c2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80041c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1e3      	bne.n	8004192 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2220      	movs	r2, #32
 80041ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	330c      	adds	r3, #12
 80041de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	e853 3f00 	ldrex	r3, [r3]
 80041e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f023 0310 	bic.w	r3, r3, #16
 80041ee:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	330c      	adds	r3, #12
 80041f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80041fc:	61fa      	str	r2, [r7, #28]
 80041fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004200:	69b9      	ldr	r1, [r7, #24]
 8004202:	69fa      	ldr	r2, [r7, #28]
 8004204:	e841 2300 	strex	r3, r2, [r1]
 8004208:	617b      	str	r3, [r7, #20]
   return(result);
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1e3      	bne.n	80041d8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004210:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004214:	4619      	mov	r1, r3
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f000 f848 	bl	80042ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800421c:	e023      	b.n	8004266 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800421e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004226:	2b00      	cmp	r3, #0
 8004228:	d009      	beq.n	800423e <HAL_UART_IRQHandler+0x4ea>
 800422a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800422e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004232:	2b00      	cmp	r3, #0
 8004234:	d003      	beq.n	800423e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f000 f929 	bl	800448e <UART_Transmit_IT>
    return;
 800423c:	e014      	b.n	8004268 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800423e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00e      	beq.n	8004268 <HAL_UART_IRQHandler+0x514>
 800424a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800424e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004252:	2b00      	cmp	r3, #0
 8004254:	d008      	beq.n	8004268 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f969 	bl	800452e <UART_EndTransmit_IT>
    return;
 800425c:	e004      	b.n	8004268 <HAL_UART_IRQHandler+0x514>
    return;
 800425e:	bf00      	nop
 8004260:	e002      	b.n	8004268 <HAL_UART_IRQHandler+0x514>
      return;
 8004262:	bf00      	nop
 8004264:	e000      	b.n	8004268 <HAL_UART_IRQHandler+0x514>
      return;
 8004266:	bf00      	nop
  }
}
 8004268:	37e8      	adds	r7, #232	; 0xe8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop

08004270 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004278:	bf00      	nop
 800427a:	370c      	adds	r7, #12
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004284:	b480      	push	{r7}
 8004286:	b083      	sub	sp, #12
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800428c:	bf00      	nop
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004298:	b480      	push	{r7}
 800429a:	b083      	sub	sp, #12
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80042a0:	bf00      	nop
 80042a2:	370c      	adds	r7, #12
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr

080042ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	460b      	mov	r3, r1
 80042b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b090      	sub	sp, #64	; 0x40
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	603b      	str	r3, [r7, #0]
 80042d0:	4613      	mov	r3, r2
 80042d2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042d4:	e050      	b.n	8004378 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042dc:	d04c      	beq.n	8004378 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80042de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d007      	beq.n	80042f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80042e4:	f7fd fb6e 	bl	80019c4 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d241      	bcs.n	8004378 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	330c      	adds	r3, #12
 80042fa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fe:	e853 3f00 	ldrex	r3, [r3]
 8004302:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800430a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	330c      	adds	r3, #12
 8004312:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004314:	637a      	str	r2, [r7, #52]	; 0x34
 8004316:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004318:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800431a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800431c:	e841 2300 	strex	r3, r2, [r1]
 8004320:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1e5      	bne.n	80042f4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	3314      	adds	r3, #20
 800432e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	e853 3f00 	ldrex	r3, [r3]
 8004336:	613b      	str	r3, [r7, #16]
   return(result);
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	f023 0301 	bic.w	r3, r3, #1
 800433e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	3314      	adds	r3, #20
 8004346:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004348:	623a      	str	r2, [r7, #32]
 800434a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434c:	69f9      	ldr	r1, [r7, #28]
 800434e:	6a3a      	ldr	r2, [r7, #32]
 8004350:	e841 2300 	strex	r3, r2, [r1]
 8004354:	61bb      	str	r3, [r7, #24]
   return(result);
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d1e5      	bne.n	8004328 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2220      	movs	r2, #32
 8004360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004374:	2303      	movs	r3, #3
 8004376:	e00f      	b.n	8004398 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	4013      	ands	r3, r2
 8004382:	68ba      	ldr	r2, [r7, #8]
 8004384:	429a      	cmp	r2, r3
 8004386:	bf0c      	ite	eq
 8004388:	2301      	moveq	r3, #1
 800438a:	2300      	movne	r3, #0
 800438c:	b2db      	uxtb	r3, r3
 800438e:	461a      	mov	r2, r3
 8004390:	79fb      	ldrb	r3, [r7, #7]
 8004392:	429a      	cmp	r2, r3
 8004394:	d09f      	beq.n	80042d6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3740      	adds	r7, #64	; 0x40
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}

080043a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b095      	sub	sp, #84	; 0x54
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	330c      	adds	r3, #12
 80043ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043b2:	e853 3f00 	ldrex	r3, [r3]
 80043b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80043b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	330c      	adds	r3, #12
 80043c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043c8:	643a      	str	r2, [r7, #64]	; 0x40
 80043ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80043ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80043d0:	e841 2300 	strex	r3, r2, [r1]
 80043d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80043d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1e5      	bne.n	80043a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	3314      	adds	r3, #20
 80043e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e4:	6a3b      	ldr	r3, [r7, #32]
 80043e6:	e853 3f00 	ldrex	r3, [r3]
 80043ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	f023 0301 	bic.w	r3, r3, #1
 80043f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3314      	adds	r3, #20
 80043fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004400:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004404:	e841 2300 	strex	r3, r2, [r1]
 8004408:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1e5      	bne.n	80043dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004414:	2b01      	cmp	r3, #1
 8004416:	d119      	bne.n	800444c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	330c      	adds	r3, #12
 800441e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	e853 3f00 	ldrex	r3, [r3]
 8004426:	60bb      	str	r3, [r7, #8]
   return(result);
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	f023 0310 	bic.w	r3, r3, #16
 800442e:	647b      	str	r3, [r7, #68]	; 0x44
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	330c      	adds	r3, #12
 8004436:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004438:	61ba      	str	r2, [r7, #24]
 800443a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800443c:	6979      	ldr	r1, [r7, #20]
 800443e:	69ba      	ldr	r2, [r7, #24]
 8004440:	e841 2300 	strex	r3, r2, [r1]
 8004444:	613b      	str	r3, [r7, #16]
   return(result);
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d1e5      	bne.n	8004418 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2220      	movs	r2, #32
 8004450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	631a      	str	r2, [r3, #48]	; 0x30
}
 800445a:	bf00      	nop
 800445c:	3754      	adds	r7, #84	; 0x54
 800445e:	46bd      	mov	sp, r7
 8004460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004464:	4770      	bx	lr

08004466 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004466:	b580      	push	{r7, lr}
 8004468:	b084      	sub	sp, #16
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004472:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2200      	movs	r2, #0
 8004478:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f7ff ff09 	bl	8004298 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004486:	bf00      	nop
 8004488:	3710      	adds	r7, #16
 800448a:	46bd      	mov	sp, r7
 800448c:	bd80      	pop	{r7, pc}

0800448e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800448e:	b480      	push	{r7}
 8004490:	b085      	sub	sp, #20
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800449c:	b2db      	uxtb	r3, r3
 800449e:	2b21      	cmp	r3, #33	; 0x21
 80044a0:	d13e      	bne.n	8004520 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80044aa:	d114      	bne.n	80044d6 <UART_Transmit_IT+0x48>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	691b      	ldr	r3, [r3, #16]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d110      	bne.n	80044d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a1b      	ldr	r3, [r3, #32]
 80044b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	461a      	mov	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	1c9a      	adds	r2, r3, #2
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	621a      	str	r2, [r3, #32]
 80044d4:	e008      	b.n	80044e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a1b      	ldr	r3, [r3, #32]
 80044da:	1c59      	adds	r1, r3, #1
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6211      	str	r1, [r2, #32]
 80044e0:	781a      	ldrb	r2, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80044ec:	b29b      	uxth	r3, r3
 80044ee:	3b01      	subs	r3, #1
 80044f0:	b29b      	uxth	r3, r3
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	4619      	mov	r1, r3
 80044f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d10f      	bne.n	800451c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800450a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800451a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800451c:	2300      	movs	r3, #0
 800451e:	e000      	b.n	8004522 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004520:	2302      	movs	r3, #2
  }
}
 8004522:	4618      	mov	r0, r3
 8004524:	3714      	adds	r7, #20
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b082      	sub	sp, #8
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68da      	ldr	r2, [r3, #12]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004544:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2220      	movs	r2, #32
 800454a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7ff fe8e 	bl	8004270 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3708      	adds	r7, #8
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}

0800455e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800455e:	b580      	push	{r7, lr}
 8004560:	b08c      	sub	sp, #48	; 0x30
 8004562:	af00      	add	r7, sp, #0
 8004564:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b22      	cmp	r3, #34	; 0x22
 8004570:	f040 80ab 	bne.w	80046ca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800457c:	d117      	bne.n	80045ae <UART_Receive_IT+0x50>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d113      	bne.n	80045ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004586:	2300      	movs	r3, #0
 8004588:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800458e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	b29b      	uxth	r3, r3
 8004598:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800459c:	b29a      	uxth	r2, r3
 800459e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045a6:	1c9a      	adds	r2, r3, #2
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	629a      	str	r2, [r3, #40]	; 0x28
 80045ac:	e026      	b.n	80045fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80045b4:	2300      	movs	r3, #0
 80045b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045c0:	d007      	beq.n	80045d2 <UART_Receive_IT+0x74>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d10a      	bne.n	80045e0 <UART_Receive_IT+0x82>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	691b      	ldr	r3, [r3, #16]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d106      	bne.n	80045e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	b2da      	uxtb	r2, r3
 80045da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045dc:	701a      	strb	r2, [r3, #0]
 80045de:	e008      	b.n	80045f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045ec:	b2da      	uxtb	r2, r3
 80045ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045f6:	1c5a      	adds	r2, r3, #1
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004600:	b29b      	uxth	r3, r3
 8004602:	3b01      	subs	r3, #1
 8004604:	b29b      	uxth	r3, r3
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	4619      	mov	r1, r3
 800460a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800460c:	2b00      	cmp	r3, #0
 800460e:	d15a      	bne.n	80046c6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	68da      	ldr	r2, [r3, #12]
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f022 0220 	bic.w	r2, r2, #32
 800461e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68da      	ldr	r2, [r3, #12]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800462e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	695a      	ldr	r2, [r3, #20]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f022 0201 	bic.w	r2, r2, #1
 800463e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2220      	movs	r2, #32
 8004644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800464c:	2b01      	cmp	r3, #1
 800464e:	d135      	bne.n	80046bc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	330c      	adds	r3, #12
 800465c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	e853 3f00 	ldrex	r3, [r3]
 8004664:	613b      	str	r3, [r7, #16]
   return(result);
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	f023 0310 	bic.w	r3, r3, #16
 800466c:	627b      	str	r3, [r7, #36]	; 0x24
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	330c      	adds	r3, #12
 8004674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004676:	623a      	str	r2, [r7, #32]
 8004678:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800467a:	69f9      	ldr	r1, [r7, #28]
 800467c:	6a3a      	ldr	r2, [r7, #32]
 800467e:	e841 2300 	strex	r3, r2, [r1]
 8004682:	61bb      	str	r3, [r7, #24]
   return(result);
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d1e5      	bne.n	8004656 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0310 	and.w	r3, r3, #16
 8004694:	2b10      	cmp	r3, #16
 8004696:	d10a      	bne.n	80046ae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004698:	2300      	movs	r3, #0
 800469a:	60fb      	str	r3, [r7, #12]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	60fb      	str	r3, [r7, #12]
 80046ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80046b2:	4619      	mov	r1, r3
 80046b4:	6878      	ldr	r0, [r7, #4]
 80046b6:	f7ff fdf9 	bl	80042ac <HAL_UARTEx_RxEventCallback>
 80046ba:	e002      	b.n	80046c2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7ff fde1 	bl	8004284 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80046c2:	2300      	movs	r3, #0
 80046c4:	e002      	b.n	80046cc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80046c6:	2300      	movs	r3, #0
 80046c8:	e000      	b.n	80046cc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80046ca:	2302      	movs	r3, #2
  }
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3730      	adds	r7, #48	; 0x30
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046d8:	b0c0      	sub	sp, #256	; 0x100
 80046da:	af00      	add	r7, sp, #0
 80046dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80046ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f0:	68d9      	ldr	r1, [r3, #12]
 80046f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046f6:	681a      	ldr	r2, [r3, #0]
 80046f8:	ea40 0301 	orr.w	r3, r0, r1
 80046fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	431a      	orrs	r2, r3
 800470c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	431a      	orrs	r2, r3
 8004714:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	4313      	orrs	r3, r2
 800471c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004720:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800472c:	f021 010c 	bic.w	r1, r1, #12
 8004730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004734:	681a      	ldr	r2, [r3, #0]
 8004736:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800473a:	430b      	orrs	r3, r1
 800473c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800473e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	695b      	ldr	r3, [r3, #20]
 8004746:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800474a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800474e:	6999      	ldr	r1, [r3, #24]
 8004750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	ea40 0301 	orr.w	r3, r0, r1
 800475a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800475c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004760:	681a      	ldr	r2, [r3, #0]
 8004762:	4b8f      	ldr	r3, [pc, #572]	; (80049a0 <UART_SetConfig+0x2cc>)
 8004764:	429a      	cmp	r2, r3
 8004766:	d005      	beq.n	8004774 <UART_SetConfig+0xa0>
 8004768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	4b8d      	ldr	r3, [pc, #564]	; (80049a4 <UART_SetConfig+0x2d0>)
 8004770:	429a      	cmp	r2, r3
 8004772:	d104      	bne.n	800477e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004774:	f7fe fd2c 	bl	80031d0 <HAL_RCC_GetPCLK2Freq>
 8004778:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800477c:	e003      	b.n	8004786 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800477e:	f7fe fd13 	bl	80031a8 <HAL_RCC_GetPCLK1Freq>
 8004782:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800478a:	69db      	ldr	r3, [r3, #28]
 800478c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004790:	f040 810c 	bne.w	80049ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004794:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004798:	2200      	movs	r2, #0
 800479a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800479e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80047a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80047a6:	4622      	mov	r2, r4
 80047a8:	462b      	mov	r3, r5
 80047aa:	1891      	adds	r1, r2, r2
 80047ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80047ae:	415b      	adcs	r3, r3
 80047b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80047b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80047b6:	4621      	mov	r1, r4
 80047b8:	eb12 0801 	adds.w	r8, r2, r1
 80047bc:	4629      	mov	r1, r5
 80047be:	eb43 0901 	adc.w	r9, r3, r1
 80047c2:	f04f 0200 	mov.w	r2, #0
 80047c6:	f04f 0300 	mov.w	r3, #0
 80047ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047d6:	4690      	mov	r8, r2
 80047d8:	4699      	mov	r9, r3
 80047da:	4623      	mov	r3, r4
 80047dc:	eb18 0303 	adds.w	r3, r8, r3
 80047e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80047e4:	462b      	mov	r3, r5
 80047e6:	eb49 0303 	adc.w	r3, r9, r3
 80047ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80047ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80047fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80047fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004802:	460b      	mov	r3, r1
 8004804:	18db      	adds	r3, r3, r3
 8004806:	653b      	str	r3, [r7, #80]	; 0x50
 8004808:	4613      	mov	r3, r2
 800480a:	eb42 0303 	adc.w	r3, r2, r3
 800480e:	657b      	str	r3, [r7, #84]	; 0x54
 8004810:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004814:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004818:	f7fc fa36 	bl	8000c88 <__aeabi_uldivmod>
 800481c:	4602      	mov	r2, r0
 800481e:	460b      	mov	r3, r1
 8004820:	4b61      	ldr	r3, [pc, #388]	; (80049a8 <UART_SetConfig+0x2d4>)
 8004822:	fba3 2302 	umull	r2, r3, r3, r2
 8004826:	095b      	lsrs	r3, r3, #5
 8004828:	011c      	lsls	r4, r3, #4
 800482a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800482e:	2200      	movs	r2, #0
 8004830:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004834:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004838:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800483c:	4642      	mov	r2, r8
 800483e:	464b      	mov	r3, r9
 8004840:	1891      	adds	r1, r2, r2
 8004842:	64b9      	str	r1, [r7, #72]	; 0x48
 8004844:	415b      	adcs	r3, r3
 8004846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004848:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800484c:	4641      	mov	r1, r8
 800484e:	eb12 0a01 	adds.w	sl, r2, r1
 8004852:	4649      	mov	r1, r9
 8004854:	eb43 0b01 	adc.w	fp, r3, r1
 8004858:	f04f 0200 	mov.w	r2, #0
 800485c:	f04f 0300 	mov.w	r3, #0
 8004860:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004864:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004868:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800486c:	4692      	mov	sl, r2
 800486e:	469b      	mov	fp, r3
 8004870:	4643      	mov	r3, r8
 8004872:	eb1a 0303 	adds.w	r3, sl, r3
 8004876:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800487a:	464b      	mov	r3, r9
 800487c:	eb4b 0303 	adc.w	r3, fp, r3
 8004880:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004890:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004894:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004898:	460b      	mov	r3, r1
 800489a:	18db      	adds	r3, r3, r3
 800489c:	643b      	str	r3, [r7, #64]	; 0x40
 800489e:	4613      	mov	r3, r2
 80048a0:	eb42 0303 	adc.w	r3, r2, r3
 80048a4:	647b      	str	r3, [r7, #68]	; 0x44
 80048a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80048aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80048ae:	f7fc f9eb 	bl	8000c88 <__aeabi_uldivmod>
 80048b2:	4602      	mov	r2, r0
 80048b4:	460b      	mov	r3, r1
 80048b6:	4611      	mov	r1, r2
 80048b8:	4b3b      	ldr	r3, [pc, #236]	; (80049a8 <UART_SetConfig+0x2d4>)
 80048ba:	fba3 2301 	umull	r2, r3, r3, r1
 80048be:	095b      	lsrs	r3, r3, #5
 80048c0:	2264      	movs	r2, #100	; 0x64
 80048c2:	fb02 f303 	mul.w	r3, r2, r3
 80048c6:	1acb      	subs	r3, r1, r3
 80048c8:	00db      	lsls	r3, r3, #3
 80048ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80048ce:	4b36      	ldr	r3, [pc, #216]	; (80049a8 <UART_SetConfig+0x2d4>)
 80048d0:	fba3 2302 	umull	r2, r3, r3, r2
 80048d4:	095b      	lsrs	r3, r3, #5
 80048d6:	005b      	lsls	r3, r3, #1
 80048d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80048dc:	441c      	add	r4, r3
 80048de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048e2:	2200      	movs	r2, #0
 80048e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80048e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80048ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80048f0:	4642      	mov	r2, r8
 80048f2:	464b      	mov	r3, r9
 80048f4:	1891      	adds	r1, r2, r2
 80048f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80048f8:	415b      	adcs	r3, r3
 80048fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80048fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004900:	4641      	mov	r1, r8
 8004902:	1851      	adds	r1, r2, r1
 8004904:	6339      	str	r1, [r7, #48]	; 0x30
 8004906:	4649      	mov	r1, r9
 8004908:	414b      	adcs	r3, r1
 800490a:	637b      	str	r3, [r7, #52]	; 0x34
 800490c:	f04f 0200 	mov.w	r2, #0
 8004910:	f04f 0300 	mov.w	r3, #0
 8004914:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004918:	4659      	mov	r1, fp
 800491a:	00cb      	lsls	r3, r1, #3
 800491c:	4651      	mov	r1, sl
 800491e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004922:	4651      	mov	r1, sl
 8004924:	00ca      	lsls	r2, r1, #3
 8004926:	4610      	mov	r0, r2
 8004928:	4619      	mov	r1, r3
 800492a:	4603      	mov	r3, r0
 800492c:	4642      	mov	r2, r8
 800492e:	189b      	adds	r3, r3, r2
 8004930:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004934:	464b      	mov	r3, r9
 8004936:	460a      	mov	r2, r1
 8004938:	eb42 0303 	adc.w	r3, r2, r3
 800493c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800494c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004950:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004954:	460b      	mov	r3, r1
 8004956:	18db      	adds	r3, r3, r3
 8004958:	62bb      	str	r3, [r7, #40]	; 0x28
 800495a:	4613      	mov	r3, r2
 800495c:	eb42 0303 	adc.w	r3, r2, r3
 8004960:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004962:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004966:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800496a:	f7fc f98d 	bl	8000c88 <__aeabi_uldivmod>
 800496e:	4602      	mov	r2, r0
 8004970:	460b      	mov	r3, r1
 8004972:	4b0d      	ldr	r3, [pc, #52]	; (80049a8 <UART_SetConfig+0x2d4>)
 8004974:	fba3 1302 	umull	r1, r3, r3, r2
 8004978:	095b      	lsrs	r3, r3, #5
 800497a:	2164      	movs	r1, #100	; 0x64
 800497c:	fb01 f303 	mul.w	r3, r1, r3
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	00db      	lsls	r3, r3, #3
 8004984:	3332      	adds	r3, #50	; 0x32
 8004986:	4a08      	ldr	r2, [pc, #32]	; (80049a8 <UART_SetConfig+0x2d4>)
 8004988:	fba2 2303 	umull	r2, r3, r2, r3
 800498c:	095b      	lsrs	r3, r3, #5
 800498e:	f003 0207 	and.w	r2, r3, #7
 8004992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4422      	add	r2, r4
 800499a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800499c:	e105      	b.n	8004baa <UART_SetConfig+0x4d6>
 800499e:	bf00      	nop
 80049a0:	40011000 	.word	0x40011000
 80049a4:	40011400 	.word	0x40011400
 80049a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049b0:	2200      	movs	r2, #0
 80049b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80049b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80049ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80049be:	4642      	mov	r2, r8
 80049c0:	464b      	mov	r3, r9
 80049c2:	1891      	adds	r1, r2, r2
 80049c4:	6239      	str	r1, [r7, #32]
 80049c6:	415b      	adcs	r3, r3
 80049c8:	627b      	str	r3, [r7, #36]	; 0x24
 80049ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049ce:	4641      	mov	r1, r8
 80049d0:	1854      	adds	r4, r2, r1
 80049d2:	4649      	mov	r1, r9
 80049d4:	eb43 0501 	adc.w	r5, r3, r1
 80049d8:	f04f 0200 	mov.w	r2, #0
 80049dc:	f04f 0300 	mov.w	r3, #0
 80049e0:	00eb      	lsls	r3, r5, #3
 80049e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049e6:	00e2      	lsls	r2, r4, #3
 80049e8:	4614      	mov	r4, r2
 80049ea:	461d      	mov	r5, r3
 80049ec:	4643      	mov	r3, r8
 80049ee:	18e3      	adds	r3, r4, r3
 80049f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80049f4:	464b      	mov	r3, r9
 80049f6:	eb45 0303 	adc.w	r3, r5, r3
 80049fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80049fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	2200      	movs	r2, #0
 8004a06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004a0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a0e:	f04f 0200 	mov.w	r2, #0
 8004a12:	f04f 0300 	mov.w	r3, #0
 8004a16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004a1a:	4629      	mov	r1, r5
 8004a1c:	008b      	lsls	r3, r1, #2
 8004a1e:	4621      	mov	r1, r4
 8004a20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a24:	4621      	mov	r1, r4
 8004a26:	008a      	lsls	r2, r1, #2
 8004a28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004a2c:	f7fc f92c 	bl	8000c88 <__aeabi_uldivmod>
 8004a30:	4602      	mov	r2, r0
 8004a32:	460b      	mov	r3, r1
 8004a34:	4b60      	ldr	r3, [pc, #384]	; (8004bb8 <UART_SetConfig+0x4e4>)
 8004a36:	fba3 2302 	umull	r2, r3, r3, r2
 8004a3a:	095b      	lsrs	r3, r3, #5
 8004a3c:	011c      	lsls	r4, r3, #4
 8004a3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a42:	2200      	movs	r2, #0
 8004a44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004a48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004a4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004a50:	4642      	mov	r2, r8
 8004a52:	464b      	mov	r3, r9
 8004a54:	1891      	adds	r1, r2, r2
 8004a56:	61b9      	str	r1, [r7, #24]
 8004a58:	415b      	adcs	r3, r3
 8004a5a:	61fb      	str	r3, [r7, #28]
 8004a5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a60:	4641      	mov	r1, r8
 8004a62:	1851      	adds	r1, r2, r1
 8004a64:	6139      	str	r1, [r7, #16]
 8004a66:	4649      	mov	r1, r9
 8004a68:	414b      	adcs	r3, r1
 8004a6a:	617b      	str	r3, [r7, #20]
 8004a6c:	f04f 0200 	mov.w	r2, #0
 8004a70:	f04f 0300 	mov.w	r3, #0
 8004a74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a78:	4659      	mov	r1, fp
 8004a7a:	00cb      	lsls	r3, r1, #3
 8004a7c:	4651      	mov	r1, sl
 8004a7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a82:	4651      	mov	r1, sl
 8004a84:	00ca      	lsls	r2, r1, #3
 8004a86:	4610      	mov	r0, r2
 8004a88:	4619      	mov	r1, r3
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	4642      	mov	r2, r8
 8004a8e:	189b      	adds	r3, r3, r2
 8004a90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a94:	464b      	mov	r3, r9
 8004a96:	460a      	mov	r2, r1
 8004a98:	eb42 0303 	adc.w	r3, r2, r3
 8004a9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	67bb      	str	r3, [r7, #120]	; 0x78
 8004aaa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004aac:	f04f 0200 	mov.w	r2, #0
 8004ab0:	f04f 0300 	mov.w	r3, #0
 8004ab4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ab8:	4649      	mov	r1, r9
 8004aba:	008b      	lsls	r3, r1, #2
 8004abc:	4641      	mov	r1, r8
 8004abe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ac2:	4641      	mov	r1, r8
 8004ac4:	008a      	lsls	r2, r1, #2
 8004ac6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004aca:	f7fc f8dd 	bl	8000c88 <__aeabi_uldivmod>
 8004ace:	4602      	mov	r2, r0
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	4b39      	ldr	r3, [pc, #228]	; (8004bb8 <UART_SetConfig+0x4e4>)
 8004ad4:	fba3 1302 	umull	r1, r3, r3, r2
 8004ad8:	095b      	lsrs	r3, r3, #5
 8004ada:	2164      	movs	r1, #100	; 0x64
 8004adc:	fb01 f303 	mul.w	r3, r1, r3
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	011b      	lsls	r3, r3, #4
 8004ae4:	3332      	adds	r3, #50	; 0x32
 8004ae6:	4a34      	ldr	r2, [pc, #208]	; (8004bb8 <UART_SetConfig+0x4e4>)
 8004ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8004aec:	095b      	lsrs	r3, r3, #5
 8004aee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004af2:	441c      	add	r4, r3
 8004af4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004af8:	2200      	movs	r2, #0
 8004afa:	673b      	str	r3, [r7, #112]	; 0x70
 8004afc:	677a      	str	r2, [r7, #116]	; 0x74
 8004afe:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004b02:	4642      	mov	r2, r8
 8004b04:	464b      	mov	r3, r9
 8004b06:	1891      	adds	r1, r2, r2
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	415b      	adcs	r3, r3
 8004b0c:	60fb      	str	r3, [r7, #12]
 8004b0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b12:	4641      	mov	r1, r8
 8004b14:	1851      	adds	r1, r2, r1
 8004b16:	6039      	str	r1, [r7, #0]
 8004b18:	4649      	mov	r1, r9
 8004b1a:	414b      	adcs	r3, r1
 8004b1c:	607b      	str	r3, [r7, #4]
 8004b1e:	f04f 0200 	mov.w	r2, #0
 8004b22:	f04f 0300 	mov.w	r3, #0
 8004b26:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b2a:	4659      	mov	r1, fp
 8004b2c:	00cb      	lsls	r3, r1, #3
 8004b2e:	4651      	mov	r1, sl
 8004b30:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b34:	4651      	mov	r1, sl
 8004b36:	00ca      	lsls	r2, r1, #3
 8004b38:	4610      	mov	r0, r2
 8004b3a:	4619      	mov	r1, r3
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	4642      	mov	r2, r8
 8004b40:	189b      	adds	r3, r3, r2
 8004b42:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b44:	464b      	mov	r3, r9
 8004b46:	460a      	mov	r2, r1
 8004b48:	eb42 0303 	adc.w	r3, r2, r3
 8004b4c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b52:	685b      	ldr	r3, [r3, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	663b      	str	r3, [r7, #96]	; 0x60
 8004b58:	667a      	str	r2, [r7, #100]	; 0x64
 8004b5a:	f04f 0200 	mov.w	r2, #0
 8004b5e:	f04f 0300 	mov.w	r3, #0
 8004b62:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004b66:	4649      	mov	r1, r9
 8004b68:	008b      	lsls	r3, r1, #2
 8004b6a:	4641      	mov	r1, r8
 8004b6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b70:	4641      	mov	r1, r8
 8004b72:	008a      	lsls	r2, r1, #2
 8004b74:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004b78:	f7fc f886 	bl	8000c88 <__aeabi_uldivmod>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	460b      	mov	r3, r1
 8004b80:	4b0d      	ldr	r3, [pc, #52]	; (8004bb8 <UART_SetConfig+0x4e4>)
 8004b82:	fba3 1302 	umull	r1, r3, r3, r2
 8004b86:	095b      	lsrs	r3, r3, #5
 8004b88:	2164      	movs	r1, #100	; 0x64
 8004b8a:	fb01 f303 	mul.w	r3, r1, r3
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	011b      	lsls	r3, r3, #4
 8004b92:	3332      	adds	r3, #50	; 0x32
 8004b94:	4a08      	ldr	r2, [pc, #32]	; (8004bb8 <UART_SetConfig+0x4e4>)
 8004b96:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9a:	095b      	lsrs	r3, r3, #5
 8004b9c:	f003 020f 	and.w	r2, r3, #15
 8004ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4422      	add	r2, r4
 8004ba8:	609a      	str	r2, [r3, #8]
}
 8004baa:	bf00      	nop
 8004bac:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bb6:	bf00      	nop
 8004bb8:	51eb851f 	.word	0x51eb851f

08004bbc <__errno>:
 8004bbc:	4b01      	ldr	r3, [pc, #4]	; (8004bc4 <__errno+0x8>)
 8004bbe:	6818      	ldr	r0, [r3, #0]
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	20000010 	.word	0x20000010

08004bc8 <__libc_init_array>:
 8004bc8:	b570      	push	{r4, r5, r6, lr}
 8004bca:	4d0d      	ldr	r5, [pc, #52]	; (8004c00 <__libc_init_array+0x38>)
 8004bcc:	4c0d      	ldr	r4, [pc, #52]	; (8004c04 <__libc_init_array+0x3c>)
 8004bce:	1b64      	subs	r4, r4, r5
 8004bd0:	10a4      	asrs	r4, r4, #2
 8004bd2:	2600      	movs	r6, #0
 8004bd4:	42a6      	cmp	r6, r4
 8004bd6:	d109      	bne.n	8004bec <__libc_init_array+0x24>
 8004bd8:	4d0b      	ldr	r5, [pc, #44]	; (8004c08 <__libc_init_array+0x40>)
 8004bda:	4c0c      	ldr	r4, [pc, #48]	; (8004c0c <__libc_init_array+0x44>)
 8004bdc:	f002 ff04 	bl	80079e8 <_init>
 8004be0:	1b64      	subs	r4, r4, r5
 8004be2:	10a4      	asrs	r4, r4, #2
 8004be4:	2600      	movs	r6, #0
 8004be6:	42a6      	cmp	r6, r4
 8004be8:	d105      	bne.n	8004bf6 <__libc_init_array+0x2e>
 8004bea:	bd70      	pop	{r4, r5, r6, pc}
 8004bec:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bf0:	4798      	blx	r3
 8004bf2:	3601      	adds	r6, #1
 8004bf4:	e7ee      	b.n	8004bd4 <__libc_init_array+0xc>
 8004bf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004bfa:	4798      	blx	r3
 8004bfc:	3601      	adds	r6, #1
 8004bfe:	e7f2      	b.n	8004be6 <__libc_init_array+0x1e>
 8004c00:	08007e0c 	.word	0x08007e0c
 8004c04:	08007e0c 	.word	0x08007e0c
 8004c08:	08007e0c 	.word	0x08007e0c
 8004c0c:	08007e10 	.word	0x08007e10

08004c10 <memset>:
 8004c10:	4402      	add	r2, r0
 8004c12:	4603      	mov	r3, r0
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d100      	bne.n	8004c1a <memset+0xa>
 8004c18:	4770      	bx	lr
 8004c1a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c1e:	e7f9      	b.n	8004c14 <memset+0x4>

08004c20 <__cvt>:
 8004c20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c24:	ec55 4b10 	vmov	r4, r5, d0
 8004c28:	2d00      	cmp	r5, #0
 8004c2a:	460e      	mov	r6, r1
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	462b      	mov	r3, r5
 8004c30:	bfbb      	ittet	lt
 8004c32:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004c36:	461d      	movlt	r5, r3
 8004c38:	2300      	movge	r3, #0
 8004c3a:	232d      	movlt	r3, #45	; 0x2d
 8004c3c:	700b      	strb	r3, [r1, #0]
 8004c3e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c40:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004c44:	4691      	mov	r9, r2
 8004c46:	f023 0820 	bic.w	r8, r3, #32
 8004c4a:	bfbc      	itt	lt
 8004c4c:	4622      	movlt	r2, r4
 8004c4e:	4614      	movlt	r4, r2
 8004c50:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c54:	d005      	beq.n	8004c62 <__cvt+0x42>
 8004c56:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004c5a:	d100      	bne.n	8004c5e <__cvt+0x3e>
 8004c5c:	3601      	adds	r6, #1
 8004c5e:	2102      	movs	r1, #2
 8004c60:	e000      	b.n	8004c64 <__cvt+0x44>
 8004c62:	2103      	movs	r1, #3
 8004c64:	ab03      	add	r3, sp, #12
 8004c66:	9301      	str	r3, [sp, #4]
 8004c68:	ab02      	add	r3, sp, #8
 8004c6a:	9300      	str	r3, [sp, #0]
 8004c6c:	ec45 4b10 	vmov	d0, r4, r5
 8004c70:	4653      	mov	r3, sl
 8004c72:	4632      	mov	r2, r6
 8004c74:	f000 fcec 	bl	8005650 <_dtoa_r>
 8004c78:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004c7c:	4607      	mov	r7, r0
 8004c7e:	d102      	bne.n	8004c86 <__cvt+0x66>
 8004c80:	f019 0f01 	tst.w	r9, #1
 8004c84:	d022      	beq.n	8004ccc <__cvt+0xac>
 8004c86:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004c8a:	eb07 0906 	add.w	r9, r7, r6
 8004c8e:	d110      	bne.n	8004cb2 <__cvt+0x92>
 8004c90:	783b      	ldrb	r3, [r7, #0]
 8004c92:	2b30      	cmp	r3, #48	; 0x30
 8004c94:	d10a      	bne.n	8004cac <__cvt+0x8c>
 8004c96:	2200      	movs	r2, #0
 8004c98:	2300      	movs	r3, #0
 8004c9a:	4620      	mov	r0, r4
 8004c9c:	4629      	mov	r1, r5
 8004c9e:	f7fb ff33 	bl	8000b08 <__aeabi_dcmpeq>
 8004ca2:	b918      	cbnz	r0, 8004cac <__cvt+0x8c>
 8004ca4:	f1c6 0601 	rsb	r6, r6, #1
 8004ca8:	f8ca 6000 	str.w	r6, [sl]
 8004cac:	f8da 3000 	ldr.w	r3, [sl]
 8004cb0:	4499      	add	r9, r3
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	4620      	mov	r0, r4
 8004cb8:	4629      	mov	r1, r5
 8004cba:	f7fb ff25 	bl	8000b08 <__aeabi_dcmpeq>
 8004cbe:	b108      	cbz	r0, 8004cc4 <__cvt+0xa4>
 8004cc0:	f8cd 900c 	str.w	r9, [sp, #12]
 8004cc4:	2230      	movs	r2, #48	; 0x30
 8004cc6:	9b03      	ldr	r3, [sp, #12]
 8004cc8:	454b      	cmp	r3, r9
 8004cca:	d307      	bcc.n	8004cdc <__cvt+0xbc>
 8004ccc:	9b03      	ldr	r3, [sp, #12]
 8004cce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004cd0:	1bdb      	subs	r3, r3, r7
 8004cd2:	4638      	mov	r0, r7
 8004cd4:	6013      	str	r3, [r2, #0]
 8004cd6:	b004      	add	sp, #16
 8004cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cdc:	1c59      	adds	r1, r3, #1
 8004cde:	9103      	str	r1, [sp, #12]
 8004ce0:	701a      	strb	r2, [r3, #0]
 8004ce2:	e7f0      	b.n	8004cc6 <__cvt+0xa6>

08004ce4 <__exponent>:
 8004ce4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2900      	cmp	r1, #0
 8004cea:	bfb8      	it	lt
 8004cec:	4249      	neglt	r1, r1
 8004cee:	f803 2b02 	strb.w	r2, [r3], #2
 8004cf2:	bfb4      	ite	lt
 8004cf4:	222d      	movlt	r2, #45	; 0x2d
 8004cf6:	222b      	movge	r2, #43	; 0x2b
 8004cf8:	2909      	cmp	r1, #9
 8004cfa:	7042      	strb	r2, [r0, #1]
 8004cfc:	dd2a      	ble.n	8004d54 <__exponent+0x70>
 8004cfe:	f10d 0407 	add.w	r4, sp, #7
 8004d02:	46a4      	mov	ip, r4
 8004d04:	270a      	movs	r7, #10
 8004d06:	46a6      	mov	lr, r4
 8004d08:	460a      	mov	r2, r1
 8004d0a:	fb91 f6f7 	sdiv	r6, r1, r7
 8004d0e:	fb07 1516 	mls	r5, r7, r6, r1
 8004d12:	3530      	adds	r5, #48	; 0x30
 8004d14:	2a63      	cmp	r2, #99	; 0x63
 8004d16:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8004d1a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004d1e:	4631      	mov	r1, r6
 8004d20:	dcf1      	bgt.n	8004d06 <__exponent+0x22>
 8004d22:	3130      	adds	r1, #48	; 0x30
 8004d24:	f1ae 0502 	sub.w	r5, lr, #2
 8004d28:	f804 1c01 	strb.w	r1, [r4, #-1]
 8004d2c:	1c44      	adds	r4, r0, #1
 8004d2e:	4629      	mov	r1, r5
 8004d30:	4561      	cmp	r1, ip
 8004d32:	d30a      	bcc.n	8004d4a <__exponent+0x66>
 8004d34:	f10d 0209 	add.w	r2, sp, #9
 8004d38:	eba2 020e 	sub.w	r2, r2, lr
 8004d3c:	4565      	cmp	r5, ip
 8004d3e:	bf88      	it	hi
 8004d40:	2200      	movhi	r2, #0
 8004d42:	4413      	add	r3, r2
 8004d44:	1a18      	subs	r0, r3, r0
 8004d46:	b003      	add	sp, #12
 8004d48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004d4e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004d52:	e7ed      	b.n	8004d30 <__exponent+0x4c>
 8004d54:	2330      	movs	r3, #48	; 0x30
 8004d56:	3130      	adds	r1, #48	; 0x30
 8004d58:	7083      	strb	r3, [r0, #2]
 8004d5a:	70c1      	strb	r1, [r0, #3]
 8004d5c:	1d03      	adds	r3, r0, #4
 8004d5e:	e7f1      	b.n	8004d44 <__exponent+0x60>

08004d60 <_printf_float>:
 8004d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d64:	ed2d 8b02 	vpush	{d8}
 8004d68:	b08d      	sub	sp, #52	; 0x34
 8004d6a:	460c      	mov	r4, r1
 8004d6c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004d70:	4616      	mov	r6, r2
 8004d72:	461f      	mov	r7, r3
 8004d74:	4605      	mov	r5, r0
 8004d76:	f001 fa59 	bl	800622c <_localeconv_r>
 8004d7a:	f8d0 a000 	ldr.w	sl, [r0]
 8004d7e:	4650      	mov	r0, sl
 8004d80:	f7fb fa46 	bl	8000210 <strlen>
 8004d84:	2300      	movs	r3, #0
 8004d86:	930a      	str	r3, [sp, #40]	; 0x28
 8004d88:	6823      	ldr	r3, [r4, #0]
 8004d8a:	9305      	str	r3, [sp, #20]
 8004d8c:	f8d8 3000 	ldr.w	r3, [r8]
 8004d90:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004d94:	3307      	adds	r3, #7
 8004d96:	f023 0307 	bic.w	r3, r3, #7
 8004d9a:	f103 0208 	add.w	r2, r3, #8
 8004d9e:	f8c8 2000 	str.w	r2, [r8]
 8004da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8004daa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004dae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004db2:	9307      	str	r3, [sp, #28]
 8004db4:	f8cd 8018 	str.w	r8, [sp, #24]
 8004db8:	ee08 0a10 	vmov	s16, r0
 8004dbc:	4b9f      	ldr	r3, [pc, #636]	; (800503c <_printf_float+0x2dc>)
 8004dbe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004dc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004dc6:	f7fb fed1 	bl	8000b6c <__aeabi_dcmpun>
 8004dca:	bb88      	cbnz	r0, 8004e30 <_printf_float+0xd0>
 8004dcc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004dd0:	4b9a      	ldr	r3, [pc, #616]	; (800503c <_printf_float+0x2dc>)
 8004dd2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004dd6:	f7fb feab 	bl	8000b30 <__aeabi_dcmple>
 8004dda:	bb48      	cbnz	r0, 8004e30 <_printf_float+0xd0>
 8004ddc:	2200      	movs	r2, #0
 8004dde:	2300      	movs	r3, #0
 8004de0:	4640      	mov	r0, r8
 8004de2:	4649      	mov	r1, r9
 8004de4:	f7fb fe9a 	bl	8000b1c <__aeabi_dcmplt>
 8004de8:	b110      	cbz	r0, 8004df0 <_printf_float+0x90>
 8004dea:	232d      	movs	r3, #45	; 0x2d
 8004dec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004df0:	4b93      	ldr	r3, [pc, #588]	; (8005040 <_printf_float+0x2e0>)
 8004df2:	4894      	ldr	r0, [pc, #592]	; (8005044 <_printf_float+0x2e4>)
 8004df4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004df8:	bf94      	ite	ls
 8004dfa:	4698      	movls	r8, r3
 8004dfc:	4680      	movhi	r8, r0
 8004dfe:	2303      	movs	r3, #3
 8004e00:	6123      	str	r3, [r4, #16]
 8004e02:	9b05      	ldr	r3, [sp, #20]
 8004e04:	f023 0204 	bic.w	r2, r3, #4
 8004e08:	6022      	str	r2, [r4, #0]
 8004e0a:	f04f 0900 	mov.w	r9, #0
 8004e0e:	9700      	str	r7, [sp, #0]
 8004e10:	4633      	mov	r3, r6
 8004e12:	aa0b      	add	r2, sp, #44	; 0x2c
 8004e14:	4621      	mov	r1, r4
 8004e16:	4628      	mov	r0, r5
 8004e18:	f000 f9d8 	bl	80051cc <_printf_common>
 8004e1c:	3001      	adds	r0, #1
 8004e1e:	f040 8090 	bne.w	8004f42 <_printf_float+0x1e2>
 8004e22:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004e26:	b00d      	add	sp, #52	; 0x34
 8004e28:	ecbd 8b02 	vpop	{d8}
 8004e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e30:	4642      	mov	r2, r8
 8004e32:	464b      	mov	r3, r9
 8004e34:	4640      	mov	r0, r8
 8004e36:	4649      	mov	r1, r9
 8004e38:	f7fb fe98 	bl	8000b6c <__aeabi_dcmpun>
 8004e3c:	b140      	cbz	r0, 8004e50 <_printf_float+0xf0>
 8004e3e:	464b      	mov	r3, r9
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	bfbc      	itt	lt
 8004e44:	232d      	movlt	r3, #45	; 0x2d
 8004e46:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004e4a:	487f      	ldr	r0, [pc, #508]	; (8005048 <_printf_float+0x2e8>)
 8004e4c:	4b7f      	ldr	r3, [pc, #508]	; (800504c <_printf_float+0x2ec>)
 8004e4e:	e7d1      	b.n	8004df4 <_printf_float+0x94>
 8004e50:	6863      	ldr	r3, [r4, #4]
 8004e52:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004e56:	9206      	str	r2, [sp, #24]
 8004e58:	1c5a      	adds	r2, r3, #1
 8004e5a:	d13f      	bne.n	8004edc <_printf_float+0x17c>
 8004e5c:	2306      	movs	r3, #6
 8004e5e:	6063      	str	r3, [r4, #4]
 8004e60:	9b05      	ldr	r3, [sp, #20]
 8004e62:	6861      	ldr	r1, [r4, #4]
 8004e64:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004e68:	2300      	movs	r3, #0
 8004e6a:	9303      	str	r3, [sp, #12]
 8004e6c:	ab0a      	add	r3, sp, #40	; 0x28
 8004e6e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004e72:	ab09      	add	r3, sp, #36	; 0x24
 8004e74:	ec49 8b10 	vmov	d0, r8, r9
 8004e78:	9300      	str	r3, [sp, #0]
 8004e7a:	6022      	str	r2, [r4, #0]
 8004e7c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004e80:	4628      	mov	r0, r5
 8004e82:	f7ff fecd 	bl	8004c20 <__cvt>
 8004e86:	9b06      	ldr	r3, [sp, #24]
 8004e88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004e8a:	2b47      	cmp	r3, #71	; 0x47
 8004e8c:	4680      	mov	r8, r0
 8004e8e:	d108      	bne.n	8004ea2 <_printf_float+0x142>
 8004e90:	1cc8      	adds	r0, r1, #3
 8004e92:	db02      	blt.n	8004e9a <_printf_float+0x13a>
 8004e94:	6863      	ldr	r3, [r4, #4]
 8004e96:	4299      	cmp	r1, r3
 8004e98:	dd41      	ble.n	8004f1e <_printf_float+0x1be>
 8004e9a:	f1ab 0b02 	sub.w	fp, fp, #2
 8004e9e:	fa5f fb8b 	uxtb.w	fp, fp
 8004ea2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004ea6:	d820      	bhi.n	8004eea <_printf_float+0x18a>
 8004ea8:	3901      	subs	r1, #1
 8004eaa:	465a      	mov	r2, fp
 8004eac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004eb0:	9109      	str	r1, [sp, #36]	; 0x24
 8004eb2:	f7ff ff17 	bl	8004ce4 <__exponent>
 8004eb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004eb8:	1813      	adds	r3, r2, r0
 8004eba:	2a01      	cmp	r2, #1
 8004ebc:	4681      	mov	r9, r0
 8004ebe:	6123      	str	r3, [r4, #16]
 8004ec0:	dc02      	bgt.n	8004ec8 <_printf_float+0x168>
 8004ec2:	6822      	ldr	r2, [r4, #0]
 8004ec4:	07d2      	lsls	r2, r2, #31
 8004ec6:	d501      	bpl.n	8004ecc <_printf_float+0x16c>
 8004ec8:	3301      	adds	r3, #1
 8004eca:	6123      	str	r3, [r4, #16]
 8004ecc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d09c      	beq.n	8004e0e <_printf_float+0xae>
 8004ed4:	232d      	movs	r3, #45	; 0x2d
 8004ed6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eda:	e798      	b.n	8004e0e <_printf_float+0xae>
 8004edc:	9a06      	ldr	r2, [sp, #24]
 8004ede:	2a47      	cmp	r2, #71	; 0x47
 8004ee0:	d1be      	bne.n	8004e60 <_printf_float+0x100>
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d1bc      	bne.n	8004e60 <_printf_float+0x100>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e7b9      	b.n	8004e5e <_printf_float+0xfe>
 8004eea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004eee:	d118      	bne.n	8004f22 <_printf_float+0x1c2>
 8004ef0:	2900      	cmp	r1, #0
 8004ef2:	6863      	ldr	r3, [r4, #4]
 8004ef4:	dd0b      	ble.n	8004f0e <_printf_float+0x1ae>
 8004ef6:	6121      	str	r1, [r4, #16]
 8004ef8:	b913      	cbnz	r3, 8004f00 <_printf_float+0x1a0>
 8004efa:	6822      	ldr	r2, [r4, #0]
 8004efc:	07d0      	lsls	r0, r2, #31
 8004efe:	d502      	bpl.n	8004f06 <_printf_float+0x1a6>
 8004f00:	3301      	adds	r3, #1
 8004f02:	440b      	add	r3, r1
 8004f04:	6123      	str	r3, [r4, #16]
 8004f06:	65a1      	str	r1, [r4, #88]	; 0x58
 8004f08:	f04f 0900 	mov.w	r9, #0
 8004f0c:	e7de      	b.n	8004ecc <_printf_float+0x16c>
 8004f0e:	b913      	cbnz	r3, 8004f16 <_printf_float+0x1b6>
 8004f10:	6822      	ldr	r2, [r4, #0]
 8004f12:	07d2      	lsls	r2, r2, #31
 8004f14:	d501      	bpl.n	8004f1a <_printf_float+0x1ba>
 8004f16:	3302      	adds	r3, #2
 8004f18:	e7f4      	b.n	8004f04 <_printf_float+0x1a4>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e7f2      	b.n	8004f04 <_printf_float+0x1a4>
 8004f1e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004f22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f24:	4299      	cmp	r1, r3
 8004f26:	db05      	blt.n	8004f34 <_printf_float+0x1d4>
 8004f28:	6823      	ldr	r3, [r4, #0]
 8004f2a:	6121      	str	r1, [r4, #16]
 8004f2c:	07d8      	lsls	r0, r3, #31
 8004f2e:	d5ea      	bpl.n	8004f06 <_printf_float+0x1a6>
 8004f30:	1c4b      	adds	r3, r1, #1
 8004f32:	e7e7      	b.n	8004f04 <_printf_float+0x1a4>
 8004f34:	2900      	cmp	r1, #0
 8004f36:	bfd4      	ite	le
 8004f38:	f1c1 0202 	rsble	r2, r1, #2
 8004f3c:	2201      	movgt	r2, #1
 8004f3e:	4413      	add	r3, r2
 8004f40:	e7e0      	b.n	8004f04 <_printf_float+0x1a4>
 8004f42:	6823      	ldr	r3, [r4, #0]
 8004f44:	055a      	lsls	r2, r3, #21
 8004f46:	d407      	bmi.n	8004f58 <_printf_float+0x1f8>
 8004f48:	6923      	ldr	r3, [r4, #16]
 8004f4a:	4642      	mov	r2, r8
 8004f4c:	4631      	mov	r1, r6
 8004f4e:	4628      	mov	r0, r5
 8004f50:	47b8      	blx	r7
 8004f52:	3001      	adds	r0, #1
 8004f54:	d12c      	bne.n	8004fb0 <_printf_float+0x250>
 8004f56:	e764      	b.n	8004e22 <_printf_float+0xc2>
 8004f58:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004f5c:	f240 80e0 	bls.w	8005120 <_printf_float+0x3c0>
 8004f60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004f64:	2200      	movs	r2, #0
 8004f66:	2300      	movs	r3, #0
 8004f68:	f7fb fdce 	bl	8000b08 <__aeabi_dcmpeq>
 8004f6c:	2800      	cmp	r0, #0
 8004f6e:	d034      	beq.n	8004fda <_printf_float+0x27a>
 8004f70:	4a37      	ldr	r2, [pc, #220]	; (8005050 <_printf_float+0x2f0>)
 8004f72:	2301      	movs	r3, #1
 8004f74:	4631      	mov	r1, r6
 8004f76:	4628      	mov	r0, r5
 8004f78:	47b8      	blx	r7
 8004f7a:	3001      	adds	r0, #1
 8004f7c:	f43f af51 	beq.w	8004e22 <_printf_float+0xc2>
 8004f80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004f84:	429a      	cmp	r2, r3
 8004f86:	db02      	blt.n	8004f8e <_printf_float+0x22e>
 8004f88:	6823      	ldr	r3, [r4, #0]
 8004f8a:	07d8      	lsls	r0, r3, #31
 8004f8c:	d510      	bpl.n	8004fb0 <_printf_float+0x250>
 8004f8e:	ee18 3a10 	vmov	r3, s16
 8004f92:	4652      	mov	r2, sl
 8004f94:	4631      	mov	r1, r6
 8004f96:	4628      	mov	r0, r5
 8004f98:	47b8      	blx	r7
 8004f9a:	3001      	adds	r0, #1
 8004f9c:	f43f af41 	beq.w	8004e22 <_printf_float+0xc2>
 8004fa0:	f04f 0800 	mov.w	r8, #0
 8004fa4:	f104 091a 	add.w	r9, r4, #26
 8004fa8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004faa:	3b01      	subs	r3, #1
 8004fac:	4543      	cmp	r3, r8
 8004fae:	dc09      	bgt.n	8004fc4 <_printf_float+0x264>
 8004fb0:	6823      	ldr	r3, [r4, #0]
 8004fb2:	079b      	lsls	r3, r3, #30
 8004fb4:	f100 8105 	bmi.w	80051c2 <_printf_float+0x462>
 8004fb8:	68e0      	ldr	r0, [r4, #12]
 8004fba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004fbc:	4298      	cmp	r0, r3
 8004fbe:	bfb8      	it	lt
 8004fc0:	4618      	movlt	r0, r3
 8004fc2:	e730      	b.n	8004e26 <_printf_float+0xc6>
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	464a      	mov	r2, r9
 8004fc8:	4631      	mov	r1, r6
 8004fca:	4628      	mov	r0, r5
 8004fcc:	47b8      	blx	r7
 8004fce:	3001      	adds	r0, #1
 8004fd0:	f43f af27 	beq.w	8004e22 <_printf_float+0xc2>
 8004fd4:	f108 0801 	add.w	r8, r8, #1
 8004fd8:	e7e6      	b.n	8004fa8 <_printf_float+0x248>
 8004fda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	dc39      	bgt.n	8005054 <_printf_float+0x2f4>
 8004fe0:	4a1b      	ldr	r2, [pc, #108]	; (8005050 <_printf_float+0x2f0>)
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	4631      	mov	r1, r6
 8004fe6:	4628      	mov	r0, r5
 8004fe8:	47b8      	blx	r7
 8004fea:	3001      	adds	r0, #1
 8004fec:	f43f af19 	beq.w	8004e22 <_printf_float+0xc2>
 8004ff0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	d102      	bne.n	8004ffe <_printf_float+0x29e>
 8004ff8:	6823      	ldr	r3, [r4, #0]
 8004ffa:	07d9      	lsls	r1, r3, #31
 8004ffc:	d5d8      	bpl.n	8004fb0 <_printf_float+0x250>
 8004ffe:	ee18 3a10 	vmov	r3, s16
 8005002:	4652      	mov	r2, sl
 8005004:	4631      	mov	r1, r6
 8005006:	4628      	mov	r0, r5
 8005008:	47b8      	blx	r7
 800500a:	3001      	adds	r0, #1
 800500c:	f43f af09 	beq.w	8004e22 <_printf_float+0xc2>
 8005010:	f04f 0900 	mov.w	r9, #0
 8005014:	f104 0a1a 	add.w	sl, r4, #26
 8005018:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800501a:	425b      	negs	r3, r3
 800501c:	454b      	cmp	r3, r9
 800501e:	dc01      	bgt.n	8005024 <_printf_float+0x2c4>
 8005020:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005022:	e792      	b.n	8004f4a <_printf_float+0x1ea>
 8005024:	2301      	movs	r3, #1
 8005026:	4652      	mov	r2, sl
 8005028:	4631      	mov	r1, r6
 800502a:	4628      	mov	r0, r5
 800502c:	47b8      	blx	r7
 800502e:	3001      	adds	r0, #1
 8005030:	f43f aef7 	beq.w	8004e22 <_printf_float+0xc2>
 8005034:	f109 0901 	add.w	r9, r9, #1
 8005038:	e7ee      	b.n	8005018 <_printf_float+0x2b8>
 800503a:	bf00      	nop
 800503c:	7fefffff 	.word	0x7fefffff
 8005040:	08007a30 	.word	0x08007a30
 8005044:	08007a34 	.word	0x08007a34
 8005048:	08007a3c 	.word	0x08007a3c
 800504c:	08007a38 	.word	0x08007a38
 8005050:	08007a40 	.word	0x08007a40
 8005054:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005056:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005058:	429a      	cmp	r2, r3
 800505a:	bfa8      	it	ge
 800505c:	461a      	movge	r2, r3
 800505e:	2a00      	cmp	r2, #0
 8005060:	4691      	mov	r9, r2
 8005062:	dc37      	bgt.n	80050d4 <_printf_float+0x374>
 8005064:	f04f 0b00 	mov.w	fp, #0
 8005068:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800506c:	f104 021a 	add.w	r2, r4, #26
 8005070:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005072:	9305      	str	r3, [sp, #20]
 8005074:	eba3 0309 	sub.w	r3, r3, r9
 8005078:	455b      	cmp	r3, fp
 800507a:	dc33      	bgt.n	80050e4 <_printf_float+0x384>
 800507c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005080:	429a      	cmp	r2, r3
 8005082:	db3b      	blt.n	80050fc <_printf_float+0x39c>
 8005084:	6823      	ldr	r3, [r4, #0]
 8005086:	07da      	lsls	r2, r3, #31
 8005088:	d438      	bmi.n	80050fc <_printf_float+0x39c>
 800508a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800508c:	9a05      	ldr	r2, [sp, #20]
 800508e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005090:	1a9a      	subs	r2, r3, r2
 8005092:	eba3 0901 	sub.w	r9, r3, r1
 8005096:	4591      	cmp	r9, r2
 8005098:	bfa8      	it	ge
 800509a:	4691      	movge	r9, r2
 800509c:	f1b9 0f00 	cmp.w	r9, #0
 80050a0:	dc35      	bgt.n	800510e <_printf_float+0x3ae>
 80050a2:	f04f 0800 	mov.w	r8, #0
 80050a6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80050aa:	f104 0a1a 	add.w	sl, r4, #26
 80050ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050b2:	1a9b      	subs	r3, r3, r2
 80050b4:	eba3 0309 	sub.w	r3, r3, r9
 80050b8:	4543      	cmp	r3, r8
 80050ba:	f77f af79 	ble.w	8004fb0 <_printf_float+0x250>
 80050be:	2301      	movs	r3, #1
 80050c0:	4652      	mov	r2, sl
 80050c2:	4631      	mov	r1, r6
 80050c4:	4628      	mov	r0, r5
 80050c6:	47b8      	blx	r7
 80050c8:	3001      	adds	r0, #1
 80050ca:	f43f aeaa 	beq.w	8004e22 <_printf_float+0xc2>
 80050ce:	f108 0801 	add.w	r8, r8, #1
 80050d2:	e7ec      	b.n	80050ae <_printf_float+0x34e>
 80050d4:	4613      	mov	r3, r2
 80050d6:	4631      	mov	r1, r6
 80050d8:	4642      	mov	r2, r8
 80050da:	4628      	mov	r0, r5
 80050dc:	47b8      	blx	r7
 80050de:	3001      	adds	r0, #1
 80050e0:	d1c0      	bne.n	8005064 <_printf_float+0x304>
 80050e2:	e69e      	b.n	8004e22 <_printf_float+0xc2>
 80050e4:	2301      	movs	r3, #1
 80050e6:	4631      	mov	r1, r6
 80050e8:	4628      	mov	r0, r5
 80050ea:	9205      	str	r2, [sp, #20]
 80050ec:	47b8      	blx	r7
 80050ee:	3001      	adds	r0, #1
 80050f0:	f43f ae97 	beq.w	8004e22 <_printf_float+0xc2>
 80050f4:	9a05      	ldr	r2, [sp, #20]
 80050f6:	f10b 0b01 	add.w	fp, fp, #1
 80050fa:	e7b9      	b.n	8005070 <_printf_float+0x310>
 80050fc:	ee18 3a10 	vmov	r3, s16
 8005100:	4652      	mov	r2, sl
 8005102:	4631      	mov	r1, r6
 8005104:	4628      	mov	r0, r5
 8005106:	47b8      	blx	r7
 8005108:	3001      	adds	r0, #1
 800510a:	d1be      	bne.n	800508a <_printf_float+0x32a>
 800510c:	e689      	b.n	8004e22 <_printf_float+0xc2>
 800510e:	9a05      	ldr	r2, [sp, #20]
 8005110:	464b      	mov	r3, r9
 8005112:	4442      	add	r2, r8
 8005114:	4631      	mov	r1, r6
 8005116:	4628      	mov	r0, r5
 8005118:	47b8      	blx	r7
 800511a:	3001      	adds	r0, #1
 800511c:	d1c1      	bne.n	80050a2 <_printf_float+0x342>
 800511e:	e680      	b.n	8004e22 <_printf_float+0xc2>
 8005120:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005122:	2a01      	cmp	r2, #1
 8005124:	dc01      	bgt.n	800512a <_printf_float+0x3ca>
 8005126:	07db      	lsls	r3, r3, #31
 8005128:	d538      	bpl.n	800519c <_printf_float+0x43c>
 800512a:	2301      	movs	r3, #1
 800512c:	4642      	mov	r2, r8
 800512e:	4631      	mov	r1, r6
 8005130:	4628      	mov	r0, r5
 8005132:	47b8      	blx	r7
 8005134:	3001      	adds	r0, #1
 8005136:	f43f ae74 	beq.w	8004e22 <_printf_float+0xc2>
 800513a:	ee18 3a10 	vmov	r3, s16
 800513e:	4652      	mov	r2, sl
 8005140:	4631      	mov	r1, r6
 8005142:	4628      	mov	r0, r5
 8005144:	47b8      	blx	r7
 8005146:	3001      	adds	r0, #1
 8005148:	f43f ae6b 	beq.w	8004e22 <_printf_float+0xc2>
 800514c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005150:	2200      	movs	r2, #0
 8005152:	2300      	movs	r3, #0
 8005154:	f7fb fcd8 	bl	8000b08 <__aeabi_dcmpeq>
 8005158:	b9d8      	cbnz	r0, 8005192 <_printf_float+0x432>
 800515a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800515c:	f108 0201 	add.w	r2, r8, #1
 8005160:	3b01      	subs	r3, #1
 8005162:	4631      	mov	r1, r6
 8005164:	4628      	mov	r0, r5
 8005166:	47b8      	blx	r7
 8005168:	3001      	adds	r0, #1
 800516a:	d10e      	bne.n	800518a <_printf_float+0x42a>
 800516c:	e659      	b.n	8004e22 <_printf_float+0xc2>
 800516e:	2301      	movs	r3, #1
 8005170:	4652      	mov	r2, sl
 8005172:	4631      	mov	r1, r6
 8005174:	4628      	mov	r0, r5
 8005176:	47b8      	blx	r7
 8005178:	3001      	adds	r0, #1
 800517a:	f43f ae52 	beq.w	8004e22 <_printf_float+0xc2>
 800517e:	f108 0801 	add.w	r8, r8, #1
 8005182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005184:	3b01      	subs	r3, #1
 8005186:	4543      	cmp	r3, r8
 8005188:	dcf1      	bgt.n	800516e <_printf_float+0x40e>
 800518a:	464b      	mov	r3, r9
 800518c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005190:	e6dc      	b.n	8004f4c <_printf_float+0x1ec>
 8005192:	f04f 0800 	mov.w	r8, #0
 8005196:	f104 0a1a 	add.w	sl, r4, #26
 800519a:	e7f2      	b.n	8005182 <_printf_float+0x422>
 800519c:	2301      	movs	r3, #1
 800519e:	4642      	mov	r2, r8
 80051a0:	e7df      	b.n	8005162 <_printf_float+0x402>
 80051a2:	2301      	movs	r3, #1
 80051a4:	464a      	mov	r2, r9
 80051a6:	4631      	mov	r1, r6
 80051a8:	4628      	mov	r0, r5
 80051aa:	47b8      	blx	r7
 80051ac:	3001      	adds	r0, #1
 80051ae:	f43f ae38 	beq.w	8004e22 <_printf_float+0xc2>
 80051b2:	f108 0801 	add.w	r8, r8, #1
 80051b6:	68e3      	ldr	r3, [r4, #12]
 80051b8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80051ba:	1a5b      	subs	r3, r3, r1
 80051bc:	4543      	cmp	r3, r8
 80051be:	dcf0      	bgt.n	80051a2 <_printf_float+0x442>
 80051c0:	e6fa      	b.n	8004fb8 <_printf_float+0x258>
 80051c2:	f04f 0800 	mov.w	r8, #0
 80051c6:	f104 0919 	add.w	r9, r4, #25
 80051ca:	e7f4      	b.n	80051b6 <_printf_float+0x456>

080051cc <_printf_common>:
 80051cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051d0:	4616      	mov	r6, r2
 80051d2:	4699      	mov	r9, r3
 80051d4:	688a      	ldr	r2, [r1, #8]
 80051d6:	690b      	ldr	r3, [r1, #16]
 80051d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80051dc:	4293      	cmp	r3, r2
 80051de:	bfb8      	it	lt
 80051e0:	4613      	movlt	r3, r2
 80051e2:	6033      	str	r3, [r6, #0]
 80051e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80051e8:	4607      	mov	r7, r0
 80051ea:	460c      	mov	r4, r1
 80051ec:	b10a      	cbz	r2, 80051f2 <_printf_common+0x26>
 80051ee:	3301      	adds	r3, #1
 80051f0:	6033      	str	r3, [r6, #0]
 80051f2:	6823      	ldr	r3, [r4, #0]
 80051f4:	0699      	lsls	r1, r3, #26
 80051f6:	bf42      	ittt	mi
 80051f8:	6833      	ldrmi	r3, [r6, #0]
 80051fa:	3302      	addmi	r3, #2
 80051fc:	6033      	strmi	r3, [r6, #0]
 80051fe:	6825      	ldr	r5, [r4, #0]
 8005200:	f015 0506 	ands.w	r5, r5, #6
 8005204:	d106      	bne.n	8005214 <_printf_common+0x48>
 8005206:	f104 0a19 	add.w	sl, r4, #25
 800520a:	68e3      	ldr	r3, [r4, #12]
 800520c:	6832      	ldr	r2, [r6, #0]
 800520e:	1a9b      	subs	r3, r3, r2
 8005210:	42ab      	cmp	r3, r5
 8005212:	dc26      	bgt.n	8005262 <_printf_common+0x96>
 8005214:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005218:	1e13      	subs	r3, r2, #0
 800521a:	6822      	ldr	r2, [r4, #0]
 800521c:	bf18      	it	ne
 800521e:	2301      	movne	r3, #1
 8005220:	0692      	lsls	r2, r2, #26
 8005222:	d42b      	bmi.n	800527c <_printf_common+0xb0>
 8005224:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005228:	4649      	mov	r1, r9
 800522a:	4638      	mov	r0, r7
 800522c:	47c0      	blx	r8
 800522e:	3001      	adds	r0, #1
 8005230:	d01e      	beq.n	8005270 <_printf_common+0xa4>
 8005232:	6823      	ldr	r3, [r4, #0]
 8005234:	68e5      	ldr	r5, [r4, #12]
 8005236:	6832      	ldr	r2, [r6, #0]
 8005238:	f003 0306 	and.w	r3, r3, #6
 800523c:	2b04      	cmp	r3, #4
 800523e:	bf08      	it	eq
 8005240:	1aad      	subeq	r5, r5, r2
 8005242:	68a3      	ldr	r3, [r4, #8]
 8005244:	6922      	ldr	r2, [r4, #16]
 8005246:	bf0c      	ite	eq
 8005248:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800524c:	2500      	movne	r5, #0
 800524e:	4293      	cmp	r3, r2
 8005250:	bfc4      	itt	gt
 8005252:	1a9b      	subgt	r3, r3, r2
 8005254:	18ed      	addgt	r5, r5, r3
 8005256:	2600      	movs	r6, #0
 8005258:	341a      	adds	r4, #26
 800525a:	42b5      	cmp	r5, r6
 800525c:	d11a      	bne.n	8005294 <_printf_common+0xc8>
 800525e:	2000      	movs	r0, #0
 8005260:	e008      	b.n	8005274 <_printf_common+0xa8>
 8005262:	2301      	movs	r3, #1
 8005264:	4652      	mov	r2, sl
 8005266:	4649      	mov	r1, r9
 8005268:	4638      	mov	r0, r7
 800526a:	47c0      	blx	r8
 800526c:	3001      	adds	r0, #1
 800526e:	d103      	bne.n	8005278 <_printf_common+0xac>
 8005270:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005278:	3501      	adds	r5, #1
 800527a:	e7c6      	b.n	800520a <_printf_common+0x3e>
 800527c:	18e1      	adds	r1, r4, r3
 800527e:	1c5a      	adds	r2, r3, #1
 8005280:	2030      	movs	r0, #48	; 0x30
 8005282:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005286:	4422      	add	r2, r4
 8005288:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800528c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005290:	3302      	adds	r3, #2
 8005292:	e7c7      	b.n	8005224 <_printf_common+0x58>
 8005294:	2301      	movs	r3, #1
 8005296:	4622      	mov	r2, r4
 8005298:	4649      	mov	r1, r9
 800529a:	4638      	mov	r0, r7
 800529c:	47c0      	blx	r8
 800529e:	3001      	adds	r0, #1
 80052a0:	d0e6      	beq.n	8005270 <_printf_common+0xa4>
 80052a2:	3601      	adds	r6, #1
 80052a4:	e7d9      	b.n	800525a <_printf_common+0x8e>
	...

080052a8 <_printf_i>:
 80052a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80052ac:	7e0f      	ldrb	r7, [r1, #24]
 80052ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80052b0:	2f78      	cmp	r7, #120	; 0x78
 80052b2:	4691      	mov	r9, r2
 80052b4:	4680      	mov	r8, r0
 80052b6:	460c      	mov	r4, r1
 80052b8:	469a      	mov	sl, r3
 80052ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80052be:	d807      	bhi.n	80052d0 <_printf_i+0x28>
 80052c0:	2f62      	cmp	r7, #98	; 0x62
 80052c2:	d80a      	bhi.n	80052da <_printf_i+0x32>
 80052c4:	2f00      	cmp	r7, #0
 80052c6:	f000 80d8 	beq.w	800547a <_printf_i+0x1d2>
 80052ca:	2f58      	cmp	r7, #88	; 0x58
 80052cc:	f000 80a3 	beq.w	8005416 <_printf_i+0x16e>
 80052d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80052d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80052d8:	e03a      	b.n	8005350 <_printf_i+0xa8>
 80052da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80052de:	2b15      	cmp	r3, #21
 80052e0:	d8f6      	bhi.n	80052d0 <_printf_i+0x28>
 80052e2:	a101      	add	r1, pc, #4	; (adr r1, 80052e8 <_printf_i+0x40>)
 80052e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80052e8:	08005341 	.word	0x08005341
 80052ec:	08005355 	.word	0x08005355
 80052f0:	080052d1 	.word	0x080052d1
 80052f4:	080052d1 	.word	0x080052d1
 80052f8:	080052d1 	.word	0x080052d1
 80052fc:	080052d1 	.word	0x080052d1
 8005300:	08005355 	.word	0x08005355
 8005304:	080052d1 	.word	0x080052d1
 8005308:	080052d1 	.word	0x080052d1
 800530c:	080052d1 	.word	0x080052d1
 8005310:	080052d1 	.word	0x080052d1
 8005314:	08005461 	.word	0x08005461
 8005318:	08005385 	.word	0x08005385
 800531c:	08005443 	.word	0x08005443
 8005320:	080052d1 	.word	0x080052d1
 8005324:	080052d1 	.word	0x080052d1
 8005328:	08005483 	.word	0x08005483
 800532c:	080052d1 	.word	0x080052d1
 8005330:	08005385 	.word	0x08005385
 8005334:	080052d1 	.word	0x080052d1
 8005338:	080052d1 	.word	0x080052d1
 800533c:	0800544b 	.word	0x0800544b
 8005340:	682b      	ldr	r3, [r5, #0]
 8005342:	1d1a      	adds	r2, r3, #4
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	602a      	str	r2, [r5, #0]
 8005348:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800534c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005350:	2301      	movs	r3, #1
 8005352:	e0a3      	b.n	800549c <_printf_i+0x1f4>
 8005354:	6820      	ldr	r0, [r4, #0]
 8005356:	6829      	ldr	r1, [r5, #0]
 8005358:	0606      	lsls	r6, r0, #24
 800535a:	f101 0304 	add.w	r3, r1, #4
 800535e:	d50a      	bpl.n	8005376 <_printf_i+0xce>
 8005360:	680e      	ldr	r6, [r1, #0]
 8005362:	602b      	str	r3, [r5, #0]
 8005364:	2e00      	cmp	r6, #0
 8005366:	da03      	bge.n	8005370 <_printf_i+0xc8>
 8005368:	232d      	movs	r3, #45	; 0x2d
 800536a:	4276      	negs	r6, r6
 800536c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005370:	485e      	ldr	r0, [pc, #376]	; (80054ec <_printf_i+0x244>)
 8005372:	230a      	movs	r3, #10
 8005374:	e019      	b.n	80053aa <_printf_i+0x102>
 8005376:	680e      	ldr	r6, [r1, #0]
 8005378:	602b      	str	r3, [r5, #0]
 800537a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800537e:	bf18      	it	ne
 8005380:	b236      	sxthne	r6, r6
 8005382:	e7ef      	b.n	8005364 <_printf_i+0xbc>
 8005384:	682b      	ldr	r3, [r5, #0]
 8005386:	6820      	ldr	r0, [r4, #0]
 8005388:	1d19      	adds	r1, r3, #4
 800538a:	6029      	str	r1, [r5, #0]
 800538c:	0601      	lsls	r1, r0, #24
 800538e:	d501      	bpl.n	8005394 <_printf_i+0xec>
 8005390:	681e      	ldr	r6, [r3, #0]
 8005392:	e002      	b.n	800539a <_printf_i+0xf2>
 8005394:	0646      	lsls	r6, r0, #25
 8005396:	d5fb      	bpl.n	8005390 <_printf_i+0xe8>
 8005398:	881e      	ldrh	r6, [r3, #0]
 800539a:	4854      	ldr	r0, [pc, #336]	; (80054ec <_printf_i+0x244>)
 800539c:	2f6f      	cmp	r7, #111	; 0x6f
 800539e:	bf0c      	ite	eq
 80053a0:	2308      	moveq	r3, #8
 80053a2:	230a      	movne	r3, #10
 80053a4:	2100      	movs	r1, #0
 80053a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80053aa:	6865      	ldr	r5, [r4, #4]
 80053ac:	60a5      	str	r5, [r4, #8]
 80053ae:	2d00      	cmp	r5, #0
 80053b0:	bfa2      	ittt	ge
 80053b2:	6821      	ldrge	r1, [r4, #0]
 80053b4:	f021 0104 	bicge.w	r1, r1, #4
 80053b8:	6021      	strge	r1, [r4, #0]
 80053ba:	b90e      	cbnz	r6, 80053c0 <_printf_i+0x118>
 80053bc:	2d00      	cmp	r5, #0
 80053be:	d04d      	beq.n	800545c <_printf_i+0x1b4>
 80053c0:	4615      	mov	r5, r2
 80053c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80053c6:	fb03 6711 	mls	r7, r3, r1, r6
 80053ca:	5dc7      	ldrb	r7, [r0, r7]
 80053cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80053d0:	4637      	mov	r7, r6
 80053d2:	42bb      	cmp	r3, r7
 80053d4:	460e      	mov	r6, r1
 80053d6:	d9f4      	bls.n	80053c2 <_printf_i+0x11a>
 80053d8:	2b08      	cmp	r3, #8
 80053da:	d10b      	bne.n	80053f4 <_printf_i+0x14c>
 80053dc:	6823      	ldr	r3, [r4, #0]
 80053de:	07de      	lsls	r6, r3, #31
 80053e0:	d508      	bpl.n	80053f4 <_printf_i+0x14c>
 80053e2:	6923      	ldr	r3, [r4, #16]
 80053e4:	6861      	ldr	r1, [r4, #4]
 80053e6:	4299      	cmp	r1, r3
 80053e8:	bfde      	ittt	le
 80053ea:	2330      	movle	r3, #48	; 0x30
 80053ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80053f0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80053f4:	1b52      	subs	r2, r2, r5
 80053f6:	6122      	str	r2, [r4, #16]
 80053f8:	f8cd a000 	str.w	sl, [sp]
 80053fc:	464b      	mov	r3, r9
 80053fe:	aa03      	add	r2, sp, #12
 8005400:	4621      	mov	r1, r4
 8005402:	4640      	mov	r0, r8
 8005404:	f7ff fee2 	bl	80051cc <_printf_common>
 8005408:	3001      	adds	r0, #1
 800540a:	d14c      	bne.n	80054a6 <_printf_i+0x1fe>
 800540c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005410:	b004      	add	sp, #16
 8005412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005416:	4835      	ldr	r0, [pc, #212]	; (80054ec <_printf_i+0x244>)
 8005418:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800541c:	6829      	ldr	r1, [r5, #0]
 800541e:	6823      	ldr	r3, [r4, #0]
 8005420:	f851 6b04 	ldr.w	r6, [r1], #4
 8005424:	6029      	str	r1, [r5, #0]
 8005426:	061d      	lsls	r5, r3, #24
 8005428:	d514      	bpl.n	8005454 <_printf_i+0x1ac>
 800542a:	07df      	lsls	r7, r3, #31
 800542c:	bf44      	itt	mi
 800542e:	f043 0320 	orrmi.w	r3, r3, #32
 8005432:	6023      	strmi	r3, [r4, #0]
 8005434:	b91e      	cbnz	r6, 800543e <_printf_i+0x196>
 8005436:	6823      	ldr	r3, [r4, #0]
 8005438:	f023 0320 	bic.w	r3, r3, #32
 800543c:	6023      	str	r3, [r4, #0]
 800543e:	2310      	movs	r3, #16
 8005440:	e7b0      	b.n	80053a4 <_printf_i+0xfc>
 8005442:	6823      	ldr	r3, [r4, #0]
 8005444:	f043 0320 	orr.w	r3, r3, #32
 8005448:	6023      	str	r3, [r4, #0]
 800544a:	2378      	movs	r3, #120	; 0x78
 800544c:	4828      	ldr	r0, [pc, #160]	; (80054f0 <_printf_i+0x248>)
 800544e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005452:	e7e3      	b.n	800541c <_printf_i+0x174>
 8005454:	0659      	lsls	r1, r3, #25
 8005456:	bf48      	it	mi
 8005458:	b2b6      	uxthmi	r6, r6
 800545a:	e7e6      	b.n	800542a <_printf_i+0x182>
 800545c:	4615      	mov	r5, r2
 800545e:	e7bb      	b.n	80053d8 <_printf_i+0x130>
 8005460:	682b      	ldr	r3, [r5, #0]
 8005462:	6826      	ldr	r6, [r4, #0]
 8005464:	6961      	ldr	r1, [r4, #20]
 8005466:	1d18      	adds	r0, r3, #4
 8005468:	6028      	str	r0, [r5, #0]
 800546a:	0635      	lsls	r5, r6, #24
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	d501      	bpl.n	8005474 <_printf_i+0x1cc>
 8005470:	6019      	str	r1, [r3, #0]
 8005472:	e002      	b.n	800547a <_printf_i+0x1d2>
 8005474:	0670      	lsls	r0, r6, #25
 8005476:	d5fb      	bpl.n	8005470 <_printf_i+0x1c8>
 8005478:	8019      	strh	r1, [r3, #0]
 800547a:	2300      	movs	r3, #0
 800547c:	6123      	str	r3, [r4, #16]
 800547e:	4615      	mov	r5, r2
 8005480:	e7ba      	b.n	80053f8 <_printf_i+0x150>
 8005482:	682b      	ldr	r3, [r5, #0]
 8005484:	1d1a      	adds	r2, r3, #4
 8005486:	602a      	str	r2, [r5, #0]
 8005488:	681d      	ldr	r5, [r3, #0]
 800548a:	6862      	ldr	r2, [r4, #4]
 800548c:	2100      	movs	r1, #0
 800548e:	4628      	mov	r0, r5
 8005490:	f7fa fec6 	bl	8000220 <memchr>
 8005494:	b108      	cbz	r0, 800549a <_printf_i+0x1f2>
 8005496:	1b40      	subs	r0, r0, r5
 8005498:	6060      	str	r0, [r4, #4]
 800549a:	6863      	ldr	r3, [r4, #4]
 800549c:	6123      	str	r3, [r4, #16]
 800549e:	2300      	movs	r3, #0
 80054a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054a4:	e7a8      	b.n	80053f8 <_printf_i+0x150>
 80054a6:	6923      	ldr	r3, [r4, #16]
 80054a8:	462a      	mov	r2, r5
 80054aa:	4649      	mov	r1, r9
 80054ac:	4640      	mov	r0, r8
 80054ae:	47d0      	blx	sl
 80054b0:	3001      	adds	r0, #1
 80054b2:	d0ab      	beq.n	800540c <_printf_i+0x164>
 80054b4:	6823      	ldr	r3, [r4, #0]
 80054b6:	079b      	lsls	r3, r3, #30
 80054b8:	d413      	bmi.n	80054e2 <_printf_i+0x23a>
 80054ba:	68e0      	ldr	r0, [r4, #12]
 80054bc:	9b03      	ldr	r3, [sp, #12]
 80054be:	4298      	cmp	r0, r3
 80054c0:	bfb8      	it	lt
 80054c2:	4618      	movlt	r0, r3
 80054c4:	e7a4      	b.n	8005410 <_printf_i+0x168>
 80054c6:	2301      	movs	r3, #1
 80054c8:	4632      	mov	r2, r6
 80054ca:	4649      	mov	r1, r9
 80054cc:	4640      	mov	r0, r8
 80054ce:	47d0      	blx	sl
 80054d0:	3001      	adds	r0, #1
 80054d2:	d09b      	beq.n	800540c <_printf_i+0x164>
 80054d4:	3501      	adds	r5, #1
 80054d6:	68e3      	ldr	r3, [r4, #12]
 80054d8:	9903      	ldr	r1, [sp, #12]
 80054da:	1a5b      	subs	r3, r3, r1
 80054dc:	42ab      	cmp	r3, r5
 80054de:	dcf2      	bgt.n	80054c6 <_printf_i+0x21e>
 80054e0:	e7eb      	b.n	80054ba <_printf_i+0x212>
 80054e2:	2500      	movs	r5, #0
 80054e4:	f104 0619 	add.w	r6, r4, #25
 80054e8:	e7f5      	b.n	80054d6 <_printf_i+0x22e>
 80054ea:	bf00      	nop
 80054ec:	08007a42 	.word	0x08007a42
 80054f0:	08007a53 	.word	0x08007a53

080054f4 <siprintf>:
 80054f4:	b40e      	push	{r1, r2, r3}
 80054f6:	b500      	push	{lr}
 80054f8:	b09c      	sub	sp, #112	; 0x70
 80054fa:	ab1d      	add	r3, sp, #116	; 0x74
 80054fc:	9002      	str	r0, [sp, #8]
 80054fe:	9006      	str	r0, [sp, #24]
 8005500:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005504:	4809      	ldr	r0, [pc, #36]	; (800552c <siprintf+0x38>)
 8005506:	9107      	str	r1, [sp, #28]
 8005508:	9104      	str	r1, [sp, #16]
 800550a:	4909      	ldr	r1, [pc, #36]	; (8005530 <siprintf+0x3c>)
 800550c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005510:	9105      	str	r1, [sp, #20]
 8005512:	6800      	ldr	r0, [r0, #0]
 8005514:	9301      	str	r3, [sp, #4]
 8005516:	a902      	add	r1, sp, #8
 8005518:	f001 fb78 	bl	8006c0c <_svfiprintf_r>
 800551c:	9b02      	ldr	r3, [sp, #8]
 800551e:	2200      	movs	r2, #0
 8005520:	701a      	strb	r2, [r3, #0]
 8005522:	b01c      	add	sp, #112	; 0x70
 8005524:	f85d eb04 	ldr.w	lr, [sp], #4
 8005528:	b003      	add	sp, #12
 800552a:	4770      	bx	lr
 800552c:	20000010 	.word	0x20000010
 8005530:	ffff0208 	.word	0xffff0208

08005534 <quorem>:
 8005534:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005538:	6903      	ldr	r3, [r0, #16]
 800553a:	690c      	ldr	r4, [r1, #16]
 800553c:	42a3      	cmp	r3, r4
 800553e:	4607      	mov	r7, r0
 8005540:	f2c0 8081 	blt.w	8005646 <quorem+0x112>
 8005544:	3c01      	subs	r4, #1
 8005546:	f101 0814 	add.w	r8, r1, #20
 800554a:	f100 0514 	add.w	r5, r0, #20
 800554e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005552:	9301      	str	r3, [sp, #4]
 8005554:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005558:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800555c:	3301      	adds	r3, #1
 800555e:	429a      	cmp	r2, r3
 8005560:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005564:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005568:	fbb2 f6f3 	udiv	r6, r2, r3
 800556c:	d331      	bcc.n	80055d2 <quorem+0x9e>
 800556e:	f04f 0e00 	mov.w	lr, #0
 8005572:	4640      	mov	r0, r8
 8005574:	46ac      	mov	ip, r5
 8005576:	46f2      	mov	sl, lr
 8005578:	f850 2b04 	ldr.w	r2, [r0], #4
 800557c:	b293      	uxth	r3, r2
 800557e:	fb06 e303 	mla	r3, r6, r3, lr
 8005582:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005586:	b29b      	uxth	r3, r3
 8005588:	ebaa 0303 	sub.w	r3, sl, r3
 800558c:	f8dc a000 	ldr.w	sl, [ip]
 8005590:	0c12      	lsrs	r2, r2, #16
 8005592:	fa13 f38a 	uxtah	r3, r3, sl
 8005596:	fb06 e202 	mla	r2, r6, r2, lr
 800559a:	9300      	str	r3, [sp, #0]
 800559c:	9b00      	ldr	r3, [sp, #0]
 800559e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80055a2:	b292      	uxth	r2, r2
 80055a4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80055a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055ac:	f8bd 3000 	ldrh.w	r3, [sp]
 80055b0:	4581      	cmp	r9, r0
 80055b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055b6:	f84c 3b04 	str.w	r3, [ip], #4
 80055ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80055be:	d2db      	bcs.n	8005578 <quorem+0x44>
 80055c0:	f855 300b 	ldr.w	r3, [r5, fp]
 80055c4:	b92b      	cbnz	r3, 80055d2 <quorem+0x9e>
 80055c6:	9b01      	ldr	r3, [sp, #4]
 80055c8:	3b04      	subs	r3, #4
 80055ca:	429d      	cmp	r5, r3
 80055cc:	461a      	mov	r2, r3
 80055ce:	d32e      	bcc.n	800562e <quorem+0xfa>
 80055d0:	613c      	str	r4, [r7, #16]
 80055d2:	4638      	mov	r0, r7
 80055d4:	f001 f8c6 	bl	8006764 <__mcmp>
 80055d8:	2800      	cmp	r0, #0
 80055da:	db24      	blt.n	8005626 <quorem+0xf2>
 80055dc:	3601      	adds	r6, #1
 80055de:	4628      	mov	r0, r5
 80055e0:	f04f 0c00 	mov.w	ip, #0
 80055e4:	f858 2b04 	ldr.w	r2, [r8], #4
 80055e8:	f8d0 e000 	ldr.w	lr, [r0]
 80055ec:	b293      	uxth	r3, r2
 80055ee:	ebac 0303 	sub.w	r3, ip, r3
 80055f2:	0c12      	lsrs	r2, r2, #16
 80055f4:	fa13 f38e 	uxtah	r3, r3, lr
 80055f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80055fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005600:	b29b      	uxth	r3, r3
 8005602:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005606:	45c1      	cmp	r9, r8
 8005608:	f840 3b04 	str.w	r3, [r0], #4
 800560c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005610:	d2e8      	bcs.n	80055e4 <quorem+0xb0>
 8005612:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005616:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800561a:	b922      	cbnz	r2, 8005626 <quorem+0xf2>
 800561c:	3b04      	subs	r3, #4
 800561e:	429d      	cmp	r5, r3
 8005620:	461a      	mov	r2, r3
 8005622:	d30a      	bcc.n	800563a <quorem+0x106>
 8005624:	613c      	str	r4, [r7, #16]
 8005626:	4630      	mov	r0, r6
 8005628:	b003      	add	sp, #12
 800562a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800562e:	6812      	ldr	r2, [r2, #0]
 8005630:	3b04      	subs	r3, #4
 8005632:	2a00      	cmp	r2, #0
 8005634:	d1cc      	bne.n	80055d0 <quorem+0x9c>
 8005636:	3c01      	subs	r4, #1
 8005638:	e7c7      	b.n	80055ca <quorem+0x96>
 800563a:	6812      	ldr	r2, [r2, #0]
 800563c:	3b04      	subs	r3, #4
 800563e:	2a00      	cmp	r2, #0
 8005640:	d1f0      	bne.n	8005624 <quorem+0xf0>
 8005642:	3c01      	subs	r4, #1
 8005644:	e7eb      	b.n	800561e <quorem+0xea>
 8005646:	2000      	movs	r0, #0
 8005648:	e7ee      	b.n	8005628 <quorem+0xf4>
 800564a:	0000      	movs	r0, r0
 800564c:	0000      	movs	r0, r0
	...

08005650 <_dtoa_r>:
 8005650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005654:	ed2d 8b04 	vpush	{d8-d9}
 8005658:	ec57 6b10 	vmov	r6, r7, d0
 800565c:	b093      	sub	sp, #76	; 0x4c
 800565e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005660:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005664:	9106      	str	r1, [sp, #24]
 8005666:	ee10 aa10 	vmov	sl, s0
 800566a:	4604      	mov	r4, r0
 800566c:	9209      	str	r2, [sp, #36]	; 0x24
 800566e:	930c      	str	r3, [sp, #48]	; 0x30
 8005670:	46bb      	mov	fp, r7
 8005672:	b975      	cbnz	r5, 8005692 <_dtoa_r+0x42>
 8005674:	2010      	movs	r0, #16
 8005676:	f000 fddd 	bl	8006234 <malloc>
 800567a:	4602      	mov	r2, r0
 800567c:	6260      	str	r0, [r4, #36]	; 0x24
 800567e:	b920      	cbnz	r0, 800568a <_dtoa_r+0x3a>
 8005680:	4ba7      	ldr	r3, [pc, #668]	; (8005920 <_dtoa_r+0x2d0>)
 8005682:	21ea      	movs	r1, #234	; 0xea
 8005684:	48a7      	ldr	r0, [pc, #668]	; (8005924 <_dtoa_r+0x2d4>)
 8005686:	f001 fbd1 	bl	8006e2c <__assert_func>
 800568a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800568e:	6005      	str	r5, [r0, #0]
 8005690:	60c5      	str	r5, [r0, #12]
 8005692:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005694:	6819      	ldr	r1, [r3, #0]
 8005696:	b151      	cbz	r1, 80056ae <_dtoa_r+0x5e>
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	604a      	str	r2, [r1, #4]
 800569c:	2301      	movs	r3, #1
 800569e:	4093      	lsls	r3, r2
 80056a0:	608b      	str	r3, [r1, #8]
 80056a2:	4620      	mov	r0, r4
 80056a4:	f000 fe1c 	bl	80062e0 <_Bfree>
 80056a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056aa:	2200      	movs	r2, #0
 80056ac:	601a      	str	r2, [r3, #0]
 80056ae:	1e3b      	subs	r3, r7, #0
 80056b0:	bfaa      	itet	ge
 80056b2:	2300      	movge	r3, #0
 80056b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80056b8:	f8c8 3000 	strge.w	r3, [r8]
 80056bc:	4b9a      	ldr	r3, [pc, #616]	; (8005928 <_dtoa_r+0x2d8>)
 80056be:	bfbc      	itt	lt
 80056c0:	2201      	movlt	r2, #1
 80056c2:	f8c8 2000 	strlt.w	r2, [r8]
 80056c6:	ea33 030b 	bics.w	r3, r3, fp
 80056ca:	d11b      	bne.n	8005704 <_dtoa_r+0xb4>
 80056cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80056ce:	f242 730f 	movw	r3, #9999	; 0x270f
 80056d2:	6013      	str	r3, [r2, #0]
 80056d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80056d8:	4333      	orrs	r3, r6
 80056da:	f000 8592 	beq.w	8006202 <_dtoa_r+0xbb2>
 80056de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80056e0:	b963      	cbnz	r3, 80056fc <_dtoa_r+0xac>
 80056e2:	4b92      	ldr	r3, [pc, #584]	; (800592c <_dtoa_r+0x2dc>)
 80056e4:	e022      	b.n	800572c <_dtoa_r+0xdc>
 80056e6:	4b92      	ldr	r3, [pc, #584]	; (8005930 <_dtoa_r+0x2e0>)
 80056e8:	9301      	str	r3, [sp, #4]
 80056ea:	3308      	adds	r3, #8
 80056ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80056ee:	6013      	str	r3, [r2, #0]
 80056f0:	9801      	ldr	r0, [sp, #4]
 80056f2:	b013      	add	sp, #76	; 0x4c
 80056f4:	ecbd 8b04 	vpop	{d8-d9}
 80056f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056fc:	4b8b      	ldr	r3, [pc, #556]	; (800592c <_dtoa_r+0x2dc>)
 80056fe:	9301      	str	r3, [sp, #4]
 8005700:	3303      	adds	r3, #3
 8005702:	e7f3      	b.n	80056ec <_dtoa_r+0x9c>
 8005704:	2200      	movs	r2, #0
 8005706:	2300      	movs	r3, #0
 8005708:	4650      	mov	r0, sl
 800570a:	4659      	mov	r1, fp
 800570c:	f7fb f9fc 	bl	8000b08 <__aeabi_dcmpeq>
 8005710:	ec4b ab19 	vmov	d9, sl, fp
 8005714:	4680      	mov	r8, r0
 8005716:	b158      	cbz	r0, 8005730 <_dtoa_r+0xe0>
 8005718:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800571a:	2301      	movs	r3, #1
 800571c:	6013      	str	r3, [r2, #0]
 800571e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 856b 	beq.w	80061fc <_dtoa_r+0xbac>
 8005726:	4883      	ldr	r0, [pc, #524]	; (8005934 <_dtoa_r+0x2e4>)
 8005728:	6018      	str	r0, [r3, #0]
 800572a:	1e43      	subs	r3, r0, #1
 800572c:	9301      	str	r3, [sp, #4]
 800572e:	e7df      	b.n	80056f0 <_dtoa_r+0xa0>
 8005730:	ec4b ab10 	vmov	d0, sl, fp
 8005734:	aa10      	add	r2, sp, #64	; 0x40
 8005736:	a911      	add	r1, sp, #68	; 0x44
 8005738:	4620      	mov	r0, r4
 800573a:	f001 f8b9 	bl	80068b0 <__d2b>
 800573e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005742:	ee08 0a10 	vmov	s16, r0
 8005746:	2d00      	cmp	r5, #0
 8005748:	f000 8084 	beq.w	8005854 <_dtoa_r+0x204>
 800574c:	ee19 3a90 	vmov	r3, s19
 8005750:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005754:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005758:	4656      	mov	r6, sl
 800575a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800575e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005762:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005766:	4b74      	ldr	r3, [pc, #464]	; (8005938 <_dtoa_r+0x2e8>)
 8005768:	2200      	movs	r2, #0
 800576a:	4630      	mov	r0, r6
 800576c:	4639      	mov	r1, r7
 800576e:	f7fa fdab 	bl	80002c8 <__aeabi_dsub>
 8005772:	a365      	add	r3, pc, #404	; (adr r3, 8005908 <_dtoa_r+0x2b8>)
 8005774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005778:	f7fa ff5e 	bl	8000638 <__aeabi_dmul>
 800577c:	a364      	add	r3, pc, #400	; (adr r3, 8005910 <_dtoa_r+0x2c0>)
 800577e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005782:	f7fa fda3 	bl	80002cc <__adddf3>
 8005786:	4606      	mov	r6, r0
 8005788:	4628      	mov	r0, r5
 800578a:	460f      	mov	r7, r1
 800578c:	f7fa feea 	bl	8000564 <__aeabi_i2d>
 8005790:	a361      	add	r3, pc, #388	; (adr r3, 8005918 <_dtoa_r+0x2c8>)
 8005792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005796:	f7fa ff4f 	bl	8000638 <__aeabi_dmul>
 800579a:	4602      	mov	r2, r0
 800579c:	460b      	mov	r3, r1
 800579e:	4630      	mov	r0, r6
 80057a0:	4639      	mov	r1, r7
 80057a2:	f7fa fd93 	bl	80002cc <__adddf3>
 80057a6:	4606      	mov	r6, r0
 80057a8:	460f      	mov	r7, r1
 80057aa:	f7fb f9f5 	bl	8000b98 <__aeabi_d2iz>
 80057ae:	2200      	movs	r2, #0
 80057b0:	9000      	str	r0, [sp, #0]
 80057b2:	2300      	movs	r3, #0
 80057b4:	4630      	mov	r0, r6
 80057b6:	4639      	mov	r1, r7
 80057b8:	f7fb f9b0 	bl	8000b1c <__aeabi_dcmplt>
 80057bc:	b150      	cbz	r0, 80057d4 <_dtoa_r+0x184>
 80057be:	9800      	ldr	r0, [sp, #0]
 80057c0:	f7fa fed0 	bl	8000564 <__aeabi_i2d>
 80057c4:	4632      	mov	r2, r6
 80057c6:	463b      	mov	r3, r7
 80057c8:	f7fb f99e 	bl	8000b08 <__aeabi_dcmpeq>
 80057cc:	b910      	cbnz	r0, 80057d4 <_dtoa_r+0x184>
 80057ce:	9b00      	ldr	r3, [sp, #0]
 80057d0:	3b01      	subs	r3, #1
 80057d2:	9300      	str	r3, [sp, #0]
 80057d4:	9b00      	ldr	r3, [sp, #0]
 80057d6:	2b16      	cmp	r3, #22
 80057d8:	d85a      	bhi.n	8005890 <_dtoa_r+0x240>
 80057da:	9a00      	ldr	r2, [sp, #0]
 80057dc:	4b57      	ldr	r3, [pc, #348]	; (800593c <_dtoa_r+0x2ec>)
 80057de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80057e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e6:	ec51 0b19 	vmov	r0, r1, d9
 80057ea:	f7fb f997 	bl	8000b1c <__aeabi_dcmplt>
 80057ee:	2800      	cmp	r0, #0
 80057f0:	d050      	beq.n	8005894 <_dtoa_r+0x244>
 80057f2:	9b00      	ldr	r3, [sp, #0]
 80057f4:	3b01      	subs	r3, #1
 80057f6:	9300      	str	r3, [sp, #0]
 80057f8:	2300      	movs	r3, #0
 80057fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80057fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80057fe:	1b5d      	subs	r5, r3, r5
 8005800:	1e6b      	subs	r3, r5, #1
 8005802:	9305      	str	r3, [sp, #20]
 8005804:	bf45      	ittet	mi
 8005806:	f1c5 0301 	rsbmi	r3, r5, #1
 800580a:	9304      	strmi	r3, [sp, #16]
 800580c:	2300      	movpl	r3, #0
 800580e:	2300      	movmi	r3, #0
 8005810:	bf4c      	ite	mi
 8005812:	9305      	strmi	r3, [sp, #20]
 8005814:	9304      	strpl	r3, [sp, #16]
 8005816:	9b00      	ldr	r3, [sp, #0]
 8005818:	2b00      	cmp	r3, #0
 800581a:	db3d      	blt.n	8005898 <_dtoa_r+0x248>
 800581c:	9b05      	ldr	r3, [sp, #20]
 800581e:	9a00      	ldr	r2, [sp, #0]
 8005820:	920a      	str	r2, [sp, #40]	; 0x28
 8005822:	4413      	add	r3, r2
 8005824:	9305      	str	r3, [sp, #20]
 8005826:	2300      	movs	r3, #0
 8005828:	9307      	str	r3, [sp, #28]
 800582a:	9b06      	ldr	r3, [sp, #24]
 800582c:	2b09      	cmp	r3, #9
 800582e:	f200 8089 	bhi.w	8005944 <_dtoa_r+0x2f4>
 8005832:	2b05      	cmp	r3, #5
 8005834:	bfc4      	itt	gt
 8005836:	3b04      	subgt	r3, #4
 8005838:	9306      	strgt	r3, [sp, #24]
 800583a:	9b06      	ldr	r3, [sp, #24]
 800583c:	f1a3 0302 	sub.w	r3, r3, #2
 8005840:	bfcc      	ite	gt
 8005842:	2500      	movgt	r5, #0
 8005844:	2501      	movle	r5, #1
 8005846:	2b03      	cmp	r3, #3
 8005848:	f200 8087 	bhi.w	800595a <_dtoa_r+0x30a>
 800584c:	e8df f003 	tbb	[pc, r3]
 8005850:	59383a2d 	.word	0x59383a2d
 8005854:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005858:	441d      	add	r5, r3
 800585a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800585e:	2b20      	cmp	r3, #32
 8005860:	bfc1      	itttt	gt
 8005862:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005866:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800586a:	fa0b f303 	lslgt.w	r3, fp, r3
 800586e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005872:	bfda      	itte	le
 8005874:	f1c3 0320 	rsble	r3, r3, #32
 8005878:	fa06 f003 	lslle.w	r0, r6, r3
 800587c:	4318      	orrgt	r0, r3
 800587e:	f7fa fe61 	bl	8000544 <__aeabi_ui2d>
 8005882:	2301      	movs	r3, #1
 8005884:	4606      	mov	r6, r0
 8005886:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800588a:	3d01      	subs	r5, #1
 800588c:	930e      	str	r3, [sp, #56]	; 0x38
 800588e:	e76a      	b.n	8005766 <_dtoa_r+0x116>
 8005890:	2301      	movs	r3, #1
 8005892:	e7b2      	b.n	80057fa <_dtoa_r+0x1aa>
 8005894:	900b      	str	r0, [sp, #44]	; 0x2c
 8005896:	e7b1      	b.n	80057fc <_dtoa_r+0x1ac>
 8005898:	9b04      	ldr	r3, [sp, #16]
 800589a:	9a00      	ldr	r2, [sp, #0]
 800589c:	1a9b      	subs	r3, r3, r2
 800589e:	9304      	str	r3, [sp, #16]
 80058a0:	4253      	negs	r3, r2
 80058a2:	9307      	str	r3, [sp, #28]
 80058a4:	2300      	movs	r3, #0
 80058a6:	930a      	str	r3, [sp, #40]	; 0x28
 80058a8:	e7bf      	b.n	800582a <_dtoa_r+0x1da>
 80058aa:	2300      	movs	r3, #0
 80058ac:	9308      	str	r3, [sp, #32]
 80058ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	dc55      	bgt.n	8005960 <_dtoa_r+0x310>
 80058b4:	2301      	movs	r3, #1
 80058b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80058ba:	461a      	mov	r2, r3
 80058bc:	9209      	str	r2, [sp, #36]	; 0x24
 80058be:	e00c      	b.n	80058da <_dtoa_r+0x28a>
 80058c0:	2301      	movs	r3, #1
 80058c2:	e7f3      	b.n	80058ac <_dtoa_r+0x25c>
 80058c4:	2300      	movs	r3, #0
 80058c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80058c8:	9308      	str	r3, [sp, #32]
 80058ca:	9b00      	ldr	r3, [sp, #0]
 80058cc:	4413      	add	r3, r2
 80058ce:	9302      	str	r3, [sp, #8]
 80058d0:	3301      	adds	r3, #1
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	9303      	str	r3, [sp, #12]
 80058d6:	bfb8      	it	lt
 80058d8:	2301      	movlt	r3, #1
 80058da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80058dc:	2200      	movs	r2, #0
 80058de:	6042      	str	r2, [r0, #4]
 80058e0:	2204      	movs	r2, #4
 80058e2:	f102 0614 	add.w	r6, r2, #20
 80058e6:	429e      	cmp	r6, r3
 80058e8:	6841      	ldr	r1, [r0, #4]
 80058ea:	d93d      	bls.n	8005968 <_dtoa_r+0x318>
 80058ec:	4620      	mov	r0, r4
 80058ee:	f000 fcb7 	bl	8006260 <_Balloc>
 80058f2:	9001      	str	r0, [sp, #4]
 80058f4:	2800      	cmp	r0, #0
 80058f6:	d13b      	bne.n	8005970 <_dtoa_r+0x320>
 80058f8:	4b11      	ldr	r3, [pc, #68]	; (8005940 <_dtoa_r+0x2f0>)
 80058fa:	4602      	mov	r2, r0
 80058fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005900:	e6c0      	b.n	8005684 <_dtoa_r+0x34>
 8005902:	2301      	movs	r3, #1
 8005904:	e7df      	b.n	80058c6 <_dtoa_r+0x276>
 8005906:	bf00      	nop
 8005908:	636f4361 	.word	0x636f4361
 800590c:	3fd287a7 	.word	0x3fd287a7
 8005910:	8b60c8b3 	.word	0x8b60c8b3
 8005914:	3fc68a28 	.word	0x3fc68a28
 8005918:	509f79fb 	.word	0x509f79fb
 800591c:	3fd34413 	.word	0x3fd34413
 8005920:	08007a71 	.word	0x08007a71
 8005924:	08007a88 	.word	0x08007a88
 8005928:	7ff00000 	.word	0x7ff00000
 800592c:	08007a6d 	.word	0x08007a6d
 8005930:	08007a64 	.word	0x08007a64
 8005934:	08007a41 	.word	0x08007a41
 8005938:	3ff80000 	.word	0x3ff80000
 800593c:	08007b78 	.word	0x08007b78
 8005940:	08007ae3 	.word	0x08007ae3
 8005944:	2501      	movs	r5, #1
 8005946:	2300      	movs	r3, #0
 8005948:	9306      	str	r3, [sp, #24]
 800594a:	9508      	str	r5, [sp, #32]
 800594c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005950:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005954:	2200      	movs	r2, #0
 8005956:	2312      	movs	r3, #18
 8005958:	e7b0      	b.n	80058bc <_dtoa_r+0x26c>
 800595a:	2301      	movs	r3, #1
 800595c:	9308      	str	r3, [sp, #32]
 800595e:	e7f5      	b.n	800594c <_dtoa_r+0x2fc>
 8005960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005962:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005966:	e7b8      	b.n	80058da <_dtoa_r+0x28a>
 8005968:	3101      	adds	r1, #1
 800596a:	6041      	str	r1, [r0, #4]
 800596c:	0052      	lsls	r2, r2, #1
 800596e:	e7b8      	b.n	80058e2 <_dtoa_r+0x292>
 8005970:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005972:	9a01      	ldr	r2, [sp, #4]
 8005974:	601a      	str	r2, [r3, #0]
 8005976:	9b03      	ldr	r3, [sp, #12]
 8005978:	2b0e      	cmp	r3, #14
 800597a:	f200 809d 	bhi.w	8005ab8 <_dtoa_r+0x468>
 800597e:	2d00      	cmp	r5, #0
 8005980:	f000 809a 	beq.w	8005ab8 <_dtoa_r+0x468>
 8005984:	9b00      	ldr	r3, [sp, #0]
 8005986:	2b00      	cmp	r3, #0
 8005988:	dd32      	ble.n	80059f0 <_dtoa_r+0x3a0>
 800598a:	4ab7      	ldr	r2, [pc, #732]	; (8005c68 <_dtoa_r+0x618>)
 800598c:	f003 030f 	and.w	r3, r3, #15
 8005990:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8005994:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005998:	9b00      	ldr	r3, [sp, #0]
 800599a:	05d8      	lsls	r0, r3, #23
 800599c:	ea4f 1723 	mov.w	r7, r3, asr #4
 80059a0:	d516      	bpl.n	80059d0 <_dtoa_r+0x380>
 80059a2:	4bb2      	ldr	r3, [pc, #712]	; (8005c6c <_dtoa_r+0x61c>)
 80059a4:	ec51 0b19 	vmov	r0, r1, d9
 80059a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059ac:	f7fa ff6e 	bl	800088c <__aeabi_ddiv>
 80059b0:	f007 070f 	and.w	r7, r7, #15
 80059b4:	4682      	mov	sl, r0
 80059b6:	468b      	mov	fp, r1
 80059b8:	2503      	movs	r5, #3
 80059ba:	4eac      	ldr	r6, [pc, #688]	; (8005c6c <_dtoa_r+0x61c>)
 80059bc:	b957      	cbnz	r7, 80059d4 <_dtoa_r+0x384>
 80059be:	4642      	mov	r2, r8
 80059c0:	464b      	mov	r3, r9
 80059c2:	4650      	mov	r0, sl
 80059c4:	4659      	mov	r1, fp
 80059c6:	f7fa ff61 	bl	800088c <__aeabi_ddiv>
 80059ca:	4682      	mov	sl, r0
 80059cc:	468b      	mov	fp, r1
 80059ce:	e028      	b.n	8005a22 <_dtoa_r+0x3d2>
 80059d0:	2502      	movs	r5, #2
 80059d2:	e7f2      	b.n	80059ba <_dtoa_r+0x36a>
 80059d4:	07f9      	lsls	r1, r7, #31
 80059d6:	d508      	bpl.n	80059ea <_dtoa_r+0x39a>
 80059d8:	4640      	mov	r0, r8
 80059da:	4649      	mov	r1, r9
 80059dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80059e0:	f7fa fe2a 	bl	8000638 <__aeabi_dmul>
 80059e4:	3501      	adds	r5, #1
 80059e6:	4680      	mov	r8, r0
 80059e8:	4689      	mov	r9, r1
 80059ea:	107f      	asrs	r7, r7, #1
 80059ec:	3608      	adds	r6, #8
 80059ee:	e7e5      	b.n	80059bc <_dtoa_r+0x36c>
 80059f0:	f000 809b 	beq.w	8005b2a <_dtoa_r+0x4da>
 80059f4:	9b00      	ldr	r3, [sp, #0]
 80059f6:	4f9d      	ldr	r7, [pc, #628]	; (8005c6c <_dtoa_r+0x61c>)
 80059f8:	425e      	negs	r6, r3
 80059fa:	4b9b      	ldr	r3, [pc, #620]	; (8005c68 <_dtoa_r+0x618>)
 80059fc:	f006 020f 	and.w	r2, r6, #15
 8005a00:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a08:	ec51 0b19 	vmov	r0, r1, d9
 8005a0c:	f7fa fe14 	bl	8000638 <__aeabi_dmul>
 8005a10:	1136      	asrs	r6, r6, #4
 8005a12:	4682      	mov	sl, r0
 8005a14:	468b      	mov	fp, r1
 8005a16:	2300      	movs	r3, #0
 8005a18:	2502      	movs	r5, #2
 8005a1a:	2e00      	cmp	r6, #0
 8005a1c:	d17a      	bne.n	8005b14 <_dtoa_r+0x4c4>
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1d3      	bne.n	80059ca <_dtoa_r+0x37a>
 8005a22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 8082 	beq.w	8005b2e <_dtoa_r+0x4de>
 8005a2a:	4b91      	ldr	r3, [pc, #580]	; (8005c70 <_dtoa_r+0x620>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	4650      	mov	r0, sl
 8005a30:	4659      	mov	r1, fp
 8005a32:	f7fb f873 	bl	8000b1c <__aeabi_dcmplt>
 8005a36:	2800      	cmp	r0, #0
 8005a38:	d079      	beq.n	8005b2e <_dtoa_r+0x4de>
 8005a3a:	9b03      	ldr	r3, [sp, #12]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d076      	beq.n	8005b2e <_dtoa_r+0x4de>
 8005a40:	9b02      	ldr	r3, [sp, #8]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	dd36      	ble.n	8005ab4 <_dtoa_r+0x464>
 8005a46:	9b00      	ldr	r3, [sp, #0]
 8005a48:	4650      	mov	r0, sl
 8005a4a:	4659      	mov	r1, fp
 8005a4c:	1e5f      	subs	r7, r3, #1
 8005a4e:	2200      	movs	r2, #0
 8005a50:	4b88      	ldr	r3, [pc, #544]	; (8005c74 <_dtoa_r+0x624>)
 8005a52:	f7fa fdf1 	bl	8000638 <__aeabi_dmul>
 8005a56:	9e02      	ldr	r6, [sp, #8]
 8005a58:	4682      	mov	sl, r0
 8005a5a:	468b      	mov	fp, r1
 8005a5c:	3501      	adds	r5, #1
 8005a5e:	4628      	mov	r0, r5
 8005a60:	f7fa fd80 	bl	8000564 <__aeabi_i2d>
 8005a64:	4652      	mov	r2, sl
 8005a66:	465b      	mov	r3, fp
 8005a68:	f7fa fde6 	bl	8000638 <__aeabi_dmul>
 8005a6c:	4b82      	ldr	r3, [pc, #520]	; (8005c78 <_dtoa_r+0x628>)
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f7fa fc2c 	bl	80002cc <__adddf3>
 8005a74:	46d0      	mov	r8, sl
 8005a76:	46d9      	mov	r9, fp
 8005a78:	4682      	mov	sl, r0
 8005a7a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8005a7e:	2e00      	cmp	r6, #0
 8005a80:	d158      	bne.n	8005b34 <_dtoa_r+0x4e4>
 8005a82:	4b7e      	ldr	r3, [pc, #504]	; (8005c7c <_dtoa_r+0x62c>)
 8005a84:	2200      	movs	r2, #0
 8005a86:	4640      	mov	r0, r8
 8005a88:	4649      	mov	r1, r9
 8005a8a:	f7fa fc1d 	bl	80002c8 <__aeabi_dsub>
 8005a8e:	4652      	mov	r2, sl
 8005a90:	465b      	mov	r3, fp
 8005a92:	4680      	mov	r8, r0
 8005a94:	4689      	mov	r9, r1
 8005a96:	f7fb f85f 	bl	8000b58 <__aeabi_dcmpgt>
 8005a9a:	2800      	cmp	r0, #0
 8005a9c:	f040 8295 	bne.w	8005fca <_dtoa_r+0x97a>
 8005aa0:	4652      	mov	r2, sl
 8005aa2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005aa6:	4640      	mov	r0, r8
 8005aa8:	4649      	mov	r1, r9
 8005aaa:	f7fb f837 	bl	8000b1c <__aeabi_dcmplt>
 8005aae:	2800      	cmp	r0, #0
 8005ab0:	f040 8289 	bne.w	8005fc6 <_dtoa_r+0x976>
 8005ab4:	ec5b ab19 	vmov	sl, fp, d9
 8005ab8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	f2c0 8148 	blt.w	8005d50 <_dtoa_r+0x700>
 8005ac0:	9a00      	ldr	r2, [sp, #0]
 8005ac2:	2a0e      	cmp	r2, #14
 8005ac4:	f300 8144 	bgt.w	8005d50 <_dtoa_r+0x700>
 8005ac8:	4b67      	ldr	r3, [pc, #412]	; (8005c68 <_dtoa_r+0x618>)
 8005aca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005ace:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005ad2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f280 80d5 	bge.w	8005c84 <_dtoa_r+0x634>
 8005ada:	9b03      	ldr	r3, [sp, #12]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	f300 80d1 	bgt.w	8005c84 <_dtoa_r+0x634>
 8005ae2:	f040 826f 	bne.w	8005fc4 <_dtoa_r+0x974>
 8005ae6:	4b65      	ldr	r3, [pc, #404]	; (8005c7c <_dtoa_r+0x62c>)
 8005ae8:	2200      	movs	r2, #0
 8005aea:	4640      	mov	r0, r8
 8005aec:	4649      	mov	r1, r9
 8005aee:	f7fa fda3 	bl	8000638 <__aeabi_dmul>
 8005af2:	4652      	mov	r2, sl
 8005af4:	465b      	mov	r3, fp
 8005af6:	f7fb f825 	bl	8000b44 <__aeabi_dcmpge>
 8005afa:	9e03      	ldr	r6, [sp, #12]
 8005afc:	4637      	mov	r7, r6
 8005afe:	2800      	cmp	r0, #0
 8005b00:	f040 8245 	bne.w	8005f8e <_dtoa_r+0x93e>
 8005b04:	9d01      	ldr	r5, [sp, #4]
 8005b06:	2331      	movs	r3, #49	; 0x31
 8005b08:	f805 3b01 	strb.w	r3, [r5], #1
 8005b0c:	9b00      	ldr	r3, [sp, #0]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	9300      	str	r3, [sp, #0]
 8005b12:	e240      	b.n	8005f96 <_dtoa_r+0x946>
 8005b14:	07f2      	lsls	r2, r6, #31
 8005b16:	d505      	bpl.n	8005b24 <_dtoa_r+0x4d4>
 8005b18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b1c:	f7fa fd8c 	bl	8000638 <__aeabi_dmul>
 8005b20:	3501      	adds	r5, #1
 8005b22:	2301      	movs	r3, #1
 8005b24:	1076      	asrs	r6, r6, #1
 8005b26:	3708      	adds	r7, #8
 8005b28:	e777      	b.n	8005a1a <_dtoa_r+0x3ca>
 8005b2a:	2502      	movs	r5, #2
 8005b2c:	e779      	b.n	8005a22 <_dtoa_r+0x3d2>
 8005b2e:	9f00      	ldr	r7, [sp, #0]
 8005b30:	9e03      	ldr	r6, [sp, #12]
 8005b32:	e794      	b.n	8005a5e <_dtoa_r+0x40e>
 8005b34:	9901      	ldr	r1, [sp, #4]
 8005b36:	4b4c      	ldr	r3, [pc, #304]	; (8005c68 <_dtoa_r+0x618>)
 8005b38:	4431      	add	r1, r6
 8005b3a:	910d      	str	r1, [sp, #52]	; 0x34
 8005b3c:	9908      	ldr	r1, [sp, #32]
 8005b3e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005b42:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005b46:	2900      	cmp	r1, #0
 8005b48:	d043      	beq.n	8005bd2 <_dtoa_r+0x582>
 8005b4a:	494d      	ldr	r1, [pc, #308]	; (8005c80 <_dtoa_r+0x630>)
 8005b4c:	2000      	movs	r0, #0
 8005b4e:	f7fa fe9d 	bl	800088c <__aeabi_ddiv>
 8005b52:	4652      	mov	r2, sl
 8005b54:	465b      	mov	r3, fp
 8005b56:	f7fa fbb7 	bl	80002c8 <__aeabi_dsub>
 8005b5a:	9d01      	ldr	r5, [sp, #4]
 8005b5c:	4682      	mov	sl, r0
 8005b5e:	468b      	mov	fp, r1
 8005b60:	4649      	mov	r1, r9
 8005b62:	4640      	mov	r0, r8
 8005b64:	f7fb f818 	bl	8000b98 <__aeabi_d2iz>
 8005b68:	4606      	mov	r6, r0
 8005b6a:	f7fa fcfb 	bl	8000564 <__aeabi_i2d>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	460b      	mov	r3, r1
 8005b72:	4640      	mov	r0, r8
 8005b74:	4649      	mov	r1, r9
 8005b76:	f7fa fba7 	bl	80002c8 <__aeabi_dsub>
 8005b7a:	3630      	adds	r6, #48	; 0x30
 8005b7c:	f805 6b01 	strb.w	r6, [r5], #1
 8005b80:	4652      	mov	r2, sl
 8005b82:	465b      	mov	r3, fp
 8005b84:	4680      	mov	r8, r0
 8005b86:	4689      	mov	r9, r1
 8005b88:	f7fa ffc8 	bl	8000b1c <__aeabi_dcmplt>
 8005b8c:	2800      	cmp	r0, #0
 8005b8e:	d163      	bne.n	8005c58 <_dtoa_r+0x608>
 8005b90:	4642      	mov	r2, r8
 8005b92:	464b      	mov	r3, r9
 8005b94:	4936      	ldr	r1, [pc, #216]	; (8005c70 <_dtoa_r+0x620>)
 8005b96:	2000      	movs	r0, #0
 8005b98:	f7fa fb96 	bl	80002c8 <__aeabi_dsub>
 8005b9c:	4652      	mov	r2, sl
 8005b9e:	465b      	mov	r3, fp
 8005ba0:	f7fa ffbc 	bl	8000b1c <__aeabi_dcmplt>
 8005ba4:	2800      	cmp	r0, #0
 8005ba6:	f040 80b5 	bne.w	8005d14 <_dtoa_r+0x6c4>
 8005baa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bac:	429d      	cmp	r5, r3
 8005bae:	d081      	beq.n	8005ab4 <_dtoa_r+0x464>
 8005bb0:	4b30      	ldr	r3, [pc, #192]	; (8005c74 <_dtoa_r+0x624>)
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	4650      	mov	r0, sl
 8005bb6:	4659      	mov	r1, fp
 8005bb8:	f7fa fd3e 	bl	8000638 <__aeabi_dmul>
 8005bbc:	4b2d      	ldr	r3, [pc, #180]	; (8005c74 <_dtoa_r+0x624>)
 8005bbe:	4682      	mov	sl, r0
 8005bc0:	468b      	mov	fp, r1
 8005bc2:	4640      	mov	r0, r8
 8005bc4:	4649      	mov	r1, r9
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	f7fa fd36 	bl	8000638 <__aeabi_dmul>
 8005bcc:	4680      	mov	r8, r0
 8005bce:	4689      	mov	r9, r1
 8005bd0:	e7c6      	b.n	8005b60 <_dtoa_r+0x510>
 8005bd2:	4650      	mov	r0, sl
 8005bd4:	4659      	mov	r1, fp
 8005bd6:	f7fa fd2f 	bl	8000638 <__aeabi_dmul>
 8005bda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005bdc:	9d01      	ldr	r5, [sp, #4]
 8005bde:	930f      	str	r3, [sp, #60]	; 0x3c
 8005be0:	4682      	mov	sl, r0
 8005be2:	468b      	mov	fp, r1
 8005be4:	4649      	mov	r1, r9
 8005be6:	4640      	mov	r0, r8
 8005be8:	f7fa ffd6 	bl	8000b98 <__aeabi_d2iz>
 8005bec:	4606      	mov	r6, r0
 8005bee:	f7fa fcb9 	bl	8000564 <__aeabi_i2d>
 8005bf2:	3630      	adds	r6, #48	; 0x30
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	460b      	mov	r3, r1
 8005bf8:	4640      	mov	r0, r8
 8005bfa:	4649      	mov	r1, r9
 8005bfc:	f7fa fb64 	bl	80002c8 <__aeabi_dsub>
 8005c00:	f805 6b01 	strb.w	r6, [r5], #1
 8005c04:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c06:	429d      	cmp	r5, r3
 8005c08:	4680      	mov	r8, r0
 8005c0a:	4689      	mov	r9, r1
 8005c0c:	f04f 0200 	mov.w	r2, #0
 8005c10:	d124      	bne.n	8005c5c <_dtoa_r+0x60c>
 8005c12:	4b1b      	ldr	r3, [pc, #108]	; (8005c80 <_dtoa_r+0x630>)
 8005c14:	4650      	mov	r0, sl
 8005c16:	4659      	mov	r1, fp
 8005c18:	f7fa fb58 	bl	80002cc <__adddf3>
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	460b      	mov	r3, r1
 8005c20:	4640      	mov	r0, r8
 8005c22:	4649      	mov	r1, r9
 8005c24:	f7fa ff98 	bl	8000b58 <__aeabi_dcmpgt>
 8005c28:	2800      	cmp	r0, #0
 8005c2a:	d173      	bne.n	8005d14 <_dtoa_r+0x6c4>
 8005c2c:	4652      	mov	r2, sl
 8005c2e:	465b      	mov	r3, fp
 8005c30:	4913      	ldr	r1, [pc, #76]	; (8005c80 <_dtoa_r+0x630>)
 8005c32:	2000      	movs	r0, #0
 8005c34:	f7fa fb48 	bl	80002c8 <__aeabi_dsub>
 8005c38:	4602      	mov	r2, r0
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	4640      	mov	r0, r8
 8005c3e:	4649      	mov	r1, r9
 8005c40:	f7fa ff6c 	bl	8000b1c <__aeabi_dcmplt>
 8005c44:	2800      	cmp	r0, #0
 8005c46:	f43f af35 	beq.w	8005ab4 <_dtoa_r+0x464>
 8005c4a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005c4c:	1e6b      	subs	r3, r5, #1
 8005c4e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c50:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005c54:	2b30      	cmp	r3, #48	; 0x30
 8005c56:	d0f8      	beq.n	8005c4a <_dtoa_r+0x5fa>
 8005c58:	9700      	str	r7, [sp, #0]
 8005c5a:	e049      	b.n	8005cf0 <_dtoa_r+0x6a0>
 8005c5c:	4b05      	ldr	r3, [pc, #20]	; (8005c74 <_dtoa_r+0x624>)
 8005c5e:	f7fa fceb 	bl	8000638 <__aeabi_dmul>
 8005c62:	4680      	mov	r8, r0
 8005c64:	4689      	mov	r9, r1
 8005c66:	e7bd      	b.n	8005be4 <_dtoa_r+0x594>
 8005c68:	08007b78 	.word	0x08007b78
 8005c6c:	08007b50 	.word	0x08007b50
 8005c70:	3ff00000 	.word	0x3ff00000
 8005c74:	40240000 	.word	0x40240000
 8005c78:	401c0000 	.word	0x401c0000
 8005c7c:	40140000 	.word	0x40140000
 8005c80:	3fe00000 	.word	0x3fe00000
 8005c84:	9d01      	ldr	r5, [sp, #4]
 8005c86:	4656      	mov	r6, sl
 8005c88:	465f      	mov	r7, fp
 8005c8a:	4642      	mov	r2, r8
 8005c8c:	464b      	mov	r3, r9
 8005c8e:	4630      	mov	r0, r6
 8005c90:	4639      	mov	r1, r7
 8005c92:	f7fa fdfb 	bl	800088c <__aeabi_ddiv>
 8005c96:	f7fa ff7f 	bl	8000b98 <__aeabi_d2iz>
 8005c9a:	4682      	mov	sl, r0
 8005c9c:	f7fa fc62 	bl	8000564 <__aeabi_i2d>
 8005ca0:	4642      	mov	r2, r8
 8005ca2:	464b      	mov	r3, r9
 8005ca4:	f7fa fcc8 	bl	8000638 <__aeabi_dmul>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	460b      	mov	r3, r1
 8005cac:	4630      	mov	r0, r6
 8005cae:	4639      	mov	r1, r7
 8005cb0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005cb4:	f7fa fb08 	bl	80002c8 <__aeabi_dsub>
 8005cb8:	f805 6b01 	strb.w	r6, [r5], #1
 8005cbc:	9e01      	ldr	r6, [sp, #4]
 8005cbe:	9f03      	ldr	r7, [sp, #12]
 8005cc0:	1bae      	subs	r6, r5, r6
 8005cc2:	42b7      	cmp	r7, r6
 8005cc4:	4602      	mov	r2, r0
 8005cc6:	460b      	mov	r3, r1
 8005cc8:	d135      	bne.n	8005d36 <_dtoa_r+0x6e6>
 8005cca:	f7fa faff 	bl	80002cc <__adddf3>
 8005cce:	4642      	mov	r2, r8
 8005cd0:	464b      	mov	r3, r9
 8005cd2:	4606      	mov	r6, r0
 8005cd4:	460f      	mov	r7, r1
 8005cd6:	f7fa ff3f 	bl	8000b58 <__aeabi_dcmpgt>
 8005cda:	b9d0      	cbnz	r0, 8005d12 <_dtoa_r+0x6c2>
 8005cdc:	4642      	mov	r2, r8
 8005cde:	464b      	mov	r3, r9
 8005ce0:	4630      	mov	r0, r6
 8005ce2:	4639      	mov	r1, r7
 8005ce4:	f7fa ff10 	bl	8000b08 <__aeabi_dcmpeq>
 8005ce8:	b110      	cbz	r0, 8005cf0 <_dtoa_r+0x6a0>
 8005cea:	f01a 0f01 	tst.w	sl, #1
 8005cee:	d110      	bne.n	8005d12 <_dtoa_r+0x6c2>
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	ee18 1a10 	vmov	r1, s16
 8005cf6:	f000 faf3 	bl	80062e0 <_Bfree>
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	9800      	ldr	r0, [sp, #0]
 8005cfe:	702b      	strb	r3, [r5, #0]
 8005d00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005d02:	3001      	adds	r0, #1
 8005d04:	6018      	str	r0, [r3, #0]
 8005d06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	f43f acf1 	beq.w	80056f0 <_dtoa_r+0xa0>
 8005d0e:	601d      	str	r5, [r3, #0]
 8005d10:	e4ee      	b.n	80056f0 <_dtoa_r+0xa0>
 8005d12:	9f00      	ldr	r7, [sp, #0]
 8005d14:	462b      	mov	r3, r5
 8005d16:	461d      	mov	r5, r3
 8005d18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d1c:	2a39      	cmp	r2, #57	; 0x39
 8005d1e:	d106      	bne.n	8005d2e <_dtoa_r+0x6de>
 8005d20:	9a01      	ldr	r2, [sp, #4]
 8005d22:	429a      	cmp	r2, r3
 8005d24:	d1f7      	bne.n	8005d16 <_dtoa_r+0x6c6>
 8005d26:	9901      	ldr	r1, [sp, #4]
 8005d28:	2230      	movs	r2, #48	; 0x30
 8005d2a:	3701      	adds	r7, #1
 8005d2c:	700a      	strb	r2, [r1, #0]
 8005d2e:	781a      	ldrb	r2, [r3, #0]
 8005d30:	3201      	adds	r2, #1
 8005d32:	701a      	strb	r2, [r3, #0]
 8005d34:	e790      	b.n	8005c58 <_dtoa_r+0x608>
 8005d36:	4ba6      	ldr	r3, [pc, #664]	; (8005fd0 <_dtoa_r+0x980>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f7fa fc7d 	bl	8000638 <__aeabi_dmul>
 8005d3e:	2200      	movs	r2, #0
 8005d40:	2300      	movs	r3, #0
 8005d42:	4606      	mov	r6, r0
 8005d44:	460f      	mov	r7, r1
 8005d46:	f7fa fedf 	bl	8000b08 <__aeabi_dcmpeq>
 8005d4a:	2800      	cmp	r0, #0
 8005d4c:	d09d      	beq.n	8005c8a <_dtoa_r+0x63a>
 8005d4e:	e7cf      	b.n	8005cf0 <_dtoa_r+0x6a0>
 8005d50:	9a08      	ldr	r2, [sp, #32]
 8005d52:	2a00      	cmp	r2, #0
 8005d54:	f000 80d7 	beq.w	8005f06 <_dtoa_r+0x8b6>
 8005d58:	9a06      	ldr	r2, [sp, #24]
 8005d5a:	2a01      	cmp	r2, #1
 8005d5c:	f300 80ba 	bgt.w	8005ed4 <_dtoa_r+0x884>
 8005d60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d62:	2a00      	cmp	r2, #0
 8005d64:	f000 80b2 	beq.w	8005ecc <_dtoa_r+0x87c>
 8005d68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005d6c:	9e07      	ldr	r6, [sp, #28]
 8005d6e:	9d04      	ldr	r5, [sp, #16]
 8005d70:	9a04      	ldr	r2, [sp, #16]
 8005d72:	441a      	add	r2, r3
 8005d74:	9204      	str	r2, [sp, #16]
 8005d76:	9a05      	ldr	r2, [sp, #20]
 8005d78:	2101      	movs	r1, #1
 8005d7a:	441a      	add	r2, r3
 8005d7c:	4620      	mov	r0, r4
 8005d7e:	9205      	str	r2, [sp, #20]
 8005d80:	f000 fb66 	bl	8006450 <__i2b>
 8005d84:	4607      	mov	r7, r0
 8005d86:	2d00      	cmp	r5, #0
 8005d88:	dd0c      	ble.n	8005da4 <_dtoa_r+0x754>
 8005d8a:	9b05      	ldr	r3, [sp, #20]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	dd09      	ble.n	8005da4 <_dtoa_r+0x754>
 8005d90:	42ab      	cmp	r3, r5
 8005d92:	9a04      	ldr	r2, [sp, #16]
 8005d94:	bfa8      	it	ge
 8005d96:	462b      	movge	r3, r5
 8005d98:	1ad2      	subs	r2, r2, r3
 8005d9a:	9204      	str	r2, [sp, #16]
 8005d9c:	9a05      	ldr	r2, [sp, #20]
 8005d9e:	1aed      	subs	r5, r5, r3
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	9305      	str	r3, [sp, #20]
 8005da4:	9b07      	ldr	r3, [sp, #28]
 8005da6:	b31b      	cbz	r3, 8005df0 <_dtoa_r+0x7a0>
 8005da8:	9b08      	ldr	r3, [sp, #32]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	f000 80af 	beq.w	8005f0e <_dtoa_r+0x8be>
 8005db0:	2e00      	cmp	r6, #0
 8005db2:	dd13      	ble.n	8005ddc <_dtoa_r+0x78c>
 8005db4:	4639      	mov	r1, r7
 8005db6:	4632      	mov	r2, r6
 8005db8:	4620      	mov	r0, r4
 8005dba:	f000 fc09 	bl	80065d0 <__pow5mult>
 8005dbe:	ee18 2a10 	vmov	r2, s16
 8005dc2:	4601      	mov	r1, r0
 8005dc4:	4607      	mov	r7, r0
 8005dc6:	4620      	mov	r0, r4
 8005dc8:	f000 fb58 	bl	800647c <__multiply>
 8005dcc:	ee18 1a10 	vmov	r1, s16
 8005dd0:	4680      	mov	r8, r0
 8005dd2:	4620      	mov	r0, r4
 8005dd4:	f000 fa84 	bl	80062e0 <_Bfree>
 8005dd8:	ee08 8a10 	vmov	s16, r8
 8005ddc:	9b07      	ldr	r3, [sp, #28]
 8005dde:	1b9a      	subs	r2, r3, r6
 8005de0:	d006      	beq.n	8005df0 <_dtoa_r+0x7a0>
 8005de2:	ee18 1a10 	vmov	r1, s16
 8005de6:	4620      	mov	r0, r4
 8005de8:	f000 fbf2 	bl	80065d0 <__pow5mult>
 8005dec:	ee08 0a10 	vmov	s16, r0
 8005df0:	2101      	movs	r1, #1
 8005df2:	4620      	mov	r0, r4
 8005df4:	f000 fb2c 	bl	8006450 <__i2b>
 8005df8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	4606      	mov	r6, r0
 8005dfe:	f340 8088 	ble.w	8005f12 <_dtoa_r+0x8c2>
 8005e02:	461a      	mov	r2, r3
 8005e04:	4601      	mov	r1, r0
 8005e06:	4620      	mov	r0, r4
 8005e08:	f000 fbe2 	bl	80065d0 <__pow5mult>
 8005e0c:	9b06      	ldr	r3, [sp, #24]
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	4606      	mov	r6, r0
 8005e12:	f340 8081 	ble.w	8005f18 <_dtoa_r+0x8c8>
 8005e16:	f04f 0800 	mov.w	r8, #0
 8005e1a:	6933      	ldr	r3, [r6, #16]
 8005e1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005e20:	6918      	ldr	r0, [r3, #16]
 8005e22:	f000 fac5 	bl	80063b0 <__hi0bits>
 8005e26:	f1c0 0020 	rsb	r0, r0, #32
 8005e2a:	9b05      	ldr	r3, [sp, #20]
 8005e2c:	4418      	add	r0, r3
 8005e2e:	f010 001f 	ands.w	r0, r0, #31
 8005e32:	f000 8092 	beq.w	8005f5a <_dtoa_r+0x90a>
 8005e36:	f1c0 0320 	rsb	r3, r0, #32
 8005e3a:	2b04      	cmp	r3, #4
 8005e3c:	f340 808a 	ble.w	8005f54 <_dtoa_r+0x904>
 8005e40:	f1c0 001c 	rsb	r0, r0, #28
 8005e44:	9b04      	ldr	r3, [sp, #16]
 8005e46:	4403      	add	r3, r0
 8005e48:	9304      	str	r3, [sp, #16]
 8005e4a:	9b05      	ldr	r3, [sp, #20]
 8005e4c:	4403      	add	r3, r0
 8005e4e:	4405      	add	r5, r0
 8005e50:	9305      	str	r3, [sp, #20]
 8005e52:	9b04      	ldr	r3, [sp, #16]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	dd07      	ble.n	8005e68 <_dtoa_r+0x818>
 8005e58:	ee18 1a10 	vmov	r1, s16
 8005e5c:	461a      	mov	r2, r3
 8005e5e:	4620      	mov	r0, r4
 8005e60:	f000 fc10 	bl	8006684 <__lshift>
 8005e64:	ee08 0a10 	vmov	s16, r0
 8005e68:	9b05      	ldr	r3, [sp, #20]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	dd05      	ble.n	8005e7a <_dtoa_r+0x82a>
 8005e6e:	4631      	mov	r1, r6
 8005e70:	461a      	mov	r2, r3
 8005e72:	4620      	mov	r0, r4
 8005e74:	f000 fc06 	bl	8006684 <__lshift>
 8005e78:	4606      	mov	r6, r0
 8005e7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d06e      	beq.n	8005f5e <_dtoa_r+0x90e>
 8005e80:	ee18 0a10 	vmov	r0, s16
 8005e84:	4631      	mov	r1, r6
 8005e86:	f000 fc6d 	bl	8006764 <__mcmp>
 8005e8a:	2800      	cmp	r0, #0
 8005e8c:	da67      	bge.n	8005f5e <_dtoa_r+0x90e>
 8005e8e:	9b00      	ldr	r3, [sp, #0]
 8005e90:	3b01      	subs	r3, #1
 8005e92:	ee18 1a10 	vmov	r1, s16
 8005e96:	9300      	str	r3, [sp, #0]
 8005e98:	220a      	movs	r2, #10
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	f000 fa41 	bl	8006324 <__multadd>
 8005ea2:	9b08      	ldr	r3, [sp, #32]
 8005ea4:	ee08 0a10 	vmov	s16, r0
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 81b1 	beq.w	8006210 <_dtoa_r+0xbc0>
 8005eae:	2300      	movs	r3, #0
 8005eb0:	4639      	mov	r1, r7
 8005eb2:	220a      	movs	r2, #10
 8005eb4:	4620      	mov	r0, r4
 8005eb6:	f000 fa35 	bl	8006324 <__multadd>
 8005eba:	9b02      	ldr	r3, [sp, #8]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	4607      	mov	r7, r0
 8005ec0:	f300 808e 	bgt.w	8005fe0 <_dtoa_r+0x990>
 8005ec4:	9b06      	ldr	r3, [sp, #24]
 8005ec6:	2b02      	cmp	r3, #2
 8005ec8:	dc51      	bgt.n	8005f6e <_dtoa_r+0x91e>
 8005eca:	e089      	b.n	8005fe0 <_dtoa_r+0x990>
 8005ecc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ece:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005ed2:	e74b      	b.n	8005d6c <_dtoa_r+0x71c>
 8005ed4:	9b03      	ldr	r3, [sp, #12]
 8005ed6:	1e5e      	subs	r6, r3, #1
 8005ed8:	9b07      	ldr	r3, [sp, #28]
 8005eda:	42b3      	cmp	r3, r6
 8005edc:	bfbf      	itttt	lt
 8005ede:	9b07      	ldrlt	r3, [sp, #28]
 8005ee0:	9607      	strlt	r6, [sp, #28]
 8005ee2:	1af2      	sublt	r2, r6, r3
 8005ee4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005ee6:	bfb6      	itet	lt
 8005ee8:	189b      	addlt	r3, r3, r2
 8005eea:	1b9e      	subge	r6, r3, r6
 8005eec:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005eee:	9b03      	ldr	r3, [sp, #12]
 8005ef0:	bfb8      	it	lt
 8005ef2:	2600      	movlt	r6, #0
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	bfb7      	itett	lt
 8005ef8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005efc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005f00:	1a9d      	sublt	r5, r3, r2
 8005f02:	2300      	movlt	r3, #0
 8005f04:	e734      	b.n	8005d70 <_dtoa_r+0x720>
 8005f06:	9e07      	ldr	r6, [sp, #28]
 8005f08:	9d04      	ldr	r5, [sp, #16]
 8005f0a:	9f08      	ldr	r7, [sp, #32]
 8005f0c:	e73b      	b.n	8005d86 <_dtoa_r+0x736>
 8005f0e:	9a07      	ldr	r2, [sp, #28]
 8005f10:	e767      	b.n	8005de2 <_dtoa_r+0x792>
 8005f12:	9b06      	ldr	r3, [sp, #24]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	dc18      	bgt.n	8005f4a <_dtoa_r+0x8fa>
 8005f18:	f1ba 0f00 	cmp.w	sl, #0
 8005f1c:	d115      	bne.n	8005f4a <_dtoa_r+0x8fa>
 8005f1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005f22:	b993      	cbnz	r3, 8005f4a <_dtoa_r+0x8fa>
 8005f24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005f28:	0d1b      	lsrs	r3, r3, #20
 8005f2a:	051b      	lsls	r3, r3, #20
 8005f2c:	b183      	cbz	r3, 8005f50 <_dtoa_r+0x900>
 8005f2e:	9b04      	ldr	r3, [sp, #16]
 8005f30:	3301      	adds	r3, #1
 8005f32:	9304      	str	r3, [sp, #16]
 8005f34:	9b05      	ldr	r3, [sp, #20]
 8005f36:	3301      	adds	r3, #1
 8005f38:	9305      	str	r3, [sp, #20]
 8005f3a:	f04f 0801 	mov.w	r8, #1
 8005f3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f47f af6a 	bne.w	8005e1a <_dtoa_r+0x7ca>
 8005f46:	2001      	movs	r0, #1
 8005f48:	e76f      	b.n	8005e2a <_dtoa_r+0x7da>
 8005f4a:	f04f 0800 	mov.w	r8, #0
 8005f4e:	e7f6      	b.n	8005f3e <_dtoa_r+0x8ee>
 8005f50:	4698      	mov	r8, r3
 8005f52:	e7f4      	b.n	8005f3e <_dtoa_r+0x8ee>
 8005f54:	f43f af7d 	beq.w	8005e52 <_dtoa_r+0x802>
 8005f58:	4618      	mov	r0, r3
 8005f5a:	301c      	adds	r0, #28
 8005f5c:	e772      	b.n	8005e44 <_dtoa_r+0x7f4>
 8005f5e:	9b03      	ldr	r3, [sp, #12]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	dc37      	bgt.n	8005fd4 <_dtoa_r+0x984>
 8005f64:	9b06      	ldr	r3, [sp, #24]
 8005f66:	2b02      	cmp	r3, #2
 8005f68:	dd34      	ble.n	8005fd4 <_dtoa_r+0x984>
 8005f6a:	9b03      	ldr	r3, [sp, #12]
 8005f6c:	9302      	str	r3, [sp, #8]
 8005f6e:	9b02      	ldr	r3, [sp, #8]
 8005f70:	b96b      	cbnz	r3, 8005f8e <_dtoa_r+0x93e>
 8005f72:	4631      	mov	r1, r6
 8005f74:	2205      	movs	r2, #5
 8005f76:	4620      	mov	r0, r4
 8005f78:	f000 f9d4 	bl	8006324 <__multadd>
 8005f7c:	4601      	mov	r1, r0
 8005f7e:	4606      	mov	r6, r0
 8005f80:	ee18 0a10 	vmov	r0, s16
 8005f84:	f000 fbee 	bl	8006764 <__mcmp>
 8005f88:	2800      	cmp	r0, #0
 8005f8a:	f73f adbb 	bgt.w	8005b04 <_dtoa_r+0x4b4>
 8005f8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f90:	9d01      	ldr	r5, [sp, #4]
 8005f92:	43db      	mvns	r3, r3
 8005f94:	9300      	str	r3, [sp, #0]
 8005f96:	f04f 0800 	mov.w	r8, #0
 8005f9a:	4631      	mov	r1, r6
 8005f9c:	4620      	mov	r0, r4
 8005f9e:	f000 f99f 	bl	80062e0 <_Bfree>
 8005fa2:	2f00      	cmp	r7, #0
 8005fa4:	f43f aea4 	beq.w	8005cf0 <_dtoa_r+0x6a0>
 8005fa8:	f1b8 0f00 	cmp.w	r8, #0
 8005fac:	d005      	beq.n	8005fba <_dtoa_r+0x96a>
 8005fae:	45b8      	cmp	r8, r7
 8005fb0:	d003      	beq.n	8005fba <_dtoa_r+0x96a>
 8005fb2:	4641      	mov	r1, r8
 8005fb4:	4620      	mov	r0, r4
 8005fb6:	f000 f993 	bl	80062e0 <_Bfree>
 8005fba:	4639      	mov	r1, r7
 8005fbc:	4620      	mov	r0, r4
 8005fbe:	f000 f98f 	bl	80062e0 <_Bfree>
 8005fc2:	e695      	b.n	8005cf0 <_dtoa_r+0x6a0>
 8005fc4:	2600      	movs	r6, #0
 8005fc6:	4637      	mov	r7, r6
 8005fc8:	e7e1      	b.n	8005f8e <_dtoa_r+0x93e>
 8005fca:	9700      	str	r7, [sp, #0]
 8005fcc:	4637      	mov	r7, r6
 8005fce:	e599      	b.n	8005b04 <_dtoa_r+0x4b4>
 8005fd0:	40240000 	.word	0x40240000
 8005fd4:	9b08      	ldr	r3, [sp, #32]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	f000 80ca 	beq.w	8006170 <_dtoa_r+0xb20>
 8005fdc:	9b03      	ldr	r3, [sp, #12]
 8005fde:	9302      	str	r3, [sp, #8]
 8005fe0:	2d00      	cmp	r5, #0
 8005fe2:	dd05      	ble.n	8005ff0 <_dtoa_r+0x9a0>
 8005fe4:	4639      	mov	r1, r7
 8005fe6:	462a      	mov	r2, r5
 8005fe8:	4620      	mov	r0, r4
 8005fea:	f000 fb4b 	bl	8006684 <__lshift>
 8005fee:	4607      	mov	r7, r0
 8005ff0:	f1b8 0f00 	cmp.w	r8, #0
 8005ff4:	d05b      	beq.n	80060ae <_dtoa_r+0xa5e>
 8005ff6:	6879      	ldr	r1, [r7, #4]
 8005ff8:	4620      	mov	r0, r4
 8005ffa:	f000 f931 	bl	8006260 <_Balloc>
 8005ffe:	4605      	mov	r5, r0
 8006000:	b928      	cbnz	r0, 800600e <_dtoa_r+0x9be>
 8006002:	4b87      	ldr	r3, [pc, #540]	; (8006220 <_dtoa_r+0xbd0>)
 8006004:	4602      	mov	r2, r0
 8006006:	f240 21ea 	movw	r1, #746	; 0x2ea
 800600a:	f7ff bb3b 	b.w	8005684 <_dtoa_r+0x34>
 800600e:	693a      	ldr	r2, [r7, #16]
 8006010:	3202      	adds	r2, #2
 8006012:	0092      	lsls	r2, r2, #2
 8006014:	f107 010c 	add.w	r1, r7, #12
 8006018:	300c      	adds	r0, #12
 800601a:	f000 f913 	bl	8006244 <memcpy>
 800601e:	2201      	movs	r2, #1
 8006020:	4629      	mov	r1, r5
 8006022:	4620      	mov	r0, r4
 8006024:	f000 fb2e 	bl	8006684 <__lshift>
 8006028:	9b01      	ldr	r3, [sp, #4]
 800602a:	f103 0901 	add.w	r9, r3, #1
 800602e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8006032:	4413      	add	r3, r2
 8006034:	9305      	str	r3, [sp, #20]
 8006036:	f00a 0301 	and.w	r3, sl, #1
 800603a:	46b8      	mov	r8, r7
 800603c:	9304      	str	r3, [sp, #16]
 800603e:	4607      	mov	r7, r0
 8006040:	4631      	mov	r1, r6
 8006042:	ee18 0a10 	vmov	r0, s16
 8006046:	f7ff fa75 	bl	8005534 <quorem>
 800604a:	4641      	mov	r1, r8
 800604c:	9002      	str	r0, [sp, #8]
 800604e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006052:	ee18 0a10 	vmov	r0, s16
 8006056:	f000 fb85 	bl	8006764 <__mcmp>
 800605a:	463a      	mov	r2, r7
 800605c:	9003      	str	r0, [sp, #12]
 800605e:	4631      	mov	r1, r6
 8006060:	4620      	mov	r0, r4
 8006062:	f000 fb9b 	bl	800679c <__mdiff>
 8006066:	68c2      	ldr	r2, [r0, #12]
 8006068:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 800606c:	4605      	mov	r5, r0
 800606e:	bb02      	cbnz	r2, 80060b2 <_dtoa_r+0xa62>
 8006070:	4601      	mov	r1, r0
 8006072:	ee18 0a10 	vmov	r0, s16
 8006076:	f000 fb75 	bl	8006764 <__mcmp>
 800607a:	4602      	mov	r2, r0
 800607c:	4629      	mov	r1, r5
 800607e:	4620      	mov	r0, r4
 8006080:	9207      	str	r2, [sp, #28]
 8006082:	f000 f92d 	bl	80062e0 <_Bfree>
 8006086:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800608a:	ea43 0102 	orr.w	r1, r3, r2
 800608e:	9b04      	ldr	r3, [sp, #16]
 8006090:	430b      	orrs	r3, r1
 8006092:	464d      	mov	r5, r9
 8006094:	d10f      	bne.n	80060b6 <_dtoa_r+0xa66>
 8006096:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800609a:	d02a      	beq.n	80060f2 <_dtoa_r+0xaa2>
 800609c:	9b03      	ldr	r3, [sp, #12]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	dd02      	ble.n	80060a8 <_dtoa_r+0xa58>
 80060a2:	9b02      	ldr	r3, [sp, #8]
 80060a4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80060a8:	f88b a000 	strb.w	sl, [fp]
 80060ac:	e775      	b.n	8005f9a <_dtoa_r+0x94a>
 80060ae:	4638      	mov	r0, r7
 80060b0:	e7ba      	b.n	8006028 <_dtoa_r+0x9d8>
 80060b2:	2201      	movs	r2, #1
 80060b4:	e7e2      	b.n	800607c <_dtoa_r+0xa2c>
 80060b6:	9b03      	ldr	r3, [sp, #12]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	db04      	blt.n	80060c6 <_dtoa_r+0xa76>
 80060bc:	9906      	ldr	r1, [sp, #24]
 80060be:	430b      	orrs	r3, r1
 80060c0:	9904      	ldr	r1, [sp, #16]
 80060c2:	430b      	orrs	r3, r1
 80060c4:	d122      	bne.n	800610c <_dtoa_r+0xabc>
 80060c6:	2a00      	cmp	r2, #0
 80060c8:	ddee      	ble.n	80060a8 <_dtoa_r+0xa58>
 80060ca:	ee18 1a10 	vmov	r1, s16
 80060ce:	2201      	movs	r2, #1
 80060d0:	4620      	mov	r0, r4
 80060d2:	f000 fad7 	bl	8006684 <__lshift>
 80060d6:	4631      	mov	r1, r6
 80060d8:	ee08 0a10 	vmov	s16, r0
 80060dc:	f000 fb42 	bl	8006764 <__mcmp>
 80060e0:	2800      	cmp	r0, #0
 80060e2:	dc03      	bgt.n	80060ec <_dtoa_r+0xa9c>
 80060e4:	d1e0      	bne.n	80060a8 <_dtoa_r+0xa58>
 80060e6:	f01a 0f01 	tst.w	sl, #1
 80060ea:	d0dd      	beq.n	80060a8 <_dtoa_r+0xa58>
 80060ec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80060f0:	d1d7      	bne.n	80060a2 <_dtoa_r+0xa52>
 80060f2:	2339      	movs	r3, #57	; 0x39
 80060f4:	f88b 3000 	strb.w	r3, [fp]
 80060f8:	462b      	mov	r3, r5
 80060fa:	461d      	mov	r5, r3
 80060fc:	3b01      	subs	r3, #1
 80060fe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006102:	2a39      	cmp	r2, #57	; 0x39
 8006104:	d071      	beq.n	80061ea <_dtoa_r+0xb9a>
 8006106:	3201      	adds	r2, #1
 8006108:	701a      	strb	r2, [r3, #0]
 800610a:	e746      	b.n	8005f9a <_dtoa_r+0x94a>
 800610c:	2a00      	cmp	r2, #0
 800610e:	dd07      	ble.n	8006120 <_dtoa_r+0xad0>
 8006110:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8006114:	d0ed      	beq.n	80060f2 <_dtoa_r+0xaa2>
 8006116:	f10a 0301 	add.w	r3, sl, #1
 800611a:	f88b 3000 	strb.w	r3, [fp]
 800611e:	e73c      	b.n	8005f9a <_dtoa_r+0x94a>
 8006120:	9b05      	ldr	r3, [sp, #20]
 8006122:	f809 ac01 	strb.w	sl, [r9, #-1]
 8006126:	4599      	cmp	r9, r3
 8006128:	d047      	beq.n	80061ba <_dtoa_r+0xb6a>
 800612a:	ee18 1a10 	vmov	r1, s16
 800612e:	2300      	movs	r3, #0
 8006130:	220a      	movs	r2, #10
 8006132:	4620      	mov	r0, r4
 8006134:	f000 f8f6 	bl	8006324 <__multadd>
 8006138:	45b8      	cmp	r8, r7
 800613a:	ee08 0a10 	vmov	s16, r0
 800613e:	f04f 0300 	mov.w	r3, #0
 8006142:	f04f 020a 	mov.w	r2, #10
 8006146:	4641      	mov	r1, r8
 8006148:	4620      	mov	r0, r4
 800614a:	d106      	bne.n	800615a <_dtoa_r+0xb0a>
 800614c:	f000 f8ea 	bl	8006324 <__multadd>
 8006150:	4680      	mov	r8, r0
 8006152:	4607      	mov	r7, r0
 8006154:	f109 0901 	add.w	r9, r9, #1
 8006158:	e772      	b.n	8006040 <_dtoa_r+0x9f0>
 800615a:	f000 f8e3 	bl	8006324 <__multadd>
 800615e:	4639      	mov	r1, r7
 8006160:	4680      	mov	r8, r0
 8006162:	2300      	movs	r3, #0
 8006164:	220a      	movs	r2, #10
 8006166:	4620      	mov	r0, r4
 8006168:	f000 f8dc 	bl	8006324 <__multadd>
 800616c:	4607      	mov	r7, r0
 800616e:	e7f1      	b.n	8006154 <_dtoa_r+0xb04>
 8006170:	9b03      	ldr	r3, [sp, #12]
 8006172:	9302      	str	r3, [sp, #8]
 8006174:	9d01      	ldr	r5, [sp, #4]
 8006176:	ee18 0a10 	vmov	r0, s16
 800617a:	4631      	mov	r1, r6
 800617c:	f7ff f9da 	bl	8005534 <quorem>
 8006180:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8006184:	9b01      	ldr	r3, [sp, #4]
 8006186:	f805 ab01 	strb.w	sl, [r5], #1
 800618a:	1aea      	subs	r2, r5, r3
 800618c:	9b02      	ldr	r3, [sp, #8]
 800618e:	4293      	cmp	r3, r2
 8006190:	dd09      	ble.n	80061a6 <_dtoa_r+0xb56>
 8006192:	ee18 1a10 	vmov	r1, s16
 8006196:	2300      	movs	r3, #0
 8006198:	220a      	movs	r2, #10
 800619a:	4620      	mov	r0, r4
 800619c:	f000 f8c2 	bl	8006324 <__multadd>
 80061a0:	ee08 0a10 	vmov	s16, r0
 80061a4:	e7e7      	b.n	8006176 <_dtoa_r+0xb26>
 80061a6:	9b02      	ldr	r3, [sp, #8]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	bfc8      	it	gt
 80061ac:	461d      	movgt	r5, r3
 80061ae:	9b01      	ldr	r3, [sp, #4]
 80061b0:	bfd8      	it	le
 80061b2:	2501      	movle	r5, #1
 80061b4:	441d      	add	r5, r3
 80061b6:	f04f 0800 	mov.w	r8, #0
 80061ba:	ee18 1a10 	vmov	r1, s16
 80061be:	2201      	movs	r2, #1
 80061c0:	4620      	mov	r0, r4
 80061c2:	f000 fa5f 	bl	8006684 <__lshift>
 80061c6:	4631      	mov	r1, r6
 80061c8:	ee08 0a10 	vmov	s16, r0
 80061cc:	f000 faca 	bl	8006764 <__mcmp>
 80061d0:	2800      	cmp	r0, #0
 80061d2:	dc91      	bgt.n	80060f8 <_dtoa_r+0xaa8>
 80061d4:	d102      	bne.n	80061dc <_dtoa_r+0xb8c>
 80061d6:	f01a 0f01 	tst.w	sl, #1
 80061da:	d18d      	bne.n	80060f8 <_dtoa_r+0xaa8>
 80061dc:	462b      	mov	r3, r5
 80061de:	461d      	mov	r5, r3
 80061e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80061e4:	2a30      	cmp	r2, #48	; 0x30
 80061e6:	d0fa      	beq.n	80061de <_dtoa_r+0xb8e>
 80061e8:	e6d7      	b.n	8005f9a <_dtoa_r+0x94a>
 80061ea:	9a01      	ldr	r2, [sp, #4]
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d184      	bne.n	80060fa <_dtoa_r+0xaaa>
 80061f0:	9b00      	ldr	r3, [sp, #0]
 80061f2:	3301      	adds	r3, #1
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	2331      	movs	r3, #49	; 0x31
 80061f8:	7013      	strb	r3, [r2, #0]
 80061fa:	e6ce      	b.n	8005f9a <_dtoa_r+0x94a>
 80061fc:	4b09      	ldr	r3, [pc, #36]	; (8006224 <_dtoa_r+0xbd4>)
 80061fe:	f7ff ba95 	b.w	800572c <_dtoa_r+0xdc>
 8006202:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006204:	2b00      	cmp	r3, #0
 8006206:	f47f aa6e 	bne.w	80056e6 <_dtoa_r+0x96>
 800620a:	4b07      	ldr	r3, [pc, #28]	; (8006228 <_dtoa_r+0xbd8>)
 800620c:	f7ff ba8e 	b.w	800572c <_dtoa_r+0xdc>
 8006210:	9b02      	ldr	r3, [sp, #8]
 8006212:	2b00      	cmp	r3, #0
 8006214:	dcae      	bgt.n	8006174 <_dtoa_r+0xb24>
 8006216:	9b06      	ldr	r3, [sp, #24]
 8006218:	2b02      	cmp	r3, #2
 800621a:	f73f aea8 	bgt.w	8005f6e <_dtoa_r+0x91e>
 800621e:	e7a9      	b.n	8006174 <_dtoa_r+0xb24>
 8006220:	08007ae3 	.word	0x08007ae3
 8006224:	08007a40 	.word	0x08007a40
 8006228:	08007a64 	.word	0x08007a64

0800622c <_localeconv_r>:
 800622c:	4800      	ldr	r0, [pc, #0]	; (8006230 <_localeconv_r+0x4>)
 800622e:	4770      	bx	lr
 8006230:	20000164 	.word	0x20000164

08006234 <malloc>:
 8006234:	4b02      	ldr	r3, [pc, #8]	; (8006240 <malloc+0xc>)
 8006236:	4601      	mov	r1, r0
 8006238:	6818      	ldr	r0, [r3, #0]
 800623a:	f000 bc17 	b.w	8006a6c <_malloc_r>
 800623e:	bf00      	nop
 8006240:	20000010 	.word	0x20000010

08006244 <memcpy>:
 8006244:	440a      	add	r2, r1
 8006246:	4291      	cmp	r1, r2
 8006248:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800624c:	d100      	bne.n	8006250 <memcpy+0xc>
 800624e:	4770      	bx	lr
 8006250:	b510      	push	{r4, lr}
 8006252:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006256:	f803 4f01 	strb.w	r4, [r3, #1]!
 800625a:	4291      	cmp	r1, r2
 800625c:	d1f9      	bne.n	8006252 <memcpy+0xe>
 800625e:	bd10      	pop	{r4, pc}

08006260 <_Balloc>:
 8006260:	b570      	push	{r4, r5, r6, lr}
 8006262:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006264:	4604      	mov	r4, r0
 8006266:	460d      	mov	r5, r1
 8006268:	b976      	cbnz	r6, 8006288 <_Balloc+0x28>
 800626a:	2010      	movs	r0, #16
 800626c:	f7ff ffe2 	bl	8006234 <malloc>
 8006270:	4602      	mov	r2, r0
 8006272:	6260      	str	r0, [r4, #36]	; 0x24
 8006274:	b920      	cbnz	r0, 8006280 <_Balloc+0x20>
 8006276:	4b18      	ldr	r3, [pc, #96]	; (80062d8 <_Balloc+0x78>)
 8006278:	4818      	ldr	r0, [pc, #96]	; (80062dc <_Balloc+0x7c>)
 800627a:	2166      	movs	r1, #102	; 0x66
 800627c:	f000 fdd6 	bl	8006e2c <__assert_func>
 8006280:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006284:	6006      	str	r6, [r0, #0]
 8006286:	60c6      	str	r6, [r0, #12]
 8006288:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800628a:	68f3      	ldr	r3, [r6, #12]
 800628c:	b183      	cbz	r3, 80062b0 <_Balloc+0x50>
 800628e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006290:	68db      	ldr	r3, [r3, #12]
 8006292:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006296:	b9b8      	cbnz	r0, 80062c8 <_Balloc+0x68>
 8006298:	2101      	movs	r1, #1
 800629a:	fa01 f605 	lsl.w	r6, r1, r5
 800629e:	1d72      	adds	r2, r6, #5
 80062a0:	0092      	lsls	r2, r2, #2
 80062a2:	4620      	mov	r0, r4
 80062a4:	f000 fb60 	bl	8006968 <_calloc_r>
 80062a8:	b160      	cbz	r0, 80062c4 <_Balloc+0x64>
 80062aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80062ae:	e00e      	b.n	80062ce <_Balloc+0x6e>
 80062b0:	2221      	movs	r2, #33	; 0x21
 80062b2:	2104      	movs	r1, #4
 80062b4:	4620      	mov	r0, r4
 80062b6:	f000 fb57 	bl	8006968 <_calloc_r>
 80062ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80062bc:	60f0      	str	r0, [r6, #12]
 80062be:	68db      	ldr	r3, [r3, #12]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d1e4      	bne.n	800628e <_Balloc+0x2e>
 80062c4:	2000      	movs	r0, #0
 80062c6:	bd70      	pop	{r4, r5, r6, pc}
 80062c8:	6802      	ldr	r2, [r0, #0]
 80062ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80062ce:	2300      	movs	r3, #0
 80062d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80062d4:	e7f7      	b.n	80062c6 <_Balloc+0x66>
 80062d6:	bf00      	nop
 80062d8:	08007a71 	.word	0x08007a71
 80062dc:	08007af4 	.word	0x08007af4

080062e0 <_Bfree>:
 80062e0:	b570      	push	{r4, r5, r6, lr}
 80062e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80062e4:	4605      	mov	r5, r0
 80062e6:	460c      	mov	r4, r1
 80062e8:	b976      	cbnz	r6, 8006308 <_Bfree+0x28>
 80062ea:	2010      	movs	r0, #16
 80062ec:	f7ff ffa2 	bl	8006234 <malloc>
 80062f0:	4602      	mov	r2, r0
 80062f2:	6268      	str	r0, [r5, #36]	; 0x24
 80062f4:	b920      	cbnz	r0, 8006300 <_Bfree+0x20>
 80062f6:	4b09      	ldr	r3, [pc, #36]	; (800631c <_Bfree+0x3c>)
 80062f8:	4809      	ldr	r0, [pc, #36]	; (8006320 <_Bfree+0x40>)
 80062fa:	218a      	movs	r1, #138	; 0x8a
 80062fc:	f000 fd96 	bl	8006e2c <__assert_func>
 8006300:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006304:	6006      	str	r6, [r0, #0]
 8006306:	60c6      	str	r6, [r0, #12]
 8006308:	b13c      	cbz	r4, 800631a <_Bfree+0x3a>
 800630a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800630c:	6862      	ldr	r2, [r4, #4]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006314:	6021      	str	r1, [r4, #0]
 8006316:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800631a:	bd70      	pop	{r4, r5, r6, pc}
 800631c:	08007a71 	.word	0x08007a71
 8006320:	08007af4 	.word	0x08007af4

08006324 <__multadd>:
 8006324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006328:	690d      	ldr	r5, [r1, #16]
 800632a:	4607      	mov	r7, r0
 800632c:	460c      	mov	r4, r1
 800632e:	461e      	mov	r6, r3
 8006330:	f101 0c14 	add.w	ip, r1, #20
 8006334:	2000      	movs	r0, #0
 8006336:	f8dc 3000 	ldr.w	r3, [ip]
 800633a:	b299      	uxth	r1, r3
 800633c:	fb02 6101 	mla	r1, r2, r1, r6
 8006340:	0c1e      	lsrs	r6, r3, #16
 8006342:	0c0b      	lsrs	r3, r1, #16
 8006344:	fb02 3306 	mla	r3, r2, r6, r3
 8006348:	b289      	uxth	r1, r1
 800634a:	3001      	adds	r0, #1
 800634c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006350:	4285      	cmp	r5, r0
 8006352:	f84c 1b04 	str.w	r1, [ip], #4
 8006356:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800635a:	dcec      	bgt.n	8006336 <__multadd+0x12>
 800635c:	b30e      	cbz	r6, 80063a2 <__multadd+0x7e>
 800635e:	68a3      	ldr	r3, [r4, #8]
 8006360:	42ab      	cmp	r3, r5
 8006362:	dc19      	bgt.n	8006398 <__multadd+0x74>
 8006364:	6861      	ldr	r1, [r4, #4]
 8006366:	4638      	mov	r0, r7
 8006368:	3101      	adds	r1, #1
 800636a:	f7ff ff79 	bl	8006260 <_Balloc>
 800636e:	4680      	mov	r8, r0
 8006370:	b928      	cbnz	r0, 800637e <__multadd+0x5a>
 8006372:	4602      	mov	r2, r0
 8006374:	4b0c      	ldr	r3, [pc, #48]	; (80063a8 <__multadd+0x84>)
 8006376:	480d      	ldr	r0, [pc, #52]	; (80063ac <__multadd+0x88>)
 8006378:	21b5      	movs	r1, #181	; 0xb5
 800637a:	f000 fd57 	bl	8006e2c <__assert_func>
 800637e:	6922      	ldr	r2, [r4, #16]
 8006380:	3202      	adds	r2, #2
 8006382:	f104 010c 	add.w	r1, r4, #12
 8006386:	0092      	lsls	r2, r2, #2
 8006388:	300c      	adds	r0, #12
 800638a:	f7ff ff5b 	bl	8006244 <memcpy>
 800638e:	4621      	mov	r1, r4
 8006390:	4638      	mov	r0, r7
 8006392:	f7ff ffa5 	bl	80062e0 <_Bfree>
 8006396:	4644      	mov	r4, r8
 8006398:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800639c:	3501      	adds	r5, #1
 800639e:	615e      	str	r6, [r3, #20]
 80063a0:	6125      	str	r5, [r4, #16]
 80063a2:	4620      	mov	r0, r4
 80063a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063a8:	08007ae3 	.word	0x08007ae3
 80063ac:	08007af4 	.word	0x08007af4

080063b0 <__hi0bits>:
 80063b0:	0c03      	lsrs	r3, r0, #16
 80063b2:	041b      	lsls	r3, r3, #16
 80063b4:	b9d3      	cbnz	r3, 80063ec <__hi0bits+0x3c>
 80063b6:	0400      	lsls	r0, r0, #16
 80063b8:	2310      	movs	r3, #16
 80063ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80063be:	bf04      	itt	eq
 80063c0:	0200      	lsleq	r0, r0, #8
 80063c2:	3308      	addeq	r3, #8
 80063c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80063c8:	bf04      	itt	eq
 80063ca:	0100      	lsleq	r0, r0, #4
 80063cc:	3304      	addeq	r3, #4
 80063ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80063d2:	bf04      	itt	eq
 80063d4:	0080      	lsleq	r0, r0, #2
 80063d6:	3302      	addeq	r3, #2
 80063d8:	2800      	cmp	r0, #0
 80063da:	db05      	blt.n	80063e8 <__hi0bits+0x38>
 80063dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80063e0:	f103 0301 	add.w	r3, r3, #1
 80063e4:	bf08      	it	eq
 80063e6:	2320      	moveq	r3, #32
 80063e8:	4618      	mov	r0, r3
 80063ea:	4770      	bx	lr
 80063ec:	2300      	movs	r3, #0
 80063ee:	e7e4      	b.n	80063ba <__hi0bits+0xa>

080063f0 <__lo0bits>:
 80063f0:	6803      	ldr	r3, [r0, #0]
 80063f2:	f013 0207 	ands.w	r2, r3, #7
 80063f6:	4601      	mov	r1, r0
 80063f8:	d00b      	beq.n	8006412 <__lo0bits+0x22>
 80063fa:	07da      	lsls	r2, r3, #31
 80063fc:	d423      	bmi.n	8006446 <__lo0bits+0x56>
 80063fe:	0798      	lsls	r0, r3, #30
 8006400:	bf49      	itett	mi
 8006402:	085b      	lsrmi	r3, r3, #1
 8006404:	089b      	lsrpl	r3, r3, #2
 8006406:	2001      	movmi	r0, #1
 8006408:	600b      	strmi	r3, [r1, #0]
 800640a:	bf5c      	itt	pl
 800640c:	600b      	strpl	r3, [r1, #0]
 800640e:	2002      	movpl	r0, #2
 8006410:	4770      	bx	lr
 8006412:	b298      	uxth	r0, r3
 8006414:	b9a8      	cbnz	r0, 8006442 <__lo0bits+0x52>
 8006416:	0c1b      	lsrs	r3, r3, #16
 8006418:	2010      	movs	r0, #16
 800641a:	b2da      	uxtb	r2, r3
 800641c:	b90a      	cbnz	r2, 8006422 <__lo0bits+0x32>
 800641e:	3008      	adds	r0, #8
 8006420:	0a1b      	lsrs	r3, r3, #8
 8006422:	071a      	lsls	r2, r3, #28
 8006424:	bf04      	itt	eq
 8006426:	091b      	lsreq	r3, r3, #4
 8006428:	3004      	addeq	r0, #4
 800642a:	079a      	lsls	r2, r3, #30
 800642c:	bf04      	itt	eq
 800642e:	089b      	lsreq	r3, r3, #2
 8006430:	3002      	addeq	r0, #2
 8006432:	07da      	lsls	r2, r3, #31
 8006434:	d403      	bmi.n	800643e <__lo0bits+0x4e>
 8006436:	085b      	lsrs	r3, r3, #1
 8006438:	f100 0001 	add.w	r0, r0, #1
 800643c:	d005      	beq.n	800644a <__lo0bits+0x5a>
 800643e:	600b      	str	r3, [r1, #0]
 8006440:	4770      	bx	lr
 8006442:	4610      	mov	r0, r2
 8006444:	e7e9      	b.n	800641a <__lo0bits+0x2a>
 8006446:	2000      	movs	r0, #0
 8006448:	4770      	bx	lr
 800644a:	2020      	movs	r0, #32
 800644c:	4770      	bx	lr
	...

08006450 <__i2b>:
 8006450:	b510      	push	{r4, lr}
 8006452:	460c      	mov	r4, r1
 8006454:	2101      	movs	r1, #1
 8006456:	f7ff ff03 	bl	8006260 <_Balloc>
 800645a:	4602      	mov	r2, r0
 800645c:	b928      	cbnz	r0, 800646a <__i2b+0x1a>
 800645e:	4b05      	ldr	r3, [pc, #20]	; (8006474 <__i2b+0x24>)
 8006460:	4805      	ldr	r0, [pc, #20]	; (8006478 <__i2b+0x28>)
 8006462:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006466:	f000 fce1 	bl	8006e2c <__assert_func>
 800646a:	2301      	movs	r3, #1
 800646c:	6144      	str	r4, [r0, #20]
 800646e:	6103      	str	r3, [r0, #16]
 8006470:	bd10      	pop	{r4, pc}
 8006472:	bf00      	nop
 8006474:	08007ae3 	.word	0x08007ae3
 8006478:	08007af4 	.word	0x08007af4

0800647c <__multiply>:
 800647c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006480:	4691      	mov	r9, r2
 8006482:	690a      	ldr	r2, [r1, #16]
 8006484:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006488:	429a      	cmp	r2, r3
 800648a:	bfb8      	it	lt
 800648c:	460b      	movlt	r3, r1
 800648e:	460c      	mov	r4, r1
 8006490:	bfbc      	itt	lt
 8006492:	464c      	movlt	r4, r9
 8006494:	4699      	movlt	r9, r3
 8006496:	6927      	ldr	r7, [r4, #16]
 8006498:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800649c:	68a3      	ldr	r3, [r4, #8]
 800649e:	6861      	ldr	r1, [r4, #4]
 80064a0:	eb07 060a 	add.w	r6, r7, sl
 80064a4:	42b3      	cmp	r3, r6
 80064a6:	b085      	sub	sp, #20
 80064a8:	bfb8      	it	lt
 80064aa:	3101      	addlt	r1, #1
 80064ac:	f7ff fed8 	bl	8006260 <_Balloc>
 80064b0:	b930      	cbnz	r0, 80064c0 <__multiply+0x44>
 80064b2:	4602      	mov	r2, r0
 80064b4:	4b44      	ldr	r3, [pc, #272]	; (80065c8 <__multiply+0x14c>)
 80064b6:	4845      	ldr	r0, [pc, #276]	; (80065cc <__multiply+0x150>)
 80064b8:	f240 115d 	movw	r1, #349	; 0x15d
 80064bc:	f000 fcb6 	bl	8006e2c <__assert_func>
 80064c0:	f100 0514 	add.w	r5, r0, #20
 80064c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80064c8:	462b      	mov	r3, r5
 80064ca:	2200      	movs	r2, #0
 80064cc:	4543      	cmp	r3, r8
 80064ce:	d321      	bcc.n	8006514 <__multiply+0x98>
 80064d0:	f104 0314 	add.w	r3, r4, #20
 80064d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80064d8:	f109 0314 	add.w	r3, r9, #20
 80064dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80064e0:	9202      	str	r2, [sp, #8]
 80064e2:	1b3a      	subs	r2, r7, r4
 80064e4:	3a15      	subs	r2, #21
 80064e6:	f022 0203 	bic.w	r2, r2, #3
 80064ea:	3204      	adds	r2, #4
 80064ec:	f104 0115 	add.w	r1, r4, #21
 80064f0:	428f      	cmp	r7, r1
 80064f2:	bf38      	it	cc
 80064f4:	2204      	movcc	r2, #4
 80064f6:	9201      	str	r2, [sp, #4]
 80064f8:	9a02      	ldr	r2, [sp, #8]
 80064fa:	9303      	str	r3, [sp, #12]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d80c      	bhi.n	800651a <__multiply+0x9e>
 8006500:	2e00      	cmp	r6, #0
 8006502:	dd03      	ble.n	800650c <__multiply+0x90>
 8006504:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006508:	2b00      	cmp	r3, #0
 800650a:	d05a      	beq.n	80065c2 <__multiply+0x146>
 800650c:	6106      	str	r6, [r0, #16]
 800650e:	b005      	add	sp, #20
 8006510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006514:	f843 2b04 	str.w	r2, [r3], #4
 8006518:	e7d8      	b.n	80064cc <__multiply+0x50>
 800651a:	f8b3 a000 	ldrh.w	sl, [r3]
 800651e:	f1ba 0f00 	cmp.w	sl, #0
 8006522:	d024      	beq.n	800656e <__multiply+0xf2>
 8006524:	f104 0e14 	add.w	lr, r4, #20
 8006528:	46a9      	mov	r9, r5
 800652a:	f04f 0c00 	mov.w	ip, #0
 800652e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006532:	f8d9 1000 	ldr.w	r1, [r9]
 8006536:	fa1f fb82 	uxth.w	fp, r2
 800653a:	b289      	uxth	r1, r1
 800653c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006540:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006544:	f8d9 2000 	ldr.w	r2, [r9]
 8006548:	4461      	add	r1, ip
 800654a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800654e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006552:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006556:	b289      	uxth	r1, r1
 8006558:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800655c:	4577      	cmp	r7, lr
 800655e:	f849 1b04 	str.w	r1, [r9], #4
 8006562:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006566:	d8e2      	bhi.n	800652e <__multiply+0xb2>
 8006568:	9a01      	ldr	r2, [sp, #4]
 800656a:	f845 c002 	str.w	ip, [r5, r2]
 800656e:	9a03      	ldr	r2, [sp, #12]
 8006570:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006574:	3304      	adds	r3, #4
 8006576:	f1b9 0f00 	cmp.w	r9, #0
 800657a:	d020      	beq.n	80065be <__multiply+0x142>
 800657c:	6829      	ldr	r1, [r5, #0]
 800657e:	f104 0c14 	add.w	ip, r4, #20
 8006582:	46ae      	mov	lr, r5
 8006584:	f04f 0a00 	mov.w	sl, #0
 8006588:	f8bc b000 	ldrh.w	fp, [ip]
 800658c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006590:	fb09 220b 	mla	r2, r9, fp, r2
 8006594:	4492      	add	sl, r2
 8006596:	b289      	uxth	r1, r1
 8006598:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800659c:	f84e 1b04 	str.w	r1, [lr], #4
 80065a0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80065a4:	f8be 1000 	ldrh.w	r1, [lr]
 80065a8:	0c12      	lsrs	r2, r2, #16
 80065aa:	fb09 1102 	mla	r1, r9, r2, r1
 80065ae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80065b2:	4567      	cmp	r7, ip
 80065b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80065b8:	d8e6      	bhi.n	8006588 <__multiply+0x10c>
 80065ba:	9a01      	ldr	r2, [sp, #4]
 80065bc:	50a9      	str	r1, [r5, r2]
 80065be:	3504      	adds	r5, #4
 80065c0:	e79a      	b.n	80064f8 <__multiply+0x7c>
 80065c2:	3e01      	subs	r6, #1
 80065c4:	e79c      	b.n	8006500 <__multiply+0x84>
 80065c6:	bf00      	nop
 80065c8:	08007ae3 	.word	0x08007ae3
 80065cc:	08007af4 	.word	0x08007af4

080065d0 <__pow5mult>:
 80065d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065d4:	4615      	mov	r5, r2
 80065d6:	f012 0203 	ands.w	r2, r2, #3
 80065da:	4606      	mov	r6, r0
 80065dc:	460f      	mov	r7, r1
 80065de:	d007      	beq.n	80065f0 <__pow5mult+0x20>
 80065e0:	4c25      	ldr	r4, [pc, #148]	; (8006678 <__pow5mult+0xa8>)
 80065e2:	3a01      	subs	r2, #1
 80065e4:	2300      	movs	r3, #0
 80065e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80065ea:	f7ff fe9b 	bl	8006324 <__multadd>
 80065ee:	4607      	mov	r7, r0
 80065f0:	10ad      	asrs	r5, r5, #2
 80065f2:	d03d      	beq.n	8006670 <__pow5mult+0xa0>
 80065f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80065f6:	b97c      	cbnz	r4, 8006618 <__pow5mult+0x48>
 80065f8:	2010      	movs	r0, #16
 80065fa:	f7ff fe1b 	bl	8006234 <malloc>
 80065fe:	4602      	mov	r2, r0
 8006600:	6270      	str	r0, [r6, #36]	; 0x24
 8006602:	b928      	cbnz	r0, 8006610 <__pow5mult+0x40>
 8006604:	4b1d      	ldr	r3, [pc, #116]	; (800667c <__pow5mult+0xac>)
 8006606:	481e      	ldr	r0, [pc, #120]	; (8006680 <__pow5mult+0xb0>)
 8006608:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800660c:	f000 fc0e 	bl	8006e2c <__assert_func>
 8006610:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006614:	6004      	str	r4, [r0, #0]
 8006616:	60c4      	str	r4, [r0, #12]
 8006618:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800661c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006620:	b94c      	cbnz	r4, 8006636 <__pow5mult+0x66>
 8006622:	f240 2171 	movw	r1, #625	; 0x271
 8006626:	4630      	mov	r0, r6
 8006628:	f7ff ff12 	bl	8006450 <__i2b>
 800662c:	2300      	movs	r3, #0
 800662e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006632:	4604      	mov	r4, r0
 8006634:	6003      	str	r3, [r0, #0]
 8006636:	f04f 0900 	mov.w	r9, #0
 800663a:	07eb      	lsls	r3, r5, #31
 800663c:	d50a      	bpl.n	8006654 <__pow5mult+0x84>
 800663e:	4639      	mov	r1, r7
 8006640:	4622      	mov	r2, r4
 8006642:	4630      	mov	r0, r6
 8006644:	f7ff ff1a 	bl	800647c <__multiply>
 8006648:	4639      	mov	r1, r7
 800664a:	4680      	mov	r8, r0
 800664c:	4630      	mov	r0, r6
 800664e:	f7ff fe47 	bl	80062e0 <_Bfree>
 8006652:	4647      	mov	r7, r8
 8006654:	106d      	asrs	r5, r5, #1
 8006656:	d00b      	beq.n	8006670 <__pow5mult+0xa0>
 8006658:	6820      	ldr	r0, [r4, #0]
 800665a:	b938      	cbnz	r0, 800666c <__pow5mult+0x9c>
 800665c:	4622      	mov	r2, r4
 800665e:	4621      	mov	r1, r4
 8006660:	4630      	mov	r0, r6
 8006662:	f7ff ff0b 	bl	800647c <__multiply>
 8006666:	6020      	str	r0, [r4, #0]
 8006668:	f8c0 9000 	str.w	r9, [r0]
 800666c:	4604      	mov	r4, r0
 800666e:	e7e4      	b.n	800663a <__pow5mult+0x6a>
 8006670:	4638      	mov	r0, r7
 8006672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006676:	bf00      	nop
 8006678:	08007c40 	.word	0x08007c40
 800667c:	08007a71 	.word	0x08007a71
 8006680:	08007af4 	.word	0x08007af4

08006684 <__lshift>:
 8006684:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006688:	460c      	mov	r4, r1
 800668a:	6849      	ldr	r1, [r1, #4]
 800668c:	6923      	ldr	r3, [r4, #16]
 800668e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006692:	68a3      	ldr	r3, [r4, #8]
 8006694:	4607      	mov	r7, r0
 8006696:	4691      	mov	r9, r2
 8006698:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800669c:	f108 0601 	add.w	r6, r8, #1
 80066a0:	42b3      	cmp	r3, r6
 80066a2:	db0b      	blt.n	80066bc <__lshift+0x38>
 80066a4:	4638      	mov	r0, r7
 80066a6:	f7ff fddb 	bl	8006260 <_Balloc>
 80066aa:	4605      	mov	r5, r0
 80066ac:	b948      	cbnz	r0, 80066c2 <__lshift+0x3e>
 80066ae:	4602      	mov	r2, r0
 80066b0:	4b2a      	ldr	r3, [pc, #168]	; (800675c <__lshift+0xd8>)
 80066b2:	482b      	ldr	r0, [pc, #172]	; (8006760 <__lshift+0xdc>)
 80066b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80066b8:	f000 fbb8 	bl	8006e2c <__assert_func>
 80066bc:	3101      	adds	r1, #1
 80066be:	005b      	lsls	r3, r3, #1
 80066c0:	e7ee      	b.n	80066a0 <__lshift+0x1c>
 80066c2:	2300      	movs	r3, #0
 80066c4:	f100 0114 	add.w	r1, r0, #20
 80066c8:	f100 0210 	add.w	r2, r0, #16
 80066cc:	4618      	mov	r0, r3
 80066ce:	4553      	cmp	r3, sl
 80066d0:	db37      	blt.n	8006742 <__lshift+0xbe>
 80066d2:	6920      	ldr	r0, [r4, #16]
 80066d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80066d8:	f104 0314 	add.w	r3, r4, #20
 80066dc:	f019 091f 	ands.w	r9, r9, #31
 80066e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80066e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80066e8:	d02f      	beq.n	800674a <__lshift+0xc6>
 80066ea:	f1c9 0e20 	rsb	lr, r9, #32
 80066ee:	468a      	mov	sl, r1
 80066f0:	f04f 0c00 	mov.w	ip, #0
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	fa02 f209 	lsl.w	r2, r2, r9
 80066fa:	ea42 020c 	orr.w	r2, r2, ip
 80066fe:	f84a 2b04 	str.w	r2, [sl], #4
 8006702:	f853 2b04 	ldr.w	r2, [r3], #4
 8006706:	4298      	cmp	r0, r3
 8006708:	fa22 fc0e 	lsr.w	ip, r2, lr
 800670c:	d8f2      	bhi.n	80066f4 <__lshift+0x70>
 800670e:	1b03      	subs	r3, r0, r4
 8006710:	3b15      	subs	r3, #21
 8006712:	f023 0303 	bic.w	r3, r3, #3
 8006716:	3304      	adds	r3, #4
 8006718:	f104 0215 	add.w	r2, r4, #21
 800671c:	4290      	cmp	r0, r2
 800671e:	bf38      	it	cc
 8006720:	2304      	movcc	r3, #4
 8006722:	f841 c003 	str.w	ip, [r1, r3]
 8006726:	f1bc 0f00 	cmp.w	ip, #0
 800672a:	d001      	beq.n	8006730 <__lshift+0xac>
 800672c:	f108 0602 	add.w	r6, r8, #2
 8006730:	3e01      	subs	r6, #1
 8006732:	4638      	mov	r0, r7
 8006734:	612e      	str	r6, [r5, #16]
 8006736:	4621      	mov	r1, r4
 8006738:	f7ff fdd2 	bl	80062e0 <_Bfree>
 800673c:	4628      	mov	r0, r5
 800673e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006742:	f842 0f04 	str.w	r0, [r2, #4]!
 8006746:	3301      	adds	r3, #1
 8006748:	e7c1      	b.n	80066ce <__lshift+0x4a>
 800674a:	3904      	subs	r1, #4
 800674c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006750:	f841 2f04 	str.w	r2, [r1, #4]!
 8006754:	4298      	cmp	r0, r3
 8006756:	d8f9      	bhi.n	800674c <__lshift+0xc8>
 8006758:	e7ea      	b.n	8006730 <__lshift+0xac>
 800675a:	bf00      	nop
 800675c:	08007ae3 	.word	0x08007ae3
 8006760:	08007af4 	.word	0x08007af4

08006764 <__mcmp>:
 8006764:	b530      	push	{r4, r5, lr}
 8006766:	6902      	ldr	r2, [r0, #16]
 8006768:	690c      	ldr	r4, [r1, #16]
 800676a:	1b12      	subs	r2, r2, r4
 800676c:	d10e      	bne.n	800678c <__mcmp+0x28>
 800676e:	f100 0314 	add.w	r3, r0, #20
 8006772:	3114      	adds	r1, #20
 8006774:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006778:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800677c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006780:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006784:	42a5      	cmp	r5, r4
 8006786:	d003      	beq.n	8006790 <__mcmp+0x2c>
 8006788:	d305      	bcc.n	8006796 <__mcmp+0x32>
 800678a:	2201      	movs	r2, #1
 800678c:	4610      	mov	r0, r2
 800678e:	bd30      	pop	{r4, r5, pc}
 8006790:	4283      	cmp	r3, r0
 8006792:	d3f3      	bcc.n	800677c <__mcmp+0x18>
 8006794:	e7fa      	b.n	800678c <__mcmp+0x28>
 8006796:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800679a:	e7f7      	b.n	800678c <__mcmp+0x28>

0800679c <__mdiff>:
 800679c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a0:	460c      	mov	r4, r1
 80067a2:	4606      	mov	r6, r0
 80067a4:	4611      	mov	r1, r2
 80067a6:	4620      	mov	r0, r4
 80067a8:	4690      	mov	r8, r2
 80067aa:	f7ff ffdb 	bl	8006764 <__mcmp>
 80067ae:	1e05      	subs	r5, r0, #0
 80067b0:	d110      	bne.n	80067d4 <__mdiff+0x38>
 80067b2:	4629      	mov	r1, r5
 80067b4:	4630      	mov	r0, r6
 80067b6:	f7ff fd53 	bl	8006260 <_Balloc>
 80067ba:	b930      	cbnz	r0, 80067ca <__mdiff+0x2e>
 80067bc:	4b3a      	ldr	r3, [pc, #232]	; (80068a8 <__mdiff+0x10c>)
 80067be:	4602      	mov	r2, r0
 80067c0:	f240 2132 	movw	r1, #562	; 0x232
 80067c4:	4839      	ldr	r0, [pc, #228]	; (80068ac <__mdiff+0x110>)
 80067c6:	f000 fb31 	bl	8006e2c <__assert_func>
 80067ca:	2301      	movs	r3, #1
 80067cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80067d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067d4:	bfa4      	itt	ge
 80067d6:	4643      	movge	r3, r8
 80067d8:	46a0      	movge	r8, r4
 80067da:	4630      	mov	r0, r6
 80067dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80067e0:	bfa6      	itte	ge
 80067e2:	461c      	movge	r4, r3
 80067e4:	2500      	movge	r5, #0
 80067e6:	2501      	movlt	r5, #1
 80067e8:	f7ff fd3a 	bl	8006260 <_Balloc>
 80067ec:	b920      	cbnz	r0, 80067f8 <__mdiff+0x5c>
 80067ee:	4b2e      	ldr	r3, [pc, #184]	; (80068a8 <__mdiff+0x10c>)
 80067f0:	4602      	mov	r2, r0
 80067f2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80067f6:	e7e5      	b.n	80067c4 <__mdiff+0x28>
 80067f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80067fc:	6926      	ldr	r6, [r4, #16]
 80067fe:	60c5      	str	r5, [r0, #12]
 8006800:	f104 0914 	add.w	r9, r4, #20
 8006804:	f108 0514 	add.w	r5, r8, #20
 8006808:	f100 0e14 	add.w	lr, r0, #20
 800680c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006810:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006814:	f108 0210 	add.w	r2, r8, #16
 8006818:	46f2      	mov	sl, lr
 800681a:	2100      	movs	r1, #0
 800681c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006820:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006824:	fa1f f883 	uxth.w	r8, r3
 8006828:	fa11 f18b 	uxtah	r1, r1, fp
 800682c:	0c1b      	lsrs	r3, r3, #16
 800682e:	eba1 0808 	sub.w	r8, r1, r8
 8006832:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006836:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800683a:	fa1f f888 	uxth.w	r8, r8
 800683e:	1419      	asrs	r1, r3, #16
 8006840:	454e      	cmp	r6, r9
 8006842:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006846:	f84a 3b04 	str.w	r3, [sl], #4
 800684a:	d8e7      	bhi.n	800681c <__mdiff+0x80>
 800684c:	1b33      	subs	r3, r6, r4
 800684e:	3b15      	subs	r3, #21
 8006850:	f023 0303 	bic.w	r3, r3, #3
 8006854:	3304      	adds	r3, #4
 8006856:	3415      	adds	r4, #21
 8006858:	42a6      	cmp	r6, r4
 800685a:	bf38      	it	cc
 800685c:	2304      	movcc	r3, #4
 800685e:	441d      	add	r5, r3
 8006860:	4473      	add	r3, lr
 8006862:	469e      	mov	lr, r3
 8006864:	462e      	mov	r6, r5
 8006866:	4566      	cmp	r6, ip
 8006868:	d30e      	bcc.n	8006888 <__mdiff+0xec>
 800686a:	f10c 0203 	add.w	r2, ip, #3
 800686e:	1b52      	subs	r2, r2, r5
 8006870:	f022 0203 	bic.w	r2, r2, #3
 8006874:	3d03      	subs	r5, #3
 8006876:	45ac      	cmp	ip, r5
 8006878:	bf38      	it	cc
 800687a:	2200      	movcc	r2, #0
 800687c:	441a      	add	r2, r3
 800687e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006882:	b17b      	cbz	r3, 80068a4 <__mdiff+0x108>
 8006884:	6107      	str	r7, [r0, #16]
 8006886:	e7a3      	b.n	80067d0 <__mdiff+0x34>
 8006888:	f856 8b04 	ldr.w	r8, [r6], #4
 800688c:	fa11 f288 	uxtah	r2, r1, r8
 8006890:	1414      	asrs	r4, r2, #16
 8006892:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006896:	b292      	uxth	r2, r2
 8006898:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800689c:	f84e 2b04 	str.w	r2, [lr], #4
 80068a0:	1421      	asrs	r1, r4, #16
 80068a2:	e7e0      	b.n	8006866 <__mdiff+0xca>
 80068a4:	3f01      	subs	r7, #1
 80068a6:	e7ea      	b.n	800687e <__mdiff+0xe2>
 80068a8:	08007ae3 	.word	0x08007ae3
 80068ac:	08007af4 	.word	0x08007af4

080068b0 <__d2b>:
 80068b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80068b4:	4689      	mov	r9, r1
 80068b6:	2101      	movs	r1, #1
 80068b8:	ec57 6b10 	vmov	r6, r7, d0
 80068bc:	4690      	mov	r8, r2
 80068be:	f7ff fccf 	bl	8006260 <_Balloc>
 80068c2:	4604      	mov	r4, r0
 80068c4:	b930      	cbnz	r0, 80068d4 <__d2b+0x24>
 80068c6:	4602      	mov	r2, r0
 80068c8:	4b25      	ldr	r3, [pc, #148]	; (8006960 <__d2b+0xb0>)
 80068ca:	4826      	ldr	r0, [pc, #152]	; (8006964 <__d2b+0xb4>)
 80068cc:	f240 310a 	movw	r1, #778	; 0x30a
 80068d0:	f000 faac 	bl	8006e2c <__assert_func>
 80068d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80068d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80068dc:	bb35      	cbnz	r5, 800692c <__d2b+0x7c>
 80068de:	2e00      	cmp	r6, #0
 80068e0:	9301      	str	r3, [sp, #4]
 80068e2:	d028      	beq.n	8006936 <__d2b+0x86>
 80068e4:	4668      	mov	r0, sp
 80068e6:	9600      	str	r6, [sp, #0]
 80068e8:	f7ff fd82 	bl	80063f0 <__lo0bits>
 80068ec:	9900      	ldr	r1, [sp, #0]
 80068ee:	b300      	cbz	r0, 8006932 <__d2b+0x82>
 80068f0:	9a01      	ldr	r2, [sp, #4]
 80068f2:	f1c0 0320 	rsb	r3, r0, #32
 80068f6:	fa02 f303 	lsl.w	r3, r2, r3
 80068fa:	430b      	orrs	r3, r1
 80068fc:	40c2      	lsrs	r2, r0
 80068fe:	6163      	str	r3, [r4, #20]
 8006900:	9201      	str	r2, [sp, #4]
 8006902:	9b01      	ldr	r3, [sp, #4]
 8006904:	61a3      	str	r3, [r4, #24]
 8006906:	2b00      	cmp	r3, #0
 8006908:	bf14      	ite	ne
 800690a:	2202      	movne	r2, #2
 800690c:	2201      	moveq	r2, #1
 800690e:	6122      	str	r2, [r4, #16]
 8006910:	b1d5      	cbz	r5, 8006948 <__d2b+0x98>
 8006912:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006916:	4405      	add	r5, r0
 8006918:	f8c9 5000 	str.w	r5, [r9]
 800691c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006920:	f8c8 0000 	str.w	r0, [r8]
 8006924:	4620      	mov	r0, r4
 8006926:	b003      	add	sp, #12
 8006928:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800692c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006930:	e7d5      	b.n	80068de <__d2b+0x2e>
 8006932:	6161      	str	r1, [r4, #20]
 8006934:	e7e5      	b.n	8006902 <__d2b+0x52>
 8006936:	a801      	add	r0, sp, #4
 8006938:	f7ff fd5a 	bl	80063f0 <__lo0bits>
 800693c:	9b01      	ldr	r3, [sp, #4]
 800693e:	6163      	str	r3, [r4, #20]
 8006940:	2201      	movs	r2, #1
 8006942:	6122      	str	r2, [r4, #16]
 8006944:	3020      	adds	r0, #32
 8006946:	e7e3      	b.n	8006910 <__d2b+0x60>
 8006948:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800694c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006950:	f8c9 0000 	str.w	r0, [r9]
 8006954:	6918      	ldr	r0, [r3, #16]
 8006956:	f7ff fd2b 	bl	80063b0 <__hi0bits>
 800695a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800695e:	e7df      	b.n	8006920 <__d2b+0x70>
 8006960:	08007ae3 	.word	0x08007ae3
 8006964:	08007af4 	.word	0x08007af4

08006968 <_calloc_r>:
 8006968:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800696a:	fba1 2402 	umull	r2, r4, r1, r2
 800696e:	b94c      	cbnz	r4, 8006984 <_calloc_r+0x1c>
 8006970:	4611      	mov	r1, r2
 8006972:	9201      	str	r2, [sp, #4]
 8006974:	f000 f87a 	bl	8006a6c <_malloc_r>
 8006978:	9a01      	ldr	r2, [sp, #4]
 800697a:	4605      	mov	r5, r0
 800697c:	b930      	cbnz	r0, 800698c <_calloc_r+0x24>
 800697e:	4628      	mov	r0, r5
 8006980:	b003      	add	sp, #12
 8006982:	bd30      	pop	{r4, r5, pc}
 8006984:	220c      	movs	r2, #12
 8006986:	6002      	str	r2, [r0, #0]
 8006988:	2500      	movs	r5, #0
 800698a:	e7f8      	b.n	800697e <_calloc_r+0x16>
 800698c:	4621      	mov	r1, r4
 800698e:	f7fe f93f 	bl	8004c10 <memset>
 8006992:	e7f4      	b.n	800697e <_calloc_r+0x16>

08006994 <_free_r>:
 8006994:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006996:	2900      	cmp	r1, #0
 8006998:	d044      	beq.n	8006a24 <_free_r+0x90>
 800699a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800699e:	9001      	str	r0, [sp, #4]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f1a1 0404 	sub.w	r4, r1, #4
 80069a6:	bfb8      	it	lt
 80069a8:	18e4      	addlt	r4, r4, r3
 80069aa:	f000 fa9b 	bl	8006ee4 <__malloc_lock>
 80069ae:	4a1e      	ldr	r2, [pc, #120]	; (8006a28 <_free_r+0x94>)
 80069b0:	9801      	ldr	r0, [sp, #4]
 80069b2:	6813      	ldr	r3, [r2, #0]
 80069b4:	b933      	cbnz	r3, 80069c4 <_free_r+0x30>
 80069b6:	6063      	str	r3, [r4, #4]
 80069b8:	6014      	str	r4, [r2, #0]
 80069ba:	b003      	add	sp, #12
 80069bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80069c0:	f000 ba96 	b.w	8006ef0 <__malloc_unlock>
 80069c4:	42a3      	cmp	r3, r4
 80069c6:	d908      	bls.n	80069da <_free_r+0x46>
 80069c8:	6825      	ldr	r5, [r4, #0]
 80069ca:	1961      	adds	r1, r4, r5
 80069cc:	428b      	cmp	r3, r1
 80069ce:	bf01      	itttt	eq
 80069d0:	6819      	ldreq	r1, [r3, #0]
 80069d2:	685b      	ldreq	r3, [r3, #4]
 80069d4:	1949      	addeq	r1, r1, r5
 80069d6:	6021      	streq	r1, [r4, #0]
 80069d8:	e7ed      	b.n	80069b6 <_free_r+0x22>
 80069da:	461a      	mov	r2, r3
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	b10b      	cbz	r3, 80069e4 <_free_r+0x50>
 80069e0:	42a3      	cmp	r3, r4
 80069e2:	d9fa      	bls.n	80069da <_free_r+0x46>
 80069e4:	6811      	ldr	r1, [r2, #0]
 80069e6:	1855      	adds	r5, r2, r1
 80069e8:	42a5      	cmp	r5, r4
 80069ea:	d10b      	bne.n	8006a04 <_free_r+0x70>
 80069ec:	6824      	ldr	r4, [r4, #0]
 80069ee:	4421      	add	r1, r4
 80069f0:	1854      	adds	r4, r2, r1
 80069f2:	42a3      	cmp	r3, r4
 80069f4:	6011      	str	r1, [r2, #0]
 80069f6:	d1e0      	bne.n	80069ba <_free_r+0x26>
 80069f8:	681c      	ldr	r4, [r3, #0]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	6053      	str	r3, [r2, #4]
 80069fe:	4421      	add	r1, r4
 8006a00:	6011      	str	r1, [r2, #0]
 8006a02:	e7da      	b.n	80069ba <_free_r+0x26>
 8006a04:	d902      	bls.n	8006a0c <_free_r+0x78>
 8006a06:	230c      	movs	r3, #12
 8006a08:	6003      	str	r3, [r0, #0]
 8006a0a:	e7d6      	b.n	80069ba <_free_r+0x26>
 8006a0c:	6825      	ldr	r5, [r4, #0]
 8006a0e:	1961      	adds	r1, r4, r5
 8006a10:	428b      	cmp	r3, r1
 8006a12:	bf04      	itt	eq
 8006a14:	6819      	ldreq	r1, [r3, #0]
 8006a16:	685b      	ldreq	r3, [r3, #4]
 8006a18:	6063      	str	r3, [r4, #4]
 8006a1a:	bf04      	itt	eq
 8006a1c:	1949      	addeq	r1, r1, r5
 8006a1e:	6021      	streq	r1, [r4, #0]
 8006a20:	6054      	str	r4, [r2, #4]
 8006a22:	e7ca      	b.n	80069ba <_free_r+0x26>
 8006a24:	b003      	add	sp, #12
 8006a26:	bd30      	pop	{r4, r5, pc}
 8006a28:	200002f0 	.word	0x200002f0

08006a2c <sbrk_aligned>:
 8006a2c:	b570      	push	{r4, r5, r6, lr}
 8006a2e:	4e0e      	ldr	r6, [pc, #56]	; (8006a68 <sbrk_aligned+0x3c>)
 8006a30:	460c      	mov	r4, r1
 8006a32:	6831      	ldr	r1, [r6, #0]
 8006a34:	4605      	mov	r5, r0
 8006a36:	b911      	cbnz	r1, 8006a3e <sbrk_aligned+0x12>
 8006a38:	f000 f9e8 	bl	8006e0c <_sbrk_r>
 8006a3c:	6030      	str	r0, [r6, #0]
 8006a3e:	4621      	mov	r1, r4
 8006a40:	4628      	mov	r0, r5
 8006a42:	f000 f9e3 	bl	8006e0c <_sbrk_r>
 8006a46:	1c43      	adds	r3, r0, #1
 8006a48:	d00a      	beq.n	8006a60 <sbrk_aligned+0x34>
 8006a4a:	1cc4      	adds	r4, r0, #3
 8006a4c:	f024 0403 	bic.w	r4, r4, #3
 8006a50:	42a0      	cmp	r0, r4
 8006a52:	d007      	beq.n	8006a64 <sbrk_aligned+0x38>
 8006a54:	1a21      	subs	r1, r4, r0
 8006a56:	4628      	mov	r0, r5
 8006a58:	f000 f9d8 	bl	8006e0c <_sbrk_r>
 8006a5c:	3001      	adds	r0, #1
 8006a5e:	d101      	bne.n	8006a64 <sbrk_aligned+0x38>
 8006a60:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006a64:	4620      	mov	r0, r4
 8006a66:	bd70      	pop	{r4, r5, r6, pc}
 8006a68:	200002f4 	.word	0x200002f4

08006a6c <_malloc_r>:
 8006a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a70:	1ccd      	adds	r5, r1, #3
 8006a72:	f025 0503 	bic.w	r5, r5, #3
 8006a76:	3508      	adds	r5, #8
 8006a78:	2d0c      	cmp	r5, #12
 8006a7a:	bf38      	it	cc
 8006a7c:	250c      	movcc	r5, #12
 8006a7e:	2d00      	cmp	r5, #0
 8006a80:	4607      	mov	r7, r0
 8006a82:	db01      	blt.n	8006a88 <_malloc_r+0x1c>
 8006a84:	42a9      	cmp	r1, r5
 8006a86:	d905      	bls.n	8006a94 <_malloc_r+0x28>
 8006a88:	230c      	movs	r3, #12
 8006a8a:	603b      	str	r3, [r7, #0]
 8006a8c:	2600      	movs	r6, #0
 8006a8e:	4630      	mov	r0, r6
 8006a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a94:	4e2e      	ldr	r6, [pc, #184]	; (8006b50 <_malloc_r+0xe4>)
 8006a96:	f000 fa25 	bl	8006ee4 <__malloc_lock>
 8006a9a:	6833      	ldr	r3, [r6, #0]
 8006a9c:	461c      	mov	r4, r3
 8006a9e:	bb34      	cbnz	r4, 8006aee <_malloc_r+0x82>
 8006aa0:	4629      	mov	r1, r5
 8006aa2:	4638      	mov	r0, r7
 8006aa4:	f7ff ffc2 	bl	8006a2c <sbrk_aligned>
 8006aa8:	1c43      	adds	r3, r0, #1
 8006aaa:	4604      	mov	r4, r0
 8006aac:	d14d      	bne.n	8006b4a <_malloc_r+0xde>
 8006aae:	6834      	ldr	r4, [r6, #0]
 8006ab0:	4626      	mov	r6, r4
 8006ab2:	2e00      	cmp	r6, #0
 8006ab4:	d140      	bne.n	8006b38 <_malloc_r+0xcc>
 8006ab6:	6823      	ldr	r3, [r4, #0]
 8006ab8:	4631      	mov	r1, r6
 8006aba:	4638      	mov	r0, r7
 8006abc:	eb04 0803 	add.w	r8, r4, r3
 8006ac0:	f000 f9a4 	bl	8006e0c <_sbrk_r>
 8006ac4:	4580      	cmp	r8, r0
 8006ac6:	d13a      	bne.n	8006b3e <_malloc_r+0xd2>
 8006ac8:	6821      	ldr	r1, [r4, #0]
 8006aca:	3503      	adds	r5, #3
 8006acc:	1a6d      	subs	r5, r5, r1
 8006ace:	f025 0503 	bic.w	r5, r5, #3
 8006ad2:	3508      	adds	r5, #8
 8006ad4:	2d0c      	cmp	r5, #12
 8006ad6:	bf38      	it	cc
 8006ad8:	250c      	movcc	r5, #12
 8006ada:	4629      	mov	r1, r5
 8006adc:	4638      	mov	r0, r7
 8006ade:	f7ff ffa5 	bl	8006a2c <sbrk_aligned>
 8006ae2:	3001      	adds	r0, #1
 8006ae4:	d02b      	beq.n	8006b3e <_malloc_r+0xd2>
 8006ae6:	6823      	ldr	r3, [r4, #0]
 8006ae8:	442b      	add	r3, r5
 8006aea:	6023      	str	r3, [r4, #0]
 8006aec:	e00e      	b.n	8006b0c <_malloc_r+0xa0>
 8006aee:	6822      	ldr	r2, [r4, #0]
 8006af0:	1b52      	subs	r2, r2, r5
 8006af2:	d41e      	bmi.n	8006b32 <_malloc_r+0xc6>
 8006af4:	2a0b      	cmp	r2, #11
 8006af6:	d916      	bls.n	8006b26 <_malloc_r+0xba>
 8006af8:	1961      	adds	r1, r4, r5
 8006afa:	42a3      	cmp	r3, r4
 8006afc:	6025      	str	r5, [r4, #0]
 8006afe:	bf18      	it	ne
 8006b00:	6059      	strne	r1, [r3, #4]
 8006b02:	6863      	ldr	r3, [r4, #4]
 8006b04:	bf08      	it	eq
 8006b06:	6031      	streq	r1, [r6, #0]
 8006b08:	5162      	str	r2, [r4, r5]
 8006b0a:	604b      	str	r3, [r1, #4]
 8006b0c:	4638      	mov	r0, r7
 8006b0e:	f104 060b 	add.w	r6, r4, #11
 8006b12:	f000 f9ed 	bl	8006ef0 <__malloc_unlock>
 8006b16:	f026 0607 	bic.w	r6, r6, #7
 8006b1a:	1d23      	adds	r3, r4, #4
 8006b1c:	1af2      	subs	r2, r6, r3
 8006b1e:	d0b6      	beq.n	8006a8e <_malloc_r+0x22>
 8006b20:	1b9b      	subs	r3, r3, r6
 8006b22:	50a3      	str	r3, [r4, r2]
 8006b24:	e7b3      	b.n	8006a8e <_malloc_r+0x22>
 8006b26:	6862      	ldr	r2, [r4, #4]
 8006b28:	42a3      	cmp	r3, r4
 8006b2a:	bf0c      	ite	eq
 8006b2c:	6032      	streq	r2, [r6, #0]
 8006b2e:	605a      	strne	r2, [r3, #4]
 8006b30:	e7ec      	b.n	8006b0c <_malloc_r+0xa0>
 8006b32:	4623      	mov	r3, r4
 8006b34:	6864      	ldr	r4, [r4, #4]
 8006b36:	e7b2      	b.n	8006a9e <_malloc_r+0x32>
 8006b38:	4634      	mov	r4, r6
 8006b3a:	6876      	ldr	r6, [r6, #4]
 8006b3c:	e7b9      	b.n	8006ab2 <_malloc_r+0x46>
 8006b3e:	230c      	movs	r3, #12
 8006b40:	603b      	str	r3, [r7, #0]
 8006b42:	4638      	mov	r0, r7
 8006b44:	f000 f9d4 	bl	8006ef0 <__malloc_unlock>
 8006b48:	e7a1      	b.n	8006a8e <_malloc_r+0x22>
 8006b4a:	6025      	str	r5, [r4, #0]
 8006b4c:	e7de      	b.n	8006b0c <_malloc_r+0xa0>
 8006b4e:	bf00      	nop
 8006b50:	200002f0 	.word	0x200002f0

08006b54 <__ssputs_r>:
 8006b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b58:	688e      	ldr	r6, [r1, #8]
 8006b5a:	429e      	cmp	r6, r3
 8006b5c:	4682      	mov	sl, r0
 8006b5e:	460c      	mov	r4, r1
 8006b60:	4690      	mov	r8, r2
 8006b62:	461f      	mov	r7, r3
 8006b64:	d838      	bhi.n	8006bd8 <__ssputs_r+0x84>
 8006b66:	898a      	ldrh	r2, [r1, #12]
 8006b68:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b6c:	d032      	beq.n	8006bd4 <__ssputs_r+0x80>
 8006b6e:	6825      	ldr	r5, [r4, #0]
 8006b70:	6909      	ldr	r1, [r1, #16]
 8006b72:	eba5 0901 	sub.w	r9, r5, r1
 8006b76:	6965      	ldr	r5, [r4, #20]
 8006b78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b7c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b80:	3301      	adds	r3, #1
 8006b82:	444b      	add	r3, r9
 8006b84:	106d      	asrs	r5, r5, #1
 8006b86:	429d      	cmp	r5, r3
 8006b88:	bf38      	it	cc
 8006b8a:	461d      	movcc	r5, r3
 8006b8c:	0553      	lsls	r3, r2, #21
 8006b8e:	d531      	bpl.n	8006bf4 <__ssputs_r+0xa0>
 8006b90:	4629      	mov	r1, r5
 8006b92:	f7ff ff6b 	bl	8006a6c <_malloc_r>
 8006b96:	4606      	mov	r6, r0
 8006b98:	b950      	cbnz	r0, 8006bb0 <__ssputs_r+0x5c>
 8006b9a:	230c      	movs	r3, #12
 8006b9c:	f8ca 3000 	str.w	r3, [sl]
 8006ba0:	89a3      	ldrh	r3, [r4, #12]
 8006ba2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ba6:	81a3      	strh	r3, [r4, #12]
 8006ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bb0:	6921      	ldr	r1, [r4, #16]
 8006bb2:	464a      	mov	r2, r9
 8006bb4:	f7ff fb46 	bl	8006244 <memcpy>
 8006bb8:	89a3      	ldrh	r3, [r4, #12]
 8006bba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bc2:	81a3      	strh	r3, [r4, #12]
 8006bc4:	6126      	str	r6, [r4, #16]
 8006bc6:	6165      	str	r5, [r4, #20]
 8006bc8:	444e      	add	r6, r9
 8006bca:	eba5 0509 	sub.w	r5, r5, r9
 8006bce:	6026      	str	r6, [r4, #0]
 8006bd0:	60a5      	str	r5, [r4, #8]
 8006bd2:	463e      	mov	r6, r7
 8006bd4:	42be      	cmp	r6, r7
 8006bd6:	d900      	bls.n	8006bda <__ssputs_r+0x86>
 8006bd8:	463e      	mov	r6, r7
 8006bda:	6820      	ldr	r0, [r4, #0]
 8006bdc:	4632      	mov	r2, r6
 8006bde:	4641      	mov	r1, r8
 8006be0:	f000 f966 	bl	8006eb0 <memmove>
 8006be4:	68a3      	ldr	r3, [r4, #8]
 8006be6:	1b9b      	subs	r3, r3, r6
 8006be8:	60a3      	str	r3, [r4, #8]
 8006bea:	6823      	ldr	r3, [r4, #0]
 8006bec:	4433      	add	r3, r6
 8006bee:	6023      	str	r3, [r4, #0]
 8006bf0:	2000      	movs	r0, #0
 8006bf2:	e7db      	b.n	8006bac <__ssputs_r+0x58>
 8006bf4:	462a      	mov	r2, r5
 8006bf6:	f000 f981 	bl	8006efc <_realloc_r>
 8006bfa:	4606      	mov	r6, r0
 8006bfc:	2800      	cmp	r0, #0
 8006bfe:	d1e1      	bne.n	8006bc4 <__ssputs_r+0x70>
 8006c00:	6921      	ldr	r1, [r4, #16]
 8006c02:	4650      	mov	r0, sl
 8006c04:	f7ff fec6 	bl	8006994 <_free_r>
 8006c08:	e7c7      	b.n	8006b9a <__ssputs_r+0x46>
	...

08006c0c <_svfiprintf_r>:
 8006c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c10:	4698      	mov	r8, r3
 8006c12:	898b      	ldrh	r3, [r1, #12]
 8006c14:	061b      	lsls	r3, r3, #24
 8006c16:	b09d      	sub	sp, #116	; 0x74
 8006c18:	4607      	mov	r7, r0
 8006c1a:	460d      	mov	r5, r1
 8006c1c:	4614      	mov	r4, r2
 8006c1e:	d50e      	bpl.n	8006c3e <_svfiprintf_r+0x32>
 8006c20:	690b      	ldr	r3, [r1, #16]
 8006c22:	b963      	cbnz	r3, 8006c3e <_svfiprintf_r+0x32>
 8006c24:	2140      	movs	r1, #64	; 0x40
 8006c26:	f7ff ff21 	bl	8006a6c <_malloc_r>
 8006c2a:	6028      	str	r0, [r5, #0]
 8006c2c:	6128      	str	r0, [r5, #16]
 8006c2e:	b920      	cbnz	r0, 8006c3a <_svfiprintf_r+0x2e>
 8006c30:	230c      	movs	r3, #12
 8006c32:	603b      	str	r3, [r7, #0]
 8006c34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c38:	e0d1      	b.n	8006dde <_svfiprintf_r+0x1d2>
 8006c3a:	2340      	movs	r3, #64	; 0x40
 8006c3c:	616b      	str	r3, [r5, #20]
 8006c3e:	2300      	movs	r3, #0
 8006c40:	9309      	str	r3, [sp, #36]	; 0x24
 8006c42:	2320      	movs	r3, #32
 8006c44:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c48:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c4c:	2330      	movs	r3, #48	; 0x30
 8006c4e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006df8 <_svfiprintf_r+0x1ec>
 8006c52:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c56:	f04f 0901 	mov.w	r9, #1
 8006c5a:	4623      	mov	r3, r4
 8006c5c:	469a      	mov	sl, r3
 8006c5e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c62:	b10a      	cbz	r2, 8006c68 <_svfiprintf_r+0x5c>
 8006c64:	2a25      	cmp	r2, #37	; 0x25
 8006c66:	d1f9      	bne.n	8006c5c <_svfiprintf_r+0x50>
 8006c68:	ebba 0b04 	subs.w	fp, sl, r4
 8006c6c:	d00b      	beq.n	8006c86 <_svfiprintf_r+0x7a>
 8006c6e:	465b      	mov	r3, fp
 8006c70:	4622      	mov	r2, r4
 8006c72:	4629      	mov	r1, r5
 8006c74:	4638      	mov	r0, r7
 8006c76:	f7ff ff6d 	bl	8006b54 <__ssputs_r>
 8006c7a:	3001      	adds	r0, #1
 8006c7c:	f000 80aa 	beq.w	8006dd4 <_svfiprintf_r+0x1c8>
 8006c80:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c82:	445a      	add	r2, fp
 8006c84:	9209      	str	r2, [sp, #36]	; 0x24
 8006c86:	f89a 3000 	ldrb.w	r3, [sl]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	f000 80a2 	beq.w	8006dd4 <_svfiprintf_r+0x1c8>
 8006c90:	2300      	movs	r3, #0
 8006c92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c96:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c9a:	f10a 0a01 	add.w	sl, sl, #1
 8006c9e:	9304      	str	r3, [sp, #16]
 8006ca0:	9307      	str	r3, [sp, #28]
 8006ca2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ca6:	931a      	str	r3, [sp, #104]	; 0x68
 8006ca8:	4654      	mov	r4, sl
 8006caa:	2205      	movs	r2, #5
 8006cac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cb0:	4851      	ldr	r0, [pc, #324]	; (8006df8 <_svfiprintf_r+0x1ec>)
 8006cb2:	f7f9 fab5 	bl	8000220 <memchr>
 8006cb6:	9a04      	ldr	r2, [sp, #16]
 8006cb8:	b9d8      	cbnz	r0, 8006cf2 <_svfiprintf_r+0xe6>
 8006cba:	06d0      	lsls	r0, r2, #27
 8006cbc:	bf44      	itt	mi
 8006cbe:	2320      	movmi	r3, #32
 8006cc0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cc4:	0711      	lsls	r1, r2, #28
 8006cc6:	bf44      	itt	mi
 8006cc8:	232b      	movmi	r3, #43	; 0x2b
 8006cca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cce:	f89a 3000 	ldrb.w	r3, [sl]
 8006cd2:	2b2a      	cmp	r3, #42	; 0x2a
 8006cd4:	d015      	beq.n	8006d02 <_svfiprintf_r+0xf6>
 8006cd6:	9a07      	ldr	r2, [sp, #28]
 8006cd8:	4654      	mov	r4, sl
 8006cda:	2000      	movs	r0, #0
 8006cdc:	f04f 0c0a 	mov.w	ip, #10
 8006ce0:	4621      	mov	r1, r4
 8006ce2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ce6:	3b30      	subs	r3, #48	; 0x30
 8006ce8:	2b09      	cmp	r3, #9
 8006cea:	d94e      	bls.n	8006d8a <_svfiprintf_r+0x17e>
 8006cec:	b1b0      	cbz	r0, 8006d1c <_svfiprintf_r+0x110>
 8006cee:	9207      	str	r2, [sp, #28]
 8006cf0:	e014      	b.n	8006d1c <_svfiprintf_r+0x110>
 8006cf2:	eba0 0308 	sub.w	r3, r0, r8
 8006cf6:	fa09 f303 	lsl.w	r3, r9, r3
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	9304      	str	r3, [sp, #16]
 8006cfe:	46a2      	mov	sl, r4
 8006d00:	e7d2      	b.n	8006ca8 <_svfiprintf_r+0x9c>
 8006d02:	9b03      	ldr	r3, [sp, #12]
 8006d04:	1d19      	adds	r1, r3, #4
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	9103      	str	r1, [sp, #12]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	bfbb      	ittet	lt
 8006d0e:	425b      	neglt	r3, r3
 8006d10:	f042 0202 	orrlt.w	r2, r2, #2
 8006d14:	9307      	strge	r3, [sp, #28]
 8006d16:	9307      	strlt	r3, [sp, #28]
 8006d18:	bfb8      	it	lt
 8006d1a:	9204      	strlt	r2, [sp, #16]
 8006d1c:	7823      	ldrb	r3, [r4, #0]
 8006d1e:	2b2e      	cmp	r3, #46	; 0x2e
 8006d20:	d10c      	bne.n	8006d3c <_svfiprintf_r+0x130>
 8006d22:	7863      	ldrb	r3, [r4, #1]
 8006d24:	2b2a      	cmp	r3, #42	; 0x2a
 8006d26:	d135      	bne.n	8006d94 <_svfiprintf_r+0x188>
 8006d28:	9b03      	ldr	r3, [sp, #12]
 8006d2a:	1d1a      	adds	r2, r3, #4
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	9203      	str	r2, [sp, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	bfb8      	it	lt
 8006d34:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006d38:	3402      	adds	r4, #2
 8006d3a:	9305      	str	r3, [sp, #20]
 8006d3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006e08 <_svfiprintf_r+0x1fc>
 8006d40:	7821      	ldrb	r1, [r4, #0]
 8006d42:	2203      	movs	r2, #3
 8006d44:	4650      	mov	r0, sl
 8006d46:	f7f9 fa6b 	bl	8000220 <memchr>
 8006d4a:	b140      	cbz	r0, 8006d5e <_svfiprintf_r+0x152>
 8006d4c:	2340      	movs	r3, #64	; 0x40
 8006d4e:	eba0 000a 	sub.w	r0, r0, sl
 8006d52:	fa03 f000 	lsl.w	r0, r3, r0
 8006d56:	9b04      	ldr	r3, [sp, #16]
 8006d58:	4303      	orrs	r3, r0
 8006d5a:	3401      	adds	r4, #1
 8006d5c:	9304      	str	r3, [sp, #16]
 8006d5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d62:	4826      	ldr	r0, [pc, #152]	; (8006dfc <_svfiprintf_r+0x1f0>)
 8006d64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d68:	2206      	movs	r2, #6
 8006d6a:	f7f9 fa59 	bl	8000220 <memchr>
 8006d6e:	2800      	cmp	r0, #0
 8006d70:	d038      	beq.n	8006de4 <_svfiprintf_r+0x1d8>
 8006d72:	4b23      	ldr	r3, [pc, #140]	; (8006e00 <_svfiprintf_r+0x1f4>)
 8006d74:	bb1b      	cbnz	r3, 8006dbe <_svfiprintf_r+0x1b2>
 8006d76:	9b03      	ldr	r3, [sp, #12]
 8006d78:	3307      	adds	r3, #7
 8006d7a:	f023 0307 	bic.w	r3, r3, #7
 8006d7e:	3308      	adds	r3, #8
 8006d80:	9303      	str	r3, [sp, #12]
 8006d82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d84:	4433      	add	r3, r6
 8006d86:	9309      	str	r3, [sp, #36]	; 0x24
 8006d88:	e767      	b.n	8006c5a <_svfiprintf_r+0x4e>
 8006d8a:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d8e:	460c      	mov	r4, r1
 8006d90:	2001      	movs	r0, #1
 8006d92:	e7a5      	b.n	8006ce0 <_svfiprintf_r+0xd4>
 8006d94:	2300      	movs	r3, #0
 8006d96:	3401      	adds	r4, #1
 8006d98:	9305      	str	r3, [sp, #20]
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	f04f 0c0a 	mov.w	ip, #10
 8006da0:	4620      	mov	r0, r4
 8006da2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006da6:	3a30      	subs	r2, #48	; 0x30
 8006da8:	2a09      	cmp	r2, #9
 8006daa:	d903      	bls.n	8006db4 <_svfiprintf_r+0x1a8>
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d0c5      	beq.n	8006d3c <_svfiprintf_r+0x130>
 8006db0:	9105      	str	r1, [sp, #20]
 8006db2:	e7c3      	b.n	8006d3c <_svfiprintf_r+0x130>
 8006db4:	fb0c 2101 	mla	r1, ip, r1, r2
 8006db8:	4604      	mov	r4, r0
 8006dba:	2301      	movs	r3, #1
 8006dbc:	e7f0      	b.n	8006da0 <_svfiprintf_r+0x194>
 8006dbe:	ab03      	add	r3, sp, #12
 8006dc0:	9300      	str	r3, [sp, #0]
 8006dc2:	462a      	mov	r2, r5
 8006dc4:	4b0f      	ldr	r3, [pc, #60]	; (8006e04 <_svfiprintf_r+0x1f8>)
 8006dc6:	a904      	add	r1, sp, #16
 8006dc8:	4638      	mov	r0, r7
 8006dca:	f7fd ffc9 	bl	8004d60 <_printf_float>
 8006dce:	1c42      	adds	r2, r0, #1
 8006dd0:	4606      	mov	r6, r0
 8006dd2:	d1d6      	bne.n	8006d82 <_svfiprintf_r+0x176>
 8006dd4:	89ab      	ldrh	r3, [r5, #12]
 8006dd6:	065b      	lsls	r3, r3, #25
 8006dd8:	f53f af2c 	bmi.w	8006c34 <_svfiprintf_r+0x28>
 8006ddc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dde:	b01d      	add	sp, #116	; 0x74
 8006de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006de4:	ab03      	add	r3, sp, #12
 8006de6:	9300      	str	r3, [sp, #0]
 8006de8:	462a      	mov	r2, r5
 8006dea:	4b06      	ldr	r3, [pc, #24]	; (8006e04 <_svfiprintf_r+0x1f8>)
 8006dec:	a904      	add	r1, sp, #16
 8006dee:	4638      	mov	r0, r7
 8006df0:	f7fe fa5a 	bl	80052a8 <_printf_i>
 8006df4:	e7eb      	b.n	8006dce <_svfiprintf_r+0x1c2>
 8006df6:	bf00      	nop
 8006df8:	08007c4c 	.word	0x08007c4c
 8006dfc:	08007c56 	.word	0x08007c56
 8006e00:	08004d61 	.word	0x08004d61
 8006e04:	08006b55 	.word	0x08006b55
 8006e08:	08007c52 	.word	0x08007c52

08006e0c <_sbrk_r>:
 8006e0c:	b538      	push	{r3, r4, r5, lr}
 8006e0e:	4d06      	ldr	r5, [pc, #24]	; (8006e28 <_sbrk_r+0x1c>)
 8006e10:	2300      	movs	r3, #0
 8006e12:	4604      	mov	r4, r0
 8006e14:	4608      	mov	r0, r1
 8006e16:	602b      	str	r3, [r5, #0]
 8006e18:	f7fa fcfc 	bl	8001814 <_sbrk>
 8006e1c:	1c43      	adds	r3, r0, #1
 8006e1e:	d102      	bne.n	8006e26 <_sbrk_r+0x1a>
 8006e20:	682b      	ldr	r3, [r5, #0]
 8006e22:	b103      	cbz	r3, 8006e26 <_sbrk_r+0x1a>
 8006e24:	6023      	str	r3, [r4, #0]
 8006e26:	bd38      	pop	{r3, r4, r5, pc}
 8006e28:	200002f8 	.word	0x200002f8

08006e2c <__assert_func>:
 8006e2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006e2e:	4614      	mov	r4, r2
 8006e30:	461a      	mov	r2, r3
 8006e32:	4b09      	ldr	r3, [pc, #36]	; (8006e58 <__assert_func+0x2c>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	4605      	mov	r5, r0
 8006e38:	68d8      	ldr	r0, [r3, #12]
 8006e3a:	b14c      	cbz	r4, 8006e50 <__assert_func+0x24>
 8006e3c:	4b07      	ldr	r3, [pc, #28]	; (8006e5c <__assert_func+0x30>)
 8006e3e:	9100      	str	r1, [sp, #0]
 8006e40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006e44:	4906      	ldr	r1, [pc, #24]	; (8006e60 <__assert_func+0x34>)
 8006e46:	462b      	mov	r3, r5
 8006e48:	f000 f80e 	bl	8006e68 <fiprintf>
 8006e4c:	f000 faac 	bl	80073a8 <abort>
 8006e50:	4b04      	ldr	r3, [pc, #16]	; (8006e64 <__assert_func+0x38>)
 8006e52:	461c      	mov	r4, r3
 8006e54:	e7f3      	b.n	8006e3e <__assert_func+0x12>
 8006e56:	bf00      	nop
 8006e58:	20000010 	.word	0x20000010
 8006e5c:	08007c5d 	.word	0x08007c5d
 8006e60:	08007c6a 	.word	0x08007c6a
 8006e64:	08007c98 	.word	0x08007c98

08006e68 <fiprintf>:
 8006e68:	b40e      	push	{r1, r2, r3}
 8006e6a:	b503      	push	{r0, r1, lr}
 8006e6c:	4601      	mov	r1, r0
 8006e6e:	ab03      	add	r3, sp, #12
 8006e70:	4805      	ldr	r0, [pc, #20]	; (8006e88 <fiprintf+0x20>)
 8006e72:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e76:	6800      	ldr	r0, [r0, #0]
 8006e78:	9301      	str	r3, [sp, #4]
 8006e7a:	f000 f897 	bl	8006fac <_vfiprintf_r>
 8006e7e:	b002      	add	sp, #8
 8006e80:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e84:	b003      	add	sp, #12
 8006e86:	4770      	bx	lr
 8006e88:	20000010 	.word	0x20000010

08006e8c <__ascii_mbtowc>:
 8006e8c:	b082      	sub	sp, #8
 8006e8e:	b901      	cbnz	r1, 8006e92 <__ascii_mbtowc+0x6>
 8006e90:	a901      	add	r1, sp, #4
 8006e92:	b142      	cbz	r2, 8006ea6 <__ascii_mbtowc+0x1a>
 8006e94:	b14b      	cbz	r3, 8006eaa <__ascii_mbtowc+0x1e>
 8006e96:	7813      	ldrb	r3, [r2, #0]
 8006e98:	600b      	str	r3, [r1, #0]
 8006e9a:	7812      	ldrb	r2, [r2, #0]
 8006e9c:	1e10      	subs	r0, r2, #0
 8006e9e:	bf18      	it	ne
 8006ea0:	2001      	movne	r0, #1
 8006ea2:	b002      	add	sp, #8
 8006ea4:	4770      	bx	lr
 8006ea6:	4610      	mov	r0, r2
 8006ea8:	e7fb      	b.n	8006ea2 <__ascii_mbtowc+0x16>
 8006eaa:	f06f 0001 	mvn.w	r0, #1
 8006eae:	e7f8      	b.n	8006ea2 <__ascii_mbtowc+0x16>

08006eb0 <memmove>:
 8006eb0:	4288      	cmp	r0, r1
 8006eb2:	b510      	push	{r4, lr}
 8006eb4:	eb01 0402 	add.w	r4, r1, r2
 8006eb8:	d902      	bls.n	8006ec0 <memmove+0x10>
 8006eba:	4284      	cmp	r4, r0
 8006ebc:	4623      	mov	r3, r4
 8006ebe:	d807      	bhi.n	8006ed0 <memmove+0x20>
 8006ec0:	1e43      	subs	r3, r0, #1
 8006ec2:	42a1      	cmp	r1, r4
 8006ec4:	d008      	beq.n	8006ed8 <memmove+0x28>
 8006ec6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006eca:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006ece:	e7f8      	b.n	8006ec2 <memmove+0x12>
 8006ed0:	4402      	add	r2, r0
 8006ed2:	4601      	mov	r1, r0
 8006ed4:	428a      	cmp	r2, r1
 8006ed6:	d100      	bne.n	8006eda <memmove+0x2a>
 8006ed8:	bd10      	pop	{r4, pc}
 8006eda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006ede:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006ee2:	e7f7      	b.n	8006ed4 <memmove+0x24>

08006ee4 <__malloc_lock>:
 8006ee4:	4801      	ldr	r0, [pc, #4]	; (8006eec <__malloc_lock+0x8>)
 8006ee6:	f000 bc1f 	b.w	8007728 <__retarget_lock_acquire_recursive>
 8006eea:	bf00      	nop
 8006eec:	200002fc 	.word	0x200002fc

08006ef0 <__malloc_unlock>:
 8006ef0:	4801      	ldr	r0, [pc, #4]	; (8006ef8 <__malloc_unlock+0x8>)
 8006ef2:	f000 bc1a 	b.w	800772a <__retarget_lock_release_recursive>
 8006ef6:	bf00      	nop
 8006ef8:	200002fc 	.word	0x200002fc

08006efc <_realloc_r>:
 8006efc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f00:	4680      	mov	r8, r0
 8006f02:	4614      	mov	r4, r2
 8006f04:	460e      	mov	r6, r1
 8006f06:	b921      	cbnz	r1, 8006f12 <_realloc_r+0x16>
 8006f08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f0c:	4611      	mov	r1, r2
 8006f0e:	f7ff bdad 	b.w	8006a6c <_malloc_r>
 8006f12:	b92a      	cbnz	r2, 8006f20 <_realloc_r+0x24>
 8006f14:	f7ff fd3e 	bl	8006994 <_free_r>
 8006f18:	4625      	mov	r5, r4
 8006f1a:	4628      	mov	r0, r5
 8006f1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f20:	f000 fc6a 	bl	80077f8 <_malloc_usable_size_r>
 8006f24:	4284      	cmp	r4, r0
 8006f26:	4607      	mov	r7, r0
 8006f28:	d802      	bhi.n	8006f30 <_realloc_r+0x34>
 8006f2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006f2e:	d812      	bhi.n	8006f56 <_realloc_r+0x5a>
 8006f30:	4621      	mov	r1, r4
 8006f32:	4640      	mov	r0, r8
 8006f34:	f7ff fd9a 	bl	8006a6c <_malloc_r>
 8006f38:	4605      	mov	r5, r0
 8006f3a:	2800      	cmp	r0, #0
 8006f3c:	d0ed      	beq.n	8006f1a <_realloc_r+0x1e>
 8006f3e:	42bc      	cmp	r4, r7
 8006f40:	4622      	mov	r2, r4
 8006f42:	4631      	mov	r1, r6
 8006f44:	bf28      	it	cs
 8006f46:	463a      	movcs	r2, r7
 8006f48:	f7ff f97c 	bl	8006244 <memcpy>
 8006f4c:	4631      	mov	r1, r6
 8006f4e:	4640      	mov	r0, r8
 8006f50:	f7ff fd20 	bl	8006994 <_free_r>
 8006f54:	e7e1      	b.n	8006f1a <_realloc_r+0x1e>
 8006f56:	4635      	mov	r5, r6
 8006f58:	e7df      	b.n	8006f1a <_realloc_r+0x1e>

08006f5a <__sfputc_r>:
 8006f5a:	6893      	ldr	r3, [r2, #8]
 8006f5c:	3b01      	subs	r3, #1
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	b410      	push	{r4}
 8006f62:	6093      	str	r3, [r2, #8]
 8006f64:	da08      	bge.n	8006f78 <__sfputc_r+0x1e>
 8006f66:	6994      	ldr	r4, [r2, #24]
 8006f68:	42a3      	cmp	r3, r4
 8006f6a:	db01      	blt.n	8006f70 <__sfputc_r+0x16>
 8006f6c:	290a      	cmp	r1, #10
 8006f6e:	d103      	bne.n	8006f78 <__sfputc_r+0x1e>
 8006f70:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f74:	f000 b94a 	b.w	800720c <__swbuf_r>
 8006f78:	6813      	ldr	r3, [r2, #0]
 8006f7a:	1c58      	adds	r0, r3, #1
 8006f7c:	6010      	str	r0, [r2, #0]
 8006f7e:	7019      	strb	r1, [r3, #0]
 8006f80:	4608      	mov	r0, r1
 8006f82:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <__sfputs_r>:
 8006f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f8a:	4606      	mov	r6, r0
 8006f8c:	460f      	mov	r7, r1
 8006f8e:	4614      	mov	r4, r2
 8006f90:	18d5      	adds	r5, r2, r3
 8006f92:	42ac      	cmp	r4, r5
 8006f94:	d101      	bne.n	8006f9a <__sfputs_r+0x12>
 8006f96:	2000      	movs	r0, #0
 8006f98:	e007      	b.n	8006faa <__sfputs_r+0x22>
 8006f9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f9e:	463a      	mov	r2, r7
 8006fa0:	4630      	mov	r0, r6
 8006fa2:	f7ff ffda 	bl	8006f5a <__sfputc_r>
 8006fa6:	1c43      	adds	r3, r0, #1
 8006fa8:	d1f3      	bne.n	8006f92 <__sfputs_r+0xa>
 8006faa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006fac <_vfiprintf_r>:
 8006fac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fb0:	460d      	mov	r5, r1
 8006fb2:	b09d      	sub	sp, #116	; 0x74
 8006fb4:	4614      	mov	r4, r2
 8006fb6:	4698      	mov	r8, r3
 8006fb8:	4606      	mov	r6, r0
 8006fba:	b118      	cbz	r0, 8006fc4 <_vfiprintf_r+0x18>
 8006fbc:	6983      	ldr	r3, [r0, #24]
 8006fbe:	b90b      	cbnz	r3, 8006fc4 <_vfiprintf_r+0x18>
 8006fc0:	f000 fb14 	bl	80075ec <__sinit>
 8006fc4:	4b89      	ldr	r3, [pc, #548]	; (80071ec <_vfiprintf_r+0x240>)
 8006fc6:	429d      	cmp	r5, r3
 8006fc8:	d11b      	bne.n	8007002 <_vfiprintf_r+0x56>
 8006fca:	6875      	ldr	r5, [r6, #4]
 8006fcc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fce:	07d9      	lsls	r1, r3, #31
 8006fd0:	d405      	bmi.n	8006fde <_vfiprintf_r+0x32>
 8006fd2:	89ab      	ldrh	r3, [r5, #12]
 8006fd4:	059a      	lsls	r2, r3, #22
 8006fd6:	d402      	bmi.n	8006fde <_vfiprintf_r+0x32>
 8006fd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fda:	f000 fba5 	bl	8007728 <__retarget_lock_acquire_recursive>
 8006fde:	89ab      	ldrh	r3, [r5, #12]
 8006fe0:	071b      	lsls	r3, r3, #28
 8006fe2:	d501      	bpl.n	8006fe8 <_vfiprintf_r+0x3c>
 8006fe4:	692b      	ldr	r3, [r5, #16]
 8006fe6:	b9eb      	cbnz	r3, 8007024 <_vfiprintf_r+0x78>
 8006fe8:	4629      	mov	r1, r5
 8006fea:	4630      	mov	r0, r6
 8006fec:	f000 f96e 	bl	80072cc <__swsetup_r>
 8006ff0:	b1c0      	cbz	r0, 8007024 <_vfiprintf_r+0x78>
 8006ff2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ff4:	07dc      	lsls	r4, r3, #31
 8006ff6:	d50e      	bpl.n	8007016 <_vfiprintf_r+0x6a>
 8006ff8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ffc:	b01d      	add	sp, #116	; 0x74
 8006ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007002:	4b7b      	ldr	r3, [pc, #492]	; (80071f0 <_vfiprintf_r+0x244>)
 8007004:	429d      	cmp	r5, r3
 8007006:	d101      	bne.n	800700c <_vfiprintf_r+0x60>
 8007008:	68b5      	ldr	r5, [r6, #8]
 800700a:	e7df      	b.n	8006fcc <_vfiprintf_r+0x20>
 800700c:	4b79      	ldr	r3, [pc, #484]	; (80071f4 <_vfiprintf_r+0x248>)
 800700e:	429d      	cmp	r5, r3
 8007010:	bf08      	it	eq
 8007012:	68f5      	ldreq	r5, [r6, #12]
 8007014:	e7da      	b.n	8006fcc <_vfiprintf_r+0x20>
 8007016:	89ab      	ldrh	r3, [r5, #12]
 8007018:	0598      	lsls	r0, r3, #22
 800701a:	d4ed      	bmi.n	8006ff8 <_vfiprintf_r+0x4c>
 800701c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800701e:	f000 fb84 	bl	800772a <__retarget_lock_release_recursive>
 8007022:	e7e9      	b.n	8006ff8 <_vfiprintf_r+0x4c>
 8007024:	2300      	movs	r3, #0
 8007026:	9309      	str	r3, [sp, #36]	; 0x24
 8007028:	2320      	movs	r3, #32
 800702a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800702e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007032:	2330      	movs	r3, #48	; 0x30
 8007034:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80071f8 <_vfiprintf_r+0x24c>
 8007038:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800703c:	f04f 0901 	mov.w	r9, #1
 8007040:	4623      	mov	r3, r4
 8007042:	469a      	mov	sl, r3
 8007044:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007048:	b10a      	cbz	r2, 800704e <_vfiprintf_r+0xa2>
 800704a:	2a25      	cmp	r2, #37	; 0x25
 800704c:	d1f9      	bne.n	8007042 <_vfiprintf_r+0x96>
 800704e:	ebba 0b04 	subs.w	fp, sl, r4
 8007052:	d00b      	beq.n	800706c <_vfiprintf_r+0xc0>
 8007054:	465b      	mov	r3, fp
 8007056:	4622      	mov	r2, r4
 8007058:	4629      	mov	r1, r5
 800705a:	4630      	mov	r0, r6
 800705c:	f7ff ff94 	bl	8006f88 <__sfputs_r>
 8007060:	3001      	adds	r0, #1
 8007062:	f000 80aa 	beq.w	80071ba <_vfiprintf_r+0x20e>
 8007066:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007068:	445a      	add	r2, fp
 800706a:	9209      	str	r2, [sp, #36]	; 0x24
 800706c:	f89a 3000 	ldrb.w	r3, [sl]
 8007070:	2b00      	cmp	r3, #0
 8007072:	f000 80a2 	beq.w	80071ba <_vfiprintf_r+0x20e>
 8007076:	2300      	movs	r3, #0
 8007078:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800707c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007080:	f10a 0a01 	add.w	sl, sl, #1
 8007084:	9304      	str	r3, [sp, #16]
 8007086:	9307      	str	r3, [sp, #28]
 8007088:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800708c:	931a      	str	r3, [sp, #104]	; 0x68
 800708e:	4654      	mov	r4, sl
 8007090:	2205      	movs	r2, #5
 8007092:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007096:	4858      	ldr	r0, [pc, #352]	; (80071f8 <_vfiprintf_r+0x24c>)
 8007098:	f7f9 f8c2 	bl	8000220 <memchr>
 800709c:	9a04      	ldr	r2, [sp, #16]
 800709e:	b9d8      	cbnz	r0, 80070d8 <_vfiprintf_r+0x12c>
 80070a0:	06d1      	lsls	r1, r2, #27
 80070a2:	bf44      	itt	mi
 80070a4:	2320      	movmi	r3, #32
 80070a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070aa:	0713      	lsls	r3, r2, #28
 80070ac:	bf44      	itt	mi
 80070ae:	232b      	movmi	r3, #43	; 0x2b
 80070b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070b4:	f89a 3000 	ldrb.w	r3, [sl]
 80070b8:	2b2a      	cmp	r3, #42	; 0x2a
 80070ba:	d015      	beq.n	80070e8 <_vfiprintf_r+0x13c>
 80070bc:	9a07      	ldr	r2, [sp, #28]
 80070be:	4654      	mov	r4, sl
 80070c0:	2000      	movs	r0, #0
 80070c2:	f04f 0c0a 	mov.w	ip, #10
 80070c6:	4621      	mov	r1, r4
 80070c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070cc:	3b30      	subs	r3, #48	; 0x30
 80070ce:	2b09      	cmp	r3, #9
 80070d0:	d94e      	bls.n	8007170 <_vfiprintf_r+0x1c4>
 80070d2:	b1b0      	cbz	r0, 8007102 <_vfiprintf_r+0x156>
 80070d4:	9207      	str	r2, [sp, #28]
 80070d6:	e014      	b.n	8007102 <_vfiprintf_r+0x156>
 80070d8:	eba0 0308 	sub.w	r3, r0, r8
 80070dc:	fa09 f303 	lsl.w	r3, r9, r3
 80070e0:	4313      	orrs	r3, r2
 80070e2:	9304      	str	r3, [sp, #16]
 80070e4:	46a2      	mov	sl, r4
 80070e6:	e7d2      	b.n	800708e <_vfiprintf_r+0xe2>
 80070e8:	9b03      	ldr	r3, [sp, #12]
 80070ea:	1d19      	adds	r1, r3, #4
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	9103      	str	r1, [sp, #12]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	bfbb      	ittet	lt
 80070f4:	425b      	neglt	r3, r3
 80070f6:	f042 0202 	orrlt.w	r2, r2, #2
 80070fa:	9307      	strge	r3, [sp, #28]
 80070fc:	9307      	strlt	r3, [sp, #28]
 80070fe:	bfb8      	it	lt
 8007100:	9204      	strlt	r2, [sp, #16]
 8007102:	7823      	ldrb	r3, [r4, #0]
 8007104:	2b2e      	cmp	r3, #46	; 0x2e
 8007106:	d10c      	bne.n	8007122 <_vfiprintf_r+0x176>
 8007108:	7863      	ldrb	r3, [r4, #1]
 800710a:	2b2a      	cmp	r3, #42	; 0x2a
 800710c:	d135      	bne.n	800717a <_vfiprintf_r+0x1ce>
 800710e:	9b03      	ldr	r3, [sp, #12]
 8007110:	1d1a      	adds	r2, r3, #4
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	9203      	str	r2, [sp, #12]
 8007116:	2b00      	cmp	r3, #0
 8007118:	bfb8      	it	lt
 800711a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800711e:	3402      	adds	r4, #2
 8007120:	9305      	str	r3, [sp, #20]
 8007122:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007208 <_vfiprintf_r+0x25c>
 8007126:	7821      	ldrb	r1, [r4, #0]
 8007128:	2203      	movs	r2, #3
 800712a:	4650      	mov	r0, sl
 800712c:	f7f9 f878 	bl	8000220 <memchr>
 8007130:	b140      	cbz	r0, 8007144 <_vfiprintf_r+0x198>
 8007132:	2340      	movs	r3, #64	; 0x40
 8007134:	eba0 000a 	sub.w	r0, r0, sl
 8007138:	fa03 f000 	lsl.w	r0, r3, r0
 800713c:	9b04      	ldr	r3, [sp, #16]
 800713e:	4303      	orrs	r3, r0
 8007140:	3401      	adds	r4, #1
 8007142:	9304      	str	r3, [sp, #16]
 8007144:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007148:	482c      	ldr	r0, [pc, #176]	; (80071fc <_vfiprintf_r+0x250>)
 800714a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800714e:	2206      	movs	r2, #6
 8007150:	f7f9 f866 	bl	8000220 <memchr>
 8007154:	2800      	cmp	r0, #0
 8007156:	d03f      	beq.n	80071d8 <_vfiprintf_r+0x22c>
 8007158:	4b29      	ldr	r3, [pc, #164]	; (8007200 <_vfiprintf_r+0x254>)
 800715a:	bb1b      	cbnz	r3, 80071a4 <_vfiprintf_r+0x1f8>
 800715c:	9b03      	ldr	r3, [sp, #12]
 800715e:	3307      	adds	r3, #7
 8007160:	f023 0307 	bic.w	r3, r3, #7
 8007164:	3308      	adds	r3, #8
 8007166:	9303      	str	r3, [sp, #12]
 8007168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800716a:	443b      	add	r3, r7
 800716c:	9309      	str	r3, [sp, #36]	; 0x24
 800716e:	e767      	b.n	8007040 <_vfiprintf_r+0x94>
 8007170:	fb0c 3202 	mla	r2, ip, r2, r3
 8007174:	460c      	mov	r4, r1
 8007176:	2001      	movs	r0, #1
 8007178:	e7a5      	b.n	80070c6 <_vfiprintf_r+0x11a>
 800717a:	2300      	movs	r3, #0
 800717c:	3401      	adds	r4, #1
 800717e:	9305      	str	r3, [sp, #20]
 8007180:	4619      	mov	r1, r3
 8007182:	f04f 0c0a 	mov.w	ip, #10
 8007186:	4620      	mov	r0, r4
 8007188:	f810 2b01 	ldrb.w	r2, [r0], #1
 800718c:	3a30      	subs	r2, #48	; 0x30
 800718e:	2a09      	cmp	r2, #9
 8007190:	d903      	bls.n	800719a <_vfiprintf_r+0x1ee>
 8007192:	2b00      	cmp	r3, #0
 8007194:	d0c5      	beq.n	8007122 <_vfiprintf_r+0x176>
 8007196:	9105      	str	r1, [sp, #20]
 8007198:	e7c3      	b.n	8007122 <_vfiprintf_r+0x176>
 800719a:	fb0c 2101 	mla	r1, ip, r1, r2
 800719e:	4604      	mov	r4, r0
 80071a0:	2301      	movs	r3, #1
 80071a2:	e7f0      	b.n	8007186 <_vfiprintf_r+0x1da>
 80071a4:	ab03      	add	r3, sp, #12
 80071a6:	9300      	str	r3, [sp, #0]
 80071a8:	462a      	mov	r2, r5
 80071aa:	4b16      	ldr	r3, [pc, #88]	; (8007204 <_vfiprintf_r+0x258>)
 80071ac:	a904      	add	r1, sp, #16
 80071ae:	4630      	mov	r0, r6
 80071b0:	f7fd fdd6 	bl	8004d60 <_printf_float>
 80071b4:	4607      	mov	r7, r0
 80071b6:	1c78      	adds	r0, r7, #1
 80071b8:	d1d6      	bne.n	8007168 <_vfiprintf_r+0x1bc>
 80071ba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071bc:	07d9      	lsls	r1, r3, #31
 80071be:	d405      	bmi.n	80071cc <_vfiprintf_r+0x220>
 80071c0:	89ab      	ldrh	r3, [r5, #12]
 80071c2:	059a      	lsls	r2, r3, #22
 80071c4:	d402      	bmi.n	80071cc <_vfiprintf_r+0x220>
 80071c6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071c8:	f000 faaf 	bl	800772a <__retarget_lock_release_recursive>
 80071cc:	89ab      	ldrh	r3, [r5, #12]
 80071ce:	065b      	lsls	r3, r3, #25
 80071d0:	f53f af12 	bmi.w	8006ff8 <_vfiprintf_r+0x4c>
 80071d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071d6:	e711      	b.n	8006ffc <_vfiprintf_r+0x50>
 80071d8:	ab03      	add	r3, sp, #12
 80071da:	9300      	str	r3, [sp, #0]
 80071dc:	462a      	mov	r2, r5
 80071de:	4b09      	ldr	r3, [pc, #36]	; (8007204 <_vfiprintf_r+0x258>)
 80071e0:	a904      	add	r1, sp, #16
 80071e2:	4630      	mov	r0, r6
 80071e4:	f7fe f860 	bl	80052a8 <_printf_i>
 80071e8:	e7e4      	b.n	80071b4 <_vfiprintf_r+0x208>
 80071ea:	bf00      	nop
 80071ec:	08007dc4 	.word	0x08007dc4
 80071f0:	08007de4 	.word	0x08007de4
 80071f4:	08007da4 	.word	0x08007da4
 80071f8:	08007c4c 	.word	0x08007c4c
 80071fc:	08007c56 	.word	0x08007c56
 8007200:	08004d61 	.word	0x08004d61
 8007204:	08006f89 	.word	0x08006f89
 8007208:	08007c52 	.word	0x08007c52

0800720c <__swbuf_r>:
 800720c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800720e:	460e      	mov	r6, r1
 8007210:	4614      	mov	r4, r2
 8007212:	4605      	mov	r5, r0
 8007214:	b118      	cbz	r0, 800721e <__swbuf_r+0x12>
 8007216:	6983      	ldr	r3, [r0, #24]
 8007218:	b90b      	cbnz	r3, 800721e <__swbuf_r+0x12>
 800721a:	f000 f9e7 	bl	80075ec <__sinit>
 800721e:	4b21      	ldr	r3, [pc, #132]	; (80072a4 <__swbuf_r+0x98>)
 8007220:	429c      	cmp	r4, r3
 8007222:	d12b      	bne.n	800727c <__swbuf_r+0x70>
 8007224:	686c      	ldr	r4, [r5, #4]
 8007226:	69a3      	ldr	r3, [r4, #24]
 8007228:	60a3      	str	r3, [r4, #8]
 800722a:	89a3      	ldrh	r3, [r4, #12]
 800722c:	071a      	lsls	r2, r3, #28
 800722e:	d52f      	bpl.n	8007290 <__swbuf_r+0x84>
 8007230:	6923      	ldr	r3, [r4, #16]
 8007232:	b36b      	cbz	r3, 8007290 <__swbuf_r+0x84>
 8007234:	6923      	ldr	r3, [r4, #16]
 8007236:	6820      	ldr	r0, [r4, #0]
 8007238:	1ac0      	subs	r0, r0, r3
 800723a:	6963      	ldr	r3, [r4, #20]
 800723c:	b2f6      	uxtb	r6, r6
 800723e:	4283      	cmp	r3, r0
 8007240:	4637      	mov	r7, r6
 8007242:	dc04      	bgt.n	800724e <__swbuf_r+0x42>
 8007244:	4621      	mov	r1, r4
 8007246:	4628      	mov	r0, r5
 8007248:	f000 f93c 	bl	80074c4 <_fflush_r>
 800724c:	bb30      	cbnz	r0, 800729c <__swbuf_r+0x90>
 800724e:	68a3      	ldr	r3, [r4, #8]
 8007250:	3b01      	subs	r3, #1
 8007252:	60a3      	str	r3, [r4, #8]
 8007254:	6823      	ldr	r3, [r4, #0]
 8007256:	1c5a      	adds	r2, r3, #1
 8007258:	6022      	str	r2, [r4, #0]
 800725a:	701e      	strb	r6, [r3, #0]
 800725c:	6963      	ldr	r3, [r4, #20]
 800725e:	3001      	adds	r0, #1
 8007260:	4283      	cmp	r3, r0
 8007262:	d004      	beq.n	800726e <__swbuf_r+0x62>
 8007264:	89a3      	ldrh	r3, [r4, #12]
 8007266:	07db      	lsls	r3, r3, #31
 8007268:	d506      	bpl.n	8007278 <__swbuf_r+0x6c>
 800726a:	2e0a      	cmp	r6, #10
 800726c:	d104      	bne.n	8007278 <__swbuf_r+0x6c>
 800726e:	4621      	mov	r1, r4
 8007270:	4628      	mov	r0, r5
 8007272:	f000 f927 	bl	80074c4 <_fflush_r>
 8007276:	b988      	cbnz	r0, 800729c <__swbuf_r+0x90>
 8007278:	4638      	mov	r0, r7
 800727a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800727c:	4b0a      	ldr	r3, [pc, #40]	; (80072a8 <__swbuf_r+0x9c>)
 800727e:	429c      	cmp	r4, r3
 8007280:	d101      	bne.n	8007286 <__swbuf_r+0x7a>
 8007282:	68ac      	ldr	r4, [r5, #8]
 8007284:	e7cf      	b.n	8007226 <__swbuf_r+0x1a>
 8007286:	4b09      	ldr	r3, [pc, #36]	; (80072ac <__swbuf_r+0xa0>)
 8007288:	429c      	cmp	r4, r3
 800728a:	bf08      	it	eq
 800728c:	68ec      	ldreq	r4, [r5, #12]
 800728e:	e7ca      	b.n	8007226 <__swbuf_r+0x1a>
 8007290:	4621      	mov	r1, r4
 8007292:	4628      	mov	r0, r5
 8007294:	f000 f81a 	bl	80072cc <__swsetup_r>
 8007298:	2800      	cmp	r0, #0
 800729a:	d0cb      	beq.n	8007234 <__swbuf_r+0x28>
 800729c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80072a0:	e7ea      	b.n	8007278 <__swbuf_r+0x6c>
 80072a2:	bf00      	nop
 80072a4:	08007dc4 	.word	0x08007dc4
 80072a8:	08007de4 	.word	0x08007de4
 80072ac:	08007da4 	.word	0x08007da4

080072b0 <__ascii_wctomb>:
 80072b0:	b149      	cbz	r1, 80072c6 <__ascii_wctomb+0x16>
 80072b2:	2aff      	cmp	r2, #255	; 0xff
 80072b4:	bf85      	ittet	hi
 80072b6:	238a      	movhi	r3, #138	; 0x8a
 80072b8:	6003      	strhi	r3, [r0, #0]
 80072ba:	700a      	strbls	r2, [r1, #0]
 80072bc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80072c0:	bf98      	it	ls
 80072c2:	2001      	movls	r0, #1
 80072c4:	4770      	bx	lr
 80072c6:	4608      	mov	r0, r1
 80072c8:	4770      	bx	lr
	...

080072cc <__swsetup_r>:
 80072cc:	4b32      	ldr	r3, [pc, #200]	; (8007398 <__swsetup_r+0xcc>)
 80072ce:	b570      	push	{r4, r5, r6, lr}
 80072d0:	681d      	ldr	r5, [r3, #0]
 80072d2:	4606      	mov	r6, r0
 80072d4:	460c      	mov	r4, r1
 80072d6:	b125      	cbz	r5, 80072e2 <__swsetup_r+0x16>
 80072d8:	69ab      	ldr	r3, [r5, #24]
 80072da:	b913      	cbnz	r3, 80072e2 <__swsetup_r+0x16>
 80072dc:	4628      	mov	r0, r5
 80072de:	f000 f985 	bl	80075ec <__sinit>
 80072e2:	4b2e      	ldr	r3, [pc, #184]	; (800739c <__swsetup_r+0xd0>)
 80072e4:	429c      	cmp	r4, r3
 80072e6:	d10f      	bne.n	8007308 <__swsetup_r+0x3c>
 80072e8:	686c      	ldr	r4, [r5, #4]
 80072ea:	89a3      	ldrh	r3, [r4, #12]
 80072ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072f0:	0719      	lsls	r1, r3, #28
 80072f2:	d42c      	bmi.n	800734e <__swsetup_r+0x82>
 80072f4:	06dd      	lsls	r5, r3, #27
 80072f6:	d411      	bmi.n	800731c <__swsetup_r+0x50>
 80072f8:	2309      	movs	r3, #9
 80072fa:	6033      	str	r3, [r6, #0]
 80072fc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007300:	81a3      	strh	r3, [r4, #12]
 8007302:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007306:	e03e      	b.n	8007386 <__swsetup_r+0xba>
 8007308:	4b25      	ldr	r3, [pc, #148]	; (80073a0 <__swsetup_r+0xd4>)
 800730a:	429c      	cmp	r4, r3
 800730c:	d101      	bne.n	8007312 <__swsetup_r+0x46>
 800730e:	68ac      	ldr	r4, [r5, #8]
 8007310:	e7eb      	b.n	80072ea <__swsetup_r+0x1e>
 8007312:	4b24      	ldr	r3, [pc, #144]	; (80073a4 <__swsetup_r+0xd8>)
 8007314:	429c      	cmp	r4, r3
 8007316:	bf08      	it	eq
 8007318:	68ec      	ldreq	r4, [r5, #12]
 800731a:	e7e6      	b.n	80072ea <__swsetup_r+0x1e>
 800731c:	0758      	lsls	r0, r3, #29
 800731e:	d512      	bpl.n	8007346 <__swsetup_r+0x7a>
 8007320:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007322:	b141      	cbz	r1, 8007336 <__swsetup_r+0x6a>
 8007324:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007328:	4299      	cmp	r1, r3
 800732a:	d002      	beq.n	8007332 <__swsetup_r+0x66>
 800732c:	4630      	mov	r0, r6
 800732e:	f7ff fb31 	bl	8006994 <_free_r>
 8007332:	2300      	movs	r3, #0
 8007334:	6363      	str	r3, [r4, #52]	; 0x34
 8007336:	89a3      	ldrh	r3, [r4, #12]
 8007338:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800733c:	81a3      	strh	r3, [r4, #12]
 800733e:	2300      	movs	r3, #0
 8007340:	6063      	str	r3, [r4, #4]
 8007342:	6923      	ldr	r3, [r4, #16]
 8007344:	6023      	str	r3, [r4, #0]
 8007346:	89a3      	ldrh	r3, [r4, #12]
 8007348:	f043 0308 	orr.w	r3, r3, #8
 800734c:	81a3      	strh	r3, [r4, #12]
 800734e:	6923      	ldr	r3, [r4, #16]
 8007350:	b94b      	cbnz	r3, 8007366 <__swsetup_r+0x9a>
 8007352:	89a3      	ldrh	r3, [r4, #12]
 8007354:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800735c:	d003      	beq.n	8007366 <__swsetup_r+0x9a>
 800735e:	4621      	mov	r1, r4
 8007360:	4630      	mov	r0, r6
 8007362:	f000 fa09 	bl	8007778 <__smakebuf_r>
 8007366:	89a0      	ldrh	r0, [r4, #12]
 8007368:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800736c:	f010 0301 	ands.w	r3, r0, #1
 8007370:	d00a      	beq.n	8007388 <__swsetup_r+0xbc>
 8007372:	2300      	movs	r3, #0
 8007374:	60a3      	str	r3, [r4, #8]
 8007376:	6963      	ldr	r3, [r4, #20]
 8007378:	425b      	negs	r3, r3
 800737a:	61a3      	str	r3, [r4, #24]
 800737c:	6923      	ldr	r3, [r4, #16]
 800737e:	b943      	cbnz	r3, 8007392 <__swsetup_r+0xc6>
 8007380:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007384:	d1ba      	bne.n	80072fc <__swsetup_r+0x30>
 8007386:	bd70      	pop	{r4, r5, r6, pc}
 8007388:	0781      	lsls	r1, r0, #30
 800738a:	bf58      	it	pl
 800738c:	6963      	ldrpl	r3, [r4, #20]
 800738e:	60a3      	str	r3, [r4, #8]
 8007390:	e7f4      	b.n	800737c <__swsetup_r+0xb0>
 8007392:	2000      	movs	r0, #0
 8007394:	e7f7      	b.n	8007386 <__swsetup_r+0xba>
 8007396:	bf00      	nop
 8007398:	20000010 	.word	0x20000010
 800739c:	08007dc4 	.word	0x08007dc4
 80073a0:	08007de4 	.word	0x08007de4
 80073a4:	08007da4 	.word	0x08007da4

080073a8 <abort>:
 80073a8:	b508      	push	{r3, lr}
 80073aa:	2006      	movs	r0, #6
 80073ac:	f000 fa54 	bl	8007858 <raise>
 80073b0:	2001      	movs	r0, #1
 80073b2:	f7fa f9b7 	bl	8001724 <_exit>
	...

080073b8 <__sflush_r>:
 80073b8:	898a      	ldrh	r2, [r1, #12]
 80073ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073be:	4605      	mov	r5, r0
 80073c0:	0710      	lsls	r0, r2, #28
 80073c2:	460c      	mov	r4, r1
 80073c4:	d458      	bmi.n	8007478 <__sflush_r+0xc0>
 80073c6:	684b      	ldr	r3, [r1, #4]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	dc05      	bgt.n	80073d8 <__sflush_r+0x20>
 80073cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	dc02      	bgt.n	80073d8 <__sflush_r+0x20>
 80073d2:	2000      	movs	r0, #0
 80073d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073da:	2e00      	cmp	r6, #0
 80073dc:	d0f9      	beq.n	80073d2 <__sflush_r+0x1a>
 80073de:	2300      	movs	r3, #0
 80073e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80073e4:	682f      	ldr	r7, [r5, #0]
 80073e6:	602b      	str	r3, [r5, #0]
 80073e8:	d032      	beq.n	8007450 <__sflush_r+0x98>
 80073ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80073ec:	89a3      	ldrh	r3, [r4, #12]
 80073ee:	075a      	lsls	r2, r3, #29
 80073f0:	d505      	bpl.n	80073fe <__sflush_r+0x46>
 80073f2:	6863      	ldr	r3, [r4, #4]
 80073f4:	1ac0      	subs	r0, r0, r3
 80073f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80073f8:	b10b      	cbz	r3, 80073fe <__sflush_r+0x46>
 80073fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80073fc:	1ac0      	subs	r0, r0, r3
 80073fe:	2300      	movs	r3, #0
 8007400:	4602      	mov	r2, r0
 8007402:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007404:	6a21      	ldr	r1, [r4, #32]
 8007406:	4628      	mov	r0, r5
 8007408:	47b0      	blx	r6
 800740a:	1c43      	adds	r3, r0, #1
 800740c:	89a3      	ldrh	r3, [r4, #12]
 800740e:	d106      	bne.n	800741e <__sflush_r+0x66>
 8007410:	6829      	ldr	r1, [r5, #0]
 8007412:	291d      	cmp	r1, #29
 8007414:	d82c      	bhi.n	8007470 <__sflush_r+0xb8>
 8007416:	4a2a      	ldr	r2, [pc, #168]	; (80074c0 <__sflush_r+0x108>)
 8007418:	40ca      	lsrs	r2, r1
 800741a:	07d6      	lsls	r6, r2, #31
 800741c:	d528      	bpl.n	8007470 <__sflush_r+0xb8>
 800741e:	2200      	movs	r2, #0
 8007420:	6062      	str	r2, [r4, #4]
 8007422:	04d9      	lsls	r1, r3, #19
 8007424:	6922      	ldr	r2, [r4, #16]
 8007426:	6022      	str	r2, [r4, #0]
 8007428:	d504      	bpl.n	8007434 <__sflush_r+0x7c>
 800742a:	1c42      	adds	r2, r0, #1
 800742c:	d101      	bne.n	8007432 <__sflush_r+0x7a>
 800742e:	682b      	ldr	r3, [r5, #0]
 8007430:	b903      	cbnz	r3, 8007434 <__sflush_r+0x7c>
 8007432:	6560      	str	r0, [r4, #84]	; 0x54
 8007434:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007436:	602f      	str	r7, [r5, #0]
 8007438:	2900      	cmp	r1, #0
 800743a:	d0ca      	beq.n	80073d2 <__sflush_r+0x1a>
 800743c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007440:	4299      	cmp	r1, r3
 8007442:	d002      	beq.n	800744a <__sflush_r+0x92>
 8007444:	4628      	mov	r0, r5
 8007446:	f7ff faa5 	bl	8006994 <_free_r>
 800744a:	2000      	movs	r0, #0
 800744c:	6360      	str	r0, [r4, #52]	; 0x34
 800744e:	e7c1      	b.n	80073d4 <__sflush_r+0x1c>
 8007450:	6a21      	ldr	r1, [r4, #32]
 8007452:	2301      	movs	r3, #1
 8007454:	4628      	mov	r0, r5
 8007456:	47b0      	blx	r6
 8007458:	1c41      	adds	r1, r0, #1
 800745a:	d1c7      	bne.n	80073ec <__sflush_r+0x34>
 800745c:	682b      	ldr	r3, [r5, #0]
 800745e:	2b00      	cmp	r3, #0
 8007460:	d0c4      	beq.n	80073ec <__sflush_r+0x34>
 8007462:	2b1d      	cmp	r3, #29
 8007464:	d001      	beq.n	800746a <__sflush_r+0xb2>
 8007466:	2b16      	cmp	r3, #22
 8007468:	d101      	bne.n	800746e <__sflush_r+0xb6>
 800746a:	602f      	str	r7, [r5, #0]
 800746c:	e7b1      	b.n	80073d2 <__sflush_r+0x1a>
 800746e:	89a3      	ldrh	r3, [r4, #12]
 8007470:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007474:	81a3      	strh	r3, [r4, #12]
 8007476:	e7ad      	b.n	80073d4 <__sflush_r+0x1c>
 8007478:	690f      	ldr	r7, [r1, #16]
 800747a:	2f00      	cmp	r7, #0
 800747c:	d0a9      	beq.n	80073d2 <__sflush_r+0x1a>
 800747e:	0793      	lsls	r3, r2, #30
 8007480:	680e      	ldr	r6, [r1, #0]
 8007482:	bf08      	it	eq
 8007484:	694b      	ldreq	r3, [r1, #20]
 8007486:	600f      	str	r7, [r1, #0]
 8007488:	bf18      	it	ne
 800748a:	2300      	movne	r3, #0
 800748c:	eba6 0807 	sub.w	r8, r6, r7
 8007490:	608b      	str	r3, [r1, #8]
 8007492:	f1b8 0f00 	cmp.w	r8, #0
 8007496:	dd9c      	ble.n	80073d2 <__sflush_r+0x1a>
 8007498:	6a21      	ldr	r1, [r4, #32]
 800749a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800749c:	4643      	mov	r3, r8
 800749e:	463a      	mov	r2, r7
 80074a0:	4628      	mov	r0, r5
 80074a2:	47b0      	blx	r6
 80074a4:	2800      	cmp	r0, #0
 80074a6:	dc06      	bgt.n	80074b6 <__sflush_r+0xfe>
 80074a8:	89a3      	ldrh	r3, [r4, #12]
 80074aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074ae:	81a3      	strh	r3, [r4, #12]
 80074b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80074b4:	e78e      	b.n	80073d4 <__sflush_r+0x1c>
 80074b6:	4407      	add	r7, r0
 80074b8:	eba8 0800 	sub.w	r8, r8, r0
 80074bc:	e7e9      	b.n	8007492 <__sflush_r+0xda>
 80074be:	bf00      	nop
 80074c0:	20400001 	.word	0x20400001

080074c4 <_fflush_r>:
 80074c4:	b538      	push	{r3, r4, r5, lr}
 80074c6:	690b      	ldr	r3, [r1, #16]
 80074c8:	4605      	mov	r5, r0
 80074ca:	460c      	mov	r4, r1
 80074cc:	b913      	cbnz	r3, 80074d4 <_fflush_r+0x10>
 80074ce:	2500      	movs	r5, #0
 80074d0:	4628      	mov	r0, r5
 80074d2:	bd38      	pop	{r3, r4, r5, pc}
 80074d4:	b118      	cbz	r0, 80074de <_fflush_r+0x1a>
 80074d6:	6983      	ldr	r3, [r0, #24]
 80074d8:	b90b      	cbnz	r3, 80074de <_fflush_r+0x1a>
 80074da:	f000 f887 	bl	80075ec <__sinit>
 80074de:	4b14      	ldr	r3, [pc, #80]	; (8007530 <_fflush_r+0x6c>)
 80074e0:	429c      	cmp	r4, r3
 80074e2:	d11b      	bne.n	800751c <_fflush_r+0x58>
 80074e4:	686c      	ldr	r4, [r5, #4]
 80074e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d0ef      	beq.n	80074ce <_fflush_r+0xa>
 80074ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80074f0:	07d0      	lsls	r0, r2, #31
 80074f2:	d404      	bmi.n	80074fe <_fflush_r+0x3a>
 80074f4:	0599      	lsls	r1, r3, #22
 80074f6:	d402      	bmi.n	80074fe <_fflush_r+0x3a>
 80074f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80074fa:	f000 f915 	bl	8007728 <__retarget_lock_acquire_recursive>
 80074fe:	4628      	mov	r0, r5
 8007500:	4621      	mov	r1, r4
 8007502:	f7ff ff59 	bl	80073b8 <__sflush_r>
 8007506:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007508:	07da      	lsls	r2, r3, #31
 800750a:	4605      	mov	r5, r0
 800750c:	d4e0      	bmi.n	80074d0 <_fflush_r+0xc>
 800750e:	89a3      	ldrh	r3, [r4, #12]
 8007510:	059b      	lsls	r3, r3, #22
 8007512:	d4dd      	bmi.n	80074d0 <_fflush_r+0xc>
 8007514:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007516:	f000 f908 	bl	800772a <__retarget_lock_release_recursive>
 800751a:	e7d9      	b.n	80074d0 <_fflush_r+0xc>
 800751c:	4b05      	ldr	r3, [pc, #20]	; (8007534 <_fflush_r+0x70>)
 800751e:	429c      	cmp	r4, r3
 8007520:	d101      	bne.n	8007526 <_fflush_r+0x62>
 8007522:	68ac      	ldr	r4, [r5, #8]
 8007524:	e7df      	b.n	80074e6 <_fflush_r+0x22>
 8007526:	4b04      	ldr	r3, [pc, #16]	; (8007538 <_fflush_r+0x74>)
 8007528:	429c      	cmp	r4, r3
 800752a:	bf08      	it	eq
 800752c:	68ec      	ldreq	r4, [r5, #12]
 800752e:	e7da      	b.n	80074e6 <_fflush_r+0x22>
 8007530:	08007dc4 	.word	0x08007dc4
 8007534:	08007de4 	.word	0x08007de4
 8007538:	08007da4 	.word	0x08007da4

0800753c <std>:
 800753c:	2300      	movs	r3, #0
 800753e:	b510      	push	{r4, lr}
 8007540:	4604      	mov	r4, r0
 8007542:	e9c0 3300 	strd	r3, r3, [r0]
 8007546:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800754a:	6083      	str	r3, [r0, #8]
 800754c:	8181      	strh	r1, [r0, #12]
 800754e:	6643      	str	r3, [r0, #100]	; 0x64
 8007550:	81c2      	strh	r2, [r0, #14]
 8007552:	6183      	str	r3, [r0, #24]
 8007554:	4619      	mov	r1, r3
 8007556:	2208      	movs	r2, #8
 8007558:	305c      	adds	r0, #92	; 0x5c
 800755a:	f7fd fb59 	bl	8004c10 <memset>
 800755e:	4b05      	ldr	r3, [pc, #20]	; (8007574 <std+0x38>)
 8007560:	6263      	str	r3, [r4, #36]	; 0x24
 8007562:	4b05      	ldr	r3, [pc, #20]	; (8007578 <std+0x3c>)
 8007564:	62a3      	str	r3, [r4, #40]	; 0x28
 8007566:	4b05      	ldr	r3, [pc, #20]	; (800757c <std+0x40>)
 8007568:	62e3      	str	r3, [r4, #44]	; 0x2c
 800756a:	4b05      	ldr	r3, [pc, #20]	; (8007580 <std+0x44>)
 800756c:	6224      	str	r4, [r4, #32]
 800756e:	6323      	str	r3, [r4, #48]	; 0x30
 8007570:	bd10      	pop	{r4, pc}
 8007572:	bf00      	nop
 8007574:	08007891 	.word	0x08007891
 8007578:	080078b3 	.word	0x080078b3
 800757c:	080078eb 	.word	0x080078eb
 8007580:	0800790f 	.word	0x0800790f

08007584 <_cleanup_r>:
 8007584:	4901      	ldr	r1, [pc, #4]	; (800758c <_cleanup_r+0x8>)
 8007586:	f000 b8af 	b.w	80076e8 <_fwalk_reent>
 800758a:	bf00      	nop
 800758c:	080074c5 	.word	0x080074c5

08007590 <__sfmoreglue>:
 8007590:	b570      	push	{r4, r5, r6, lr}
 8007592:	2268      	movs	r2, #104	; 0x68
 8007594:	1e4d      	subs	r5, r1, #1
 8007596:	4355      	muls	r5, r2
 8007598:	460e      	mov	r6, r1
 800759a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800759e:	f7ff fa65 	bl	8006a6c <_malloc_r>
 80075a2:	4604      	mov	r4, r0
 80075a4:	b140      	cbz	r0, 80075b8 <__sfmoreglue+0x28>
 80075a6:	2100      	movs	r1, #0
 80075a8:	e9c0 1600 	strd	r1, r6, [r0]
 80075ac:	300c      	adds	r0, #12
 80075ae:	60a0      	str	r0, [r4, #8]
 80075b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80075b4:	f7fd fb2c 	bl	8004c10 <memset>
 80075b8:	4620      	mov	r0, r4
 80075ba:	bd70      	pop	{r4, r5, r6, pc}

080075bc <__sfp_lock_acquire>:
 80075bc:	4801      	ldr	r0, [pc, #4]	; (80075c4 <__sfp_lock_acquire+0x8>)
 80075be:	f000 b8b3 	b.w	8007728 <__retarget_lock_acquire_recursive>
 80075c2:	bf00      	nop
 80075c4:	200002fd 	.word	0x200002fd

080075c8 <__sfp_lock_release>:
 80075c8:	4801      	ldr	r0, [pc, #4]	; (80075d0 <__sfp_lock_release+0x8>)
 80075ca:	f000 b8ae 	b.w	800772a <__retarget_lock_release_recursive>
 80075ce:	bf00      	nop
 80075d0:	200002fd 	.word	0x200002fd

080075d4 <__sinit_lock_acquire>:
 80075d4:	4801      	ldr	r0, [pc, #4]	; (80075dc <__sinit_lock_acquire+0x8>)
 80075d6:	f000 b8a7 	b.w	8007728 <__retarget_lock_acquire_recursive>
 80075da:	bf00      	nop
 80075dc:	200002fe 	.word	0x200002fe

080075e0 <__sinit_lock_release>:
 80075e0:	4801      	ldr	r0, [pc, #4]	; (80075e8 <__sinit_lock_release+0x8>)
 80075e2:	f000 b8a2 	b.w	800772a <__retarget_lock_release_recursive>
 80075e6:	bf00      	nop
 80075e8:	200002fe 	.word	0x200002fe

080075ec <__sinit>:
 80075ec:	b510      	push	{r4, lr}
 80075ee:	4604      	mov	r4, r0
 80075f0:	f7ff fff0 	bl	80075d4 <__sinit_lock_acquire>
 80075f4:	69a3      	ldr	r3, [r4, #24]
 80075f6:	b11b      	cbz	r3, 8007600 <__sinit+0x14>
 80075f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075fc:	f7ff bff0 	b.w	80075e0 <__sinit_lock_release>
 8007600:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007604:	6523      	str	r3, [r4, #80]	; 0x50
 8007606:	4b13      	ldr	r3, [pc, #76]	; (8007654 <__sinit+0x68>)
 8007608:	4a13      	ldr	r2, [pc, #76]	; (8007658 <__sinit+0x6c>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	62a2      	str	r2, [r4, #40]	; 0x28
 800760e:	42a3      	cmp	r3, r4
 8007610:	bf04      	itt	eq
 8007612:	2301      	moveq	r3, #1
 8007614:	61a3      	streq	r3, [r4, #24]
 8007616:	4620      	mov	r0, r4
 8007618:	f000 f820 	bl	800765c <__sfp>
 800761c:	6060      	str	r0, [r4, #4]
 800761e:	4620      	mov	r0, r4
 8007620:	f000 f81c 	bl	800765c <__sfp>
 8007624:	60a0      	str	r0, [r4, #8]
 8007626:	4620      	mov	r0, r4
 8007628:	f000 f818 	bl	800765c <__sfp>
 800762c:	2200      	movs	r2, #0
 800762e:	60e0      	str	r0, [r4, #12]
 8007630:	2104      	movs	r1, #4
 8007632:	6860      	ldr	r0, [r4, #4]
 8007634:	f7ff ff82 	bl	800753c <std>
 8007638:	68a0      	ldr	r0, [r4, #8]
 800763a:	2201      	movs	r2, #1
 800763c:	2109      	movs	r1, #9
 800763e:	f7ff ff7d 	bl	800753c <std>
 8007642:	68e0      	ldr	r0, [r4, #12]
 8007644:	2202      	movs	r2, #2
 8007646:	2112      	movs	r1, #18
 8007648:	f7ff ff78 	bl	800753c <std>
 800764c:	2301      	movs	r3, #1
 800764e:	61a3      	str	r3, [r4, #24]
 8007650:	e7d2      	b.n	80075f8 <__sinit+0xc>
 8007652:	bf00      	nop
 8007654:	08007a2c 	.word	0x08007a2c
 8007658:	08007585 	.word	0x08007585

0800765c <__sfp>:
 800765c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800765e:	4607      	mov	r7, r0
 8007660:	f7ff ffac 	bl	80075bc <__sfp_lock_acquire>
 8007664:	4b1e      	ldr	r3, [pc, #120]	; (80076e0 <__sfp+0x84>)
 8007666:	681e      	ldr	r6, [r3, #0]
 8007668:	69b3      	ldr	r3, [r6, #24]
 800766a:	b913      	cbnz	r3, 8007672 <__sfp+0x16>
 800766c:	4630      	mov	r0, r6
 800766e:	f7ff ffbd 	bl	80075ec <__sinit>
 8007672:	3648      	adds	r6, #72	; 0x48
 8007674:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007678:	3b01      	subs	r3, #1
 800767a:	d503      	bpl.n	8007684 <__sfp+0x28>
 800767c:	6833      	ldr	r3, [r6, #0]
 800767e:	b30b      	cbz	r3, 80076c4 <__sfp+0x68>
 8007680:	6836      	ldr	r6, [r6, #0]
 8007682:	e7f7      	b.n	8007674 <__sfp+0x18>
 8007684:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007688:	b9d5      	cbnz	r5, 80076c0 <__sfp+0x64>
 800768a:	4b16      	ldr	r3, [pc, #88]	; (80076e4 <__sfp+0x88>)
 800768c:	60e3      	str	r3, [r4, #12]
 800768e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007692:	6665      	str	r5, [r4, #100]	; 0x64
 8007694:	f000 f847 	bl	8007726 <__retarget_lock_init_recursive>
 8007698:	f7ff ff96 	bl	80075c8 <__sfp_lock_release>
 800769c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80076a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80076a4:	6025      	str	r5, [r4, #0]
 80076a6:	61a5      	str	r5, [r4, #24]
 80076a8:	2208      	movs	r2, #8
 80076aa:	4629      	mov	r1, r5
 80076ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80076b0:	f7fd faae 	bl	8004c10 <memset>
 80076b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80076b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80076bc:	4620      	mov	r0, r4
 80076be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076c0:	3468      	adds	r4, #104	; 0x68
 80076c2:	e7d9      	b.n	8007678 <__sfp+0x1c>
 80076c4:	2104      	movs	r1, #4
 80076c6:	4638      	mov	r0, r7
 80076c8:	f7ff ff62 	bl	8007590 <__sfmoreglue>
 80076cc:	4604      	mov	r4, r0
 80076ce:	6030      	str	r0, [r6, #0]
 80076d0:	2800      	cmp	r0, #0
 80076d2:	d1d5      	bne.n	8007680 <__sfp+0x24>
 80076d4:	f7ff ff78 	bl	80075c8 <__sfp_lock_release>
 80076d8:	230c      	movs	r3, #12
 80076da:	603b      	str	r3, [r7, #0]
 80076dc:	e7ee      	b.n	80076bc <__sfp+0x60>
 80076de:	bf00      	nop
 80076e0:	08007a2c 	.word	0x08007a2c
 80076e4:	ffff0001 	.word	0xffff0001

080076e8 <_fwalk_reent>:
 80076e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076ec:	4606      	mov	r6, r0
 80076ee:	4688      	mov	r8, r1
 80076f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80076f4:	2700      	movs	r7, #0
 80076f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076fa:	f1b9 0901 	subs.w	r9, r9, #1
 80076fe:	d505      	bpl.n	800770c <_fwalk_reent+0x24>
 8007700:	6824      	ldr	r4, [r4, #0]
 8007702:	2c00      	cmp	r4, #0
 8007704:	d1f7      	bne.n	80076f6 <_fwalk_reent+0xe>
 8007706:	4638      	mov	r0, r7
 8007708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800770c:	89ab      	ldrh	r3, [r5, #12]
 800770e:	2b01      	cmp	r3, #1
 8007710:	d907      	bls.n	8007722 <_fwalk_reent+0x3a>
 8007712:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007716:	3301      	adds	r3, #1
 8007718:	d003      	beq.n	8007722 <_fwalk_reent+0x3a>
 800771a:	4629      	mov	r1, r5
 800771c:	4630      	mov	r0, r6
 800771e:	47c0      	blx	r8
 8007720:	4307      	orrs	r7, r0
 8007722:	3568      	adds	r5, #104	; 0x68
 8007724:	e7e9      	b.n	80076fa <_fwalk_reent+0x12>

08007726 <__retarget_lock_init_recursive>:
 8007726:	4770      	bx	lr

08007728 <__retarget_lock_acquire_recursive>:
 8007728:	4770      	bx	lr

0800772a <__retarget_lock_release_recursive>:
 800772a:	4770      	bx	lr

0800772c <__swhatbuf_r>:
 800772c:	b570      	push	{r4, r5, r6, lr}
 800772e:	460e      	mov	r6, r1
 8007730:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007734:	2900      	cmp	r1, #0
 8007736:	b096      	sub	sp, #88	; 0x58
 8007738:	4614      	mov	r4, r2
 800773a:	461d      	mov	r5, r3
 800773c:	da08      	bge.n	8007750 <__swhatbuf_r+0x24>
 800773e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007742:	2200      	movs	r2, #0
 8007744:	602a      	str	r2, [r5, #0]
 8007746:	061a      	lsls	r2, r3, #24
 8007748:	d410      	bmi.n	800776c <__swhatbuf_r+0x40>
 800774a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800774e:	e00e      	b.n	800776e <__swhatbuf_r+0x42>
 8007750:	466a      	mov	r2, sp
 8007752:	f000 f903 	bl	800795c <_fstat_r>
 8007756:	2800      	cmp	r0, #0
 8007758:	dbf1      	blt.n	800773e <__swhatbuf_r+0x12>
 800775a:	9a01      	ldr	r2, [sp, #4]
 800775c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007760:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007764:	425a      	negs	r2, r3
 8007766:	415a      	adcs	r2, r3
 8007768:	602a      	str	r2, [r5, #0]
 800776a:	e7ee      	b.n	800774a <__swhatbuf_r+0x1e>
 800776c:	2340      	movs	r3, #64	; 0x40
 800776e:	2000      	movs	r0, #0
 8007770:	6023      	str	r3, [r4, #0]
 8007772:	b016      	add	sp, #88	; 0x58
 8007774:	bd70      	pop	{r4, r5, r6, pc}
	...

08007778 <__smakebuf_r>:
 8007778:	898b      	ldrh	r3, [r1, #12]
 800777a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800777c:	079d      	lsls	r5, r3, #30
 800777e:	4606      	mov	r6, r0
 8007780:	460c      	mov	r4, r1
 8007782:	d507      	bpl.n	8007794 <__smakebuf_r+0x1c>
 8007784:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007788:	6023      	str	r3, [r4, #0]
 800778a:	6123      	str	r3, [r4, #16]
 800778c:	2301      	movs	r3, #1
 800778e:	6163      	str	r3, [r4, #20]
 8007790:	b002      	add	sp, #8
 8007792:	bd70      	pop	{r4, r5, r6, pc}
 8007794:	ab01      	add	r3, sp, #4
 8007796:	466a      	mov	r2, sp
 8007798:	f7ff ffc8 	bl	800772c <__swhatbuf_r>
 800779c:	9900      	ldr	r1, [sp, #0]
 800779e:	4605      	mov	r5, r0
 80077a0:	4630      	mov	r0, r6
 80077a2:	f7ff f963 	bl	8006a6c <_malloc_r>
 80077a6:	b948      	cbnz	r0, 80077bc <__smakebuf_r+0x44>
 80077a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077ac:	059a      	lsls	r2, r3, #22
 80077ae:	d4ef      	bmi.n	8007790 <__smakebuf_r+0x18>
 80077b0:	f023 0303 	bic.w	r3, r3, #3
 80077b4:	f043 0302 	orr.w	r3, r3, #2
 80077b8:	81a3      	strh	r3, [r4, #12]
 80077ba:	e7e3      	b.n	8007784 <__smakebuf_r+0xc>
 80077bc:	4b0d      	ldr	r3, [pc, #52]	; (80077f4 <__smakebuf_r+0x7c>)
 80077be:	62b3      	str	r3, [r6, #40]	; 0x28
 80077c0:	89a3      	ldrh	r3, [r4, #12]
 80077c2:	6020      	str	r0, [r4, #0]
 80077c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077c8:	81a3      	strh	r3, [r4, #12]
 80077ca:	9b00      	ldr	r3, [sp, #0]
 80077cc:	6163      	str	r3, [r4, #20]
 80077ce:	9b01      	ldr	r3, [sp, #4]
 80077d0:	6120      	str	r0, [r4, #16]
 80077d2:	b15b      	cbz	r3, 80077ec <__smakebuf_r+0x74>
 80077d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077d8:	4630      	mov	r0, r6
 80077da:	f000 f8d1 	bl	8007980 <_isatty_r>
 80077de:	b128      	cbz	r0, 80077ec <__smakebuf_r+0x74>
 80077e0:	89a3      	ldrh	r3, [r4, #12]
 80077e2:	f023 0303 	bic.w	r3, r3, #3
 80077e6:	f043 0301 	orr.w	r3, r3, #1
 80077ea:	81a3      	strh	r3, [r4, #12]
 80077ec:	89a0      	ldrh	r0, [r4, #12]
 80077ee:	4305      	orrs	r5, r0
 80077f0:	81a5      	strh	r5, [r4, #12]
 80077f2:	e7cd      	b.n	8007790 <__smakebuf_r+0x18>
 80077f4:	08007585 	.word	0x08007585

080077f8 <_malloc_usable_size_r>:
 80077f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077fc:	1f18      	subs	r0, r3, #4
 80077fe:	2b00      	cmp	r3, #0
 8007800:	bfbc      	itt	lt
 8007802:	580b      	ldrlt	r3, [r1, r0]
 8007804:	18c0      	addlt	r0, r0, r3
 8007806:	4770      	bx	lr

08007808 <_raise_r>:
 8007808:	291f      	cmp	r1, #31
 800780a:	b538      	push	{r3, r4, r5, lr}
 800780c:	4604      	mov	r4, r0
 800780e:	460d      	mov	r5, r1
 8007810:	d904      	bls.n	800781c <_raise_r+0x14>
 8007812:	2316      	movs	r3, #22
 8007814:	6003      	str	r3, [r0, #0]
 8007816:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800781a:	bd38      	pop	{r3, r4, r5, pc}
 800781c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800781e:	b112      	cbz	r2, 8007826 <_raise_r+0x1e>
 8007820:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007824:	b94b      	cbnz	r3, 800783a <_raise_r+0x32>
 8007826:	4620      	mov	r0, r4
 8007828:	f000 f830 	bl	800788c <_getpid_r>
 800782c:	462a      	mov	r2, r5
 800782e:	4601      	mov	r1, r0
 8007830:	4620      	mov	r0, r4
 8007832:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007836:	f000 b817 	b.w	8007868 <_kill_r>
 800783a:	2b01      	cmp	r3, #1
 800783c:	d00a      	beq.n	8007854 <_raise_r+0x4c>
 800783e:	1c59      	adds	r1, r3, #1
 8007840:	d103      	bne.n	800784a <_raise_r+0x42>
 8007842:	2316      	movs	r3, #22
 8007844:	6003      	str	r3, [r0, #0]
 8007846:	2001      	movs	r0, #1
 8007848:	e7e7      	b.n	800781a <_raise_r+0x12>
 800784a:	2400      	movs	r4, #0
 800784c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007850:	4628      	mov	r0, r5
 8007852:	4798      	blx	r3
 8007854:	2000      	movs	r0, #0
 8007856:	e7e0      	b.n	800781a <_raise_r+0x12>

08007858 <raise>:
 8007858:	4b02      	ldr	r3, [pc, #8]	; (8007864 <raise+0xc>)
 800785a:	4601      	mov	r1, r0
 800785c:	6818      	ldr	r0, [r3, #0]
 800785e:	f7ff bfd3 	b.w	8007808 <_raise_r>
 8007862:	bf00      	nop
 8007864:	20000010 	.word	0x20000010

08007868 <_kill_r>:
 8007868:	b538      	push	{r3, r4, r5, lr}
 800786a:	4d07      	ldr	r5, [pc, #28]	; (8007888 <_kill_r+0x20>)
 800786c:	2300      	movs	r3, #0
 800786e:	4604      	mov	r4, r0
 8007870:	4608      	mov	r0, r1
 8007872:	4611      	mov	r1, r2
 8007874:	602b      	str	r3, [r5, #0]
 8007876:	f7f9 ff45 	bl	8001704 <_kill>
 800787a:	1c43      	adds	r3, r0, #1
 800787c:	d102      	bne.n	8007884 <_kill_r+0x1c>
 800787e:	682b      	ldr	r3, [r5, #0]
 8007880:	b103      	cbz	r3, 8007884 <_kill_r+0x1c>
 8007882:	6023      	str	r3, [r4, #0]
 8007884:	bd38      	pop	{r3, r4, r5, pc}
 8007886:	bf00      	nop
 8007888:	200002f8 	.word	0x200002f8

0800788c <_getpid_r>:
 800788c:	f7f9 bf32 	b.w	80016f4 <_getpid>

08007890 <__sread>:
 8007890:	b510      	push	{r4, lr}
 8007892:	460c      	mov	r4, r1
 8007894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007898:	f000 f894 	bl	80079c4 <_read_r>
 800789c:	2800      	cmp	r0, #0
 800789e:	bfab      	itete	ge
 80078a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80078a2:	89a3      	ldrhlt	r3, [r4, #12]
 80078a4:	181b      	addge	r3, r3, r0
 80078a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80078aa:	bfac      	ite	ge
 80078ac:	6563      	strge	r3, [r4, #84]	; 0x54
 80078ae:	81a3      	strhlt	r3, [r4, #12]
 80078b0:	bd10      	pop	{r4, pc}

080078b2 <__swrite>:
 80078b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078b6:	461f      	mov	r7, r3
 80078b8:	898b      	ldrh	r3, [r1, #12]
 80078ba:	05db      	lsls	r3, r3, #23
 80078bc:	4605      	mov	r5, r0
 80078be:	460c      	mov	r4, r1
 80078c0:	4616      	mov	r6, r2
 80078c2:	d505      	bpl.n	80078d0 <__swrite+0x1e>
 80078c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078c8:	2302      	movs	r3, #2
 80078ca:	2200      	movs	r2, #0
 80078cc:	f000 f868 	bl	80079a0 <_lseek_r>
 80078d0:	89a3      	ldrh	r3, [r4, #12]
 80078d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078da:	81a3      	strh	r3, [r4, #12]
 80078dc:	4632      	mov	r2, r6
 80078de:	463b      	mov	r3, r7
 80078e0:	4628      	mov	r0, r5
 80078e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078e6:	f000 b817 	b.w	8007918 <_write_r>

080078ea <__sseek>:
 80078ea:	b510      	push	{r4, lr}
 80078ec:	460c      	mov	r4, r1
 80078ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078f2:	f000 f855 	bl	80079a0 <_lseek_r>
 80078f6:	1c43      	adds	r3, r0, #1
 80078f8:	89a3      	ldrh	r3, [r4, #12]
 80078fa:	bf15      	itete	ne
 80078fc:	6560      	strne	r0, [r4, #84]	; 0x54
 80078fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007902:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007906:	81a3      	strheq	r3, [r4, #12]
 8007908:	bf18      	it	ne
 800790a:	81a3      	strhne	r3, [r4, #12]
 800790c:	bd10      	pop	{r4, pc}

0800790e <__sclose>:
 800790e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007912:	f000 b813 	b.w	800793c <_close_r>
	...

08007918 <_write_r>:
 8007918:	b538      	push	{r3, r4, r5, lr}
 800791a:	4d07      	ldr	r5, [pc, #28]	; (8007938 <_write_r+0x20>)
 800791c:	4604      	mov	r4, r0
 800791e:	4608      	mov	r0, r1
 8007920:	4611      	mov	r1, r2
 8007922:	2200      	movs	r2, #0
 8007924:	602a      	str	r2, [r5, #0]
 8007926:	461a      	mov	r2, r3
 8007928:	f7f9 ff23 	bl	8001772 <_write>
 800792c:	1c43      	adds	r3, r0, #1
 800792e:	d102      	bne.n	8007936 <_write_r+0x1e>
 8007930:	682b      	ldr	r3, [r5, #0]
 8007932:	b103      	cbz	r3, 8007936 <_write_r+0x1e>
 8007934:	6023      	str	r3, [r4, #0]
 8007936:	bd38      	pop	{r3, r4, r5, pc}
 8007938:	200002f8 	.word	0x200002f8

0800793c <_close_r>:
 800793c:	b538      	push	{r3, r4, r5, lr}
 800793e:	4d06      	ldr	r5, [pc, #24]	; (8007958 <_close_r+0x1c>)
 8007940:	2300      	movs	r3, #0
 8007942:	4604      	mov	r4, r0
 8007944:	4608      	mov	r0, r1
 8007946:	602b      	str	r3, [r5, #0]
 8007948:	f7f9 ff2f 	bl	80017aa <_close>
 800794c:	1c43      	adds	r3, r0, #1
 800794e:	d102      	bne.n	8007956 <_close_r+0x1a>
 8007950:	682b      	ldr	r3, [r5, #0]
 8007952:	b103      	cbz	r3, 8007956 <_close_r+0x1a>
 8007954:	6023      	str	r3, [r4, #0]
 8007956:	bd38      	pop	{r3, r4, r5, pc}
 8007958:	200002f8 	.word	0x200002f8

0800795c <_fstat_r>:
 800795c:	b538      	push	{r3, r4, r5, lr}
 800795e:	4d07      	ldr	r5, [pc, #28]	; (800797c <_fstat_r+0x20>)
 8007960:	2300      	movs	r3, #0
 8007962:	4604      	mov	r4, r0
 8007964:	4608      	mov	r0, r1
 8007966:	4611      	mov	r1, r2
 8007968:	602b      	str	r3, [r5, #0]
 800796a:	f7f9 ff2a 	bl	80017c2 <_fstat>
 800796e:	1c43      	adds	r3, r0, #1
 8007970:	d102      	bne.n	8007978 <_fstat_r+0x1c>
 8007972:	682b      	ldr	r3, [r5, #0]
 8007974:	b103      	cbz	r3, 8007978 <_fstat_r+0x1c>
 8007976:	6023      	str	r3, [r4, #0]
 8007978:	bd38      	pop	{r3, r4, r5, pc}
 800797a:	bf00      	nop
 800797c:	200002f8 	.word	0x200002f8

08007980 <_isatty_r>:
 8007980:	b538      	push	{r3, r4, r5, lr}
 8007982:	4d06      	ldr	r5, [pc, #24]	; (800799c <_isatty_r+0x1c>)
 8007984:	2300      	movs	r3, #0
 8007986:	4604      	mov	r4, r0
 8007988:	4608      	mov	r0, r1
 800798a:	602b      	str	r3, [r5, #0]
 800798c:	f7f9 ff29 	bl	80017e2 <_isatty>
 8007990:	1c43      	adds	r3, r0, #1
 8007992:	d102      	bne.n	800799a <_isatty_r+0x1a>
 8007994:	682b      	ldr	r3, [r5, #0]
 8007996:	b103      	cbz	r3, 800799a <_isatty_r+0x1a>
 8007998:	6023      	str	r3, [r4, #0]
 800799a:	bd38      	pop	{r3, r4, r5, pc}
 800799c:	200002f8 	.word	0x200002f8

080079a0 <_lseek_r>:
 80079a0:	b538      	push	{r3, r4, r5, lr}
 80079a2:	4d07      	ldr	r5, [pc, #28]	; (80079c0 <_lseek_r+0x20>)
 80079a4:	4604      	mov	r4, r0
 80079a6:	4608      	mov	r0, r1
 80079a8:	4611      	mov	r1, r2
 80079aa:	2200      	movs	r2, #0
 80079ac:	602a      	str	r2, [r5, #0]
 80079ae:	461a      	mov	r2, r3
 80079b0:	f7f9 ff22 	bl	80017f8 <_lseek>
 80079b4:	1c43      	adds	r3, r0, #1
 80079b6:	d102      	bne.n	80079be <_lseek_r+0x1e>
 80079b8:	682b      	ldr	r3, [r5, #0]
 80079ba:	b103      	cbz	r3, 80079be <_lseek_r+0x1e>
 80079bc:	6023      	str	r3, [r4, #0]
 80079be:	bd38      	pop	{r3, r4, r5, pc}
 80079c0:	200002f8 	.word	0x200002f8

080079c4 <_read_r>:
 80079c4:	b538      	push	{r3, r4, r5, lr}
 80079c6:	4d07      	ldr	r5, [pc, #28]	; (80079e4 <_read_r+0x20>)
 80079c8:	4604      	mov	r4, r0
 80079ca:	4608      	mov	r0, r1
 80079cc:	4611      	mov	r1, r2
 80079ce:	2200      	movs	r2, #0
 80079d0:	602a      	str	r2, [r5, #0]
 80079d2:	461a      	mov	r2, r3
 80079d4:	f7f9 feb0 	bl	8001738 <_read>
 80079d8:	1c43      	adds	r3, r0, #1
 80079da:	d102      	bne.n	80079e2 <_read_r+0x1e>
 80079dc:	682b      	ldr	r3, [r5, #0]
 80079de:	b103      	cbz	r3, 80079e2 <_read_r+0x1e>
 80079e0:	6023      	str	r3, [r4, #0]
 80079e2:	bd38      	pop	{r3, r4, r5, pc}
 80079e4:	200002f8 	.word	0x200002f8

080079e8 <_init>:
 80079e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079ea:	bf00      	nop
 80079ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079ee:	bc08      	pop	{r3}
 80079f0:	469e      	mov	lr, r3
 80079f2:	4770      	bx	lr

080079f4 <_fini>:
 80079f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f6:	bf00      	nop
 80079f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079fa:	bc08      	pop	{r3}
 80079fc:	469e      	mov	lr, r3
 80079fe:	4770      	bx	lr
